(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1631518,      29397]
NotebookOptionsPosition[   1629844,      29363]
NotebookOutlinePosition[   1630250,      29379]
CellTagsIndexPosition[   1630207,      29376]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CUDALink`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.938185192834318*^9, 3.938185192834318*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"ad571793-9239-194e-a2d2-808be6f648b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CUDAInformation", "[", 
  RowBox[{"1", ",", " ", "\"\<Name\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.9381852061730976`*^9, 3.9381852278954754`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"467f9ebe-fedf-2548-b52a-bdaf4f2a058a"],

Cell[BoxData["\<\"NVIDIA GeForce RTX 4090\"\>"], "Output",
 CellChangeTimes->{{3.938185208510809*^9, 3.9381852283744984`*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"7d145179-e669-b842-bd89-18fe7f947d96"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Define", " ", "the", " ", "folder", " ", "containing", " ", "the", " ", 
    "images"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{
    "imageFolder", "=", 
     "\"\<C:\\\\Users\\\\tuzhe\\\\Desktop\\\\2024_new_lamp\>\""}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Get", " ", "a", " ", "list", " ", "of", " ", 
     RowBox[{"all", ".", "png"}], " ", "files", " ", "in", " ", "the", " ", 
     "folder"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"imageFiles", "=", 
     RowBox[{"FileNames", "[", 
      RowBox[{"\"\<*.png\>\"", ",", "imageFolder"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Extract", " ", "file", " ", "names", " ", "without", " ", "the", " ", 
     "extension"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"imageNames", "=", 
     RowBox[{"FileBaseName", "/@", "imageFiles"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Display", " ", "the", " ", "list"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"imageNames", ";"}]}]}]], "Input",
 CellChangeTimes->{{3.93818675143944*^9, 3.9381867537729416`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"50458930-f01f-df45-b248-410012356774"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"textEncoder", ",", "imageEncoder"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetModel", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<BLIP Image-Text Matching Nets Trained on Captioning Datasets\>\"",
         ",", 
        RowBox[{"\"\<Part\>\"", "->", "#"}]}], "}"}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{"\"\<TextEncoder\>\"", ",", "\"\<ImageEncoder\>\""}], "}"}]}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Define", " ", "helper", " ", "function", " ", "to", " ", "get", " ", 
     "pre"}], "-", 
    RowBox[{
    "encoded", " ", "image", " ", "features", " ", "or", " ", "encode", " ", 
     "new", " ", "images"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEncodedImage", "[", "image_", "]"}], ":=", 
   RowBox[{"imageEncoder", "[", 
    RowBox[{"image", ",", 
     RowBox[{"NetPort", "[", "\"\<RawFeatures\>\"", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"0ccb6489-ab78-3746-a264-04dc6f21f6c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TemplateBox[{
      RowBox[{
        StyleBox[
         TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{
         Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
         TemplateBox[{
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                   GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["\"string\"", "SummaryItem"], "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                   GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -9}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TextEmbed..\"", "\"TextEmbeddings\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "TextEmbeddings", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{0, -20.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Normalize\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -20.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -9}, {0., 0.}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Part\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    Offset[{0, -20.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Proj\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -20.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TextEncod..\"", "\"TextEncoder\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "TextEncoder", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -20.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    StyleBox[
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294277`*^-7, 
                    5.4999999999999964`}, {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716865`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"256\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"768\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.143591762329427*^-7, 
                    5.4999999999999964`}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439567871685*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"256\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.4999999999999964`}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.4999999999999964`}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716846`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "30524", "\"\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector of ", 
                    Style["n", Italic], " indices ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 30524, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 768\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]768\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]768\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871689*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "30524", "\"\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector of ", 
                    Style["n", Italic], " indices ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 30524, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-2.4499999999999993`, 
                    6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999998, -3.897439567871687*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 768\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-1.4499999999999993`, 
                    3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999996, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]768\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999996, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]768\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-5.999999999999998, 1.6076938217470707`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TextEmbeddings\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TextEmbeddings", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJtIGZiAIMG27UqDkB6g+wfQxDdUOsO4e8VMILwnyiD
+bryEL5tC4R/VgPCj1WF8HONIPy7e5TAfFtzCF/WB5X/t0wRhT/3tgLEPFmo
edUQfu9LqHtkIPy128B8ht035CHuy0bly3Kh8n13GEDM51TBxk/Yna+PrB6D
X71YDcyvviKFlY9QL4KNv6F3lQGyepj9cP5cFkMUPm8olM8gDeb/nQ/hW0dD
+LlPofzNEP5dLSOIensZSPikQfi//0P4ujOg8gdkIfInIXzrrXIQ/R+g/HuQ
8OLlNYaETzMkvG01IXxbI0h8rTWH8Pf+ReXPnayEyleCpIdaQwhfdg2Ev1cZ
Km8KiY9Ycaj5O6DpjwXC/2usCpF/DU1vSOkTABaXoos=
                    "]]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    14.333966255187988`, 9.251429557800293}, {
                    11.959942817687988`, 9.251429557800293}, {
                    11.959942817687988`, 18.162074089050293`}, {
                    14.333966255187988`, 18.162074089050293`}, {
                    14.333966255187988`, 17.238245964050293`}, {
                    12.915997505187988`, 17.238245964050293`}, {
                    12.915997505187988`, 10.175257682800293`}, {
                    14.333966255187988`, 10.175257682800293`}, {
                    14.333966255187988`, 9.251429557800293}}}]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJ1IGZiAIML97YbOADphN92OiB6wd4TuiB6g+8OsPiF
OBcDFH7dD4j63Sn6ED6fIZhfLQXh26lD+NJn9CD6HSH831UQfl00hG+tDeH7
lUH13wbbeyFvAoS/uxvCl5uDyt+3AWr+LSj/GKp5dfeh6msh/L7vUPkLEL4d
nxGYP1sO4t57ShC+dRbUP8eMUP0rbYLCt3OF6v+tDebr2ZpA3L9YDcK/a4TC
lxOF8KOPaoD5/35B3DObXxPVvQkQ/ruDEH70dgifbyk0/Hi1IO7tgIZXAoT/
Lxvqvw1QfgIq/54b1PxYCD9PF2o/D4TPJwYNz10Q+9b9g8RvdBbUPU8h/Gox
CP/caQj/9n6If9aJGyD7d0Fsqy6K/5HTFwAUTqMS
                    "]]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    23.039533615112305`, 9.251429557800293}, {
                    20.660139083862305`, 9.251429557800293}, {
                    20.660139083862305`, 10.175257682800293`}, {
                    22.083478927612305`, 10.175257682800293`}, {
                    22.083478927612305`, 17.238245964050293`}, {
                    20.660139083862305`, 17.238245964050293`}, {
                    20.660139083862305`, 18.162074089050293`}, {
                    23.039533615112305`, 18.162074089050293`}, {
                    23.039533615112305`, 9.251429557800293}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-0.9999999999999997, 2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Normalize\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"FunctionLayer", "[", "Normalize", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Normalize", Bold], 
                    HoldForm[
                    FunctionLayer[Normalize]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.36328125, 
                    8.962890625}, {8.162109375, 8.962890625}, {8.162109375, 
                    19.837890625}, {12.36328125, 19.837890625}, {12.36328125, 
                    18.96484375}, {11.0859375, 18.96484375}, {11.0859375, 
                    9.736328125}, {12.36328125, 9.736328125}, {12.36328125, 
                    8.962890625}}, {{9.92578125, 18.96484375}, {8.923828125, 
                    18.96484375}, {8.923828125, 9.73046875}, {9.919921875, 
                    9.73046875}, {9.92578125, 18.96484375}}}]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.563508987426758`, 9.736328125}, {16.840852737426758`, 
                    9.736328125}, {16.840852737426758`, 18.96484375}, {
                    15.563508987426758`, 18.96484375}, {15.563508987426758`, 
                    19.837890625}, {19.764680862426758`, 19.837890625}, {
                    19.764680862426758`, 8.962890625}, {15.563508987426758`, 
                    8.962890625}, {15.563508987426758`, 9.736328125}}, {{
                    18.006868362426758`, 9.73046875}, {19.002962112426758`, 
                    9.73046875}, {19.002962112426758`, 18.96484375}, {
                    18.001008987426758`, 18.96484375}, {18.006868362426758`, 
                    9.73046875}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-2.999999999999999, 8.038469108735353*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Part\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Part", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {7.250000953674316, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {14.000000953674316`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {20.750001907348633`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {7.249997138977051, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {13.999998092651367`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {20.749998092651367`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, CompressedData["
1:eJxtlDFoE1EYxw/FJbgoLbU1Yi6X5nKmTc5cExxSeZuii+jQxSEIXaTabsXt
TSJOoYOTYEVwdnRwOFpcujkVtBSXSqHURbL75b33vfd/lxyEyz/H9/++7/fP
vfDZ5uP1i0EQXKLPPH0uBObKe2J86x3dFk7Lveb6WIvByVA9XxX/0vF957yv
9Mv7H5TeG512x/fdRw+V7pe2u9qvnGq/wNP56M0KalGaW8H6rav7GfrvLmxm
2J8qMpiPNcyvn6+KJx2s329+76D/TjSfYf/B9ReZP9/7zJ9fa7ef1rw/1zMf
42/5cX/my/NN8pftKdrumx+EbeRR+fWqhbzk2Y9l5Cln/i4V8vC0PLvSRD2Y
ad3C+t+11wn6i+5xw89DNvw8lMb5G7gv1zMP9uc8uD/zdPPZPJZQu/2MNvtz
PfNhf+bn8tB8XR4T/MMpGvMIC3lUkFdw+Okm8gySoxuFPMqePowWPJ08vebV
P7g8h/7y+bdZ7E/XrPDyUBrm1895X663PIw/8+L+zNPNZ/Moe9ruZ7TZH/Ko
oD/zgzxC4edR4J/r3ze+Rqjl2kFV9TkZai3/qLrheV//z4Z3lc5Hp8pHfHyn
5hClbe27cadi9vE0nQcpajovUqyn/28b/dPucQv707cWzsfaza/1lvxc8+rX
3i6if3qvU8f+X3o/64X54sL8cWG/GPfneubD/paf6c98eb5J/jKZpnlfyjdB
HpR/A3nR+xojT3qf68ibLk/TebCIms6LGtYTrwj96bypYn/6VsX5WMP8VdzX
1rs8Io+X6c88YT7Oo44a9otxf65nPuxv+dk8NF+XB/D/D5kFgAI=
                    "]]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-1.9999999999999993`, 5.3589794058235685`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Proj\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Proj", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-3.9999999999999987`, 1.0717958811647137`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TextEncoder\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TextEncoder", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`\
makeSelectionHighlighter[
                    
                    Part[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}, {0., 0.}, {-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    
                    Part[{8, 31, 31, 8, 31, 31, 31}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Part[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    StandardForm, Graphics]]}, 
                    ImageSize -> {399.9999999999999, 60.00001286155057}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35., 35.}, {35., 25.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Input\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Output\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "TextEmbeddings" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 30524]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"WordEmbedding" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{30524, 768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "ClassCount" -> 30524, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 30524]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Indices" -> <|"Type" -> "SequenceIndices", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Maximum" -> 512, "$Length" -> 
                    NeuralNetworks`LengthVar[927311793]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 30524]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>|>, 
                    "PositionEmbeddings" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "ClassCount" -> 512, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Indices", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WordEmbedding", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WordEmbedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PositionEmbeddings", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Indices", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PositionEmbeddings", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"]}|>, 
                    "TextEncoder" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"TextLayer1" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Total", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "Attention" -> <|
                    "Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>, 
                    "TextLayer12" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Attention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Key" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {12, 64},
                     "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {12, 64}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Attention" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[927311793], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "ExtraOutputs" -> <|
                    "AttentionWeights" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Output" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Value", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Query", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input2"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Key"] -> NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Value"] -> NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Attention", "Inputs", 
                    "Query"] -> NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Output", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Dropout", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Output", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Total", "Inputs", 
                    "Input1"] -> NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Norm", "Outputs", 
                    "Output"]}|>, "Linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Act" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[927311793], "$InputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Total" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Act", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Act", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "TextLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextLayer12", "Outputs", "Output"]}|>, 
                    "Part" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[1]|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "Proj" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {256}, "$OutputSize" -> 256, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Normalize" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Normalize, 
                    "Net" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Sqrt], 
                    "$Dimensions" -> {}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}|>, "divide" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Divide], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>|>,
                     "Inputs" -> <|
                    "Input" -> <|"Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927311793]}, 
                    NeuralNetworks`IndexIntegerT[1, 30524]], "Type" -> 
                    "SubwordTokens", "Tokens" -> 
                    NeuralNetworks`ValidatedParameter[{
                    "\" [PAD]\"", "\" [unused0]\"", 
                    Skeleton[30519], "\"\:ff5e\""}], "Vocabulary" -> 
                    NeuralNetworks`ValidatedParameter[None], "Count" -> 30522,
                     "Method" -> NeuralNetworks`ValidatedParameter[
                    "WordPiece"], "InputType" -> "String", "OutputProperties" -> 
                    NeuralNetworks`ValidatedParameter["VocabularyIndex"], 
                    "TextPreprocessing" -> 
                    NeuralNetworks`ValidatedParameter[None], 
                    "IncludeTerminalTokens" -> True, "IgnoreCase" -> True, 
                    "UnicodeNormalization" -> None, "TargetLength" -> All, 
                    "$InternalTargetLength" -> NeuralNetworks`LengthVar[0], 
                    "$Padding" -> Automatic, "$Version" -> "14.1.2"|>|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "TextEmbeddings", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextEncoder", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextEmbeddings", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TextEncoder", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Proj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Proj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Normalize", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "TextEmbeddings"], 
                    NeuralNetworks`NetPath["Nodes", "Normalize"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Part"], 
                    NeuralNetworks`NetPath["Nodes", "Proj"], 
                    NeuralNetworks`NetPath["Nodes", "TextEncoder"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "TextEmbeddings"], 
                    NeuralNetworks`NetPath["Nodes", "Normalize"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Part"], 
                    NeuralNetworks`NetPath["Nodes", "Proj"], 
                    NeuralNetworks`NetPath["Nodes", "TextEncoder"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
            "SummaryPanel"], 
           ButtonBox[
            DynamicBox[
             ToBoxes[
              If[
               
               Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
                "Local"], 
               Style["This object cannot be used as input.", "SummaryEmbed"], 
               BoxForm`EmbedSummaryLabel[NetGraph, 438791512, 
                Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
            ButtonFunction :> 
            BoxForm`EmbedSummaryInterpretation[
             "Choose", NetGraph, 438791512, 
              7710521304538733832749594298768493204293899955398745960976, 
              EvaluationBox[], 
              Dynamic[Typeset`embedState$$], StandardForm, 
              ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
            "SummaryEmbedButton", ImageSize -> Inherited, 
            BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
              
              And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
               "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
            Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
          "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("NetGraph[<5>, <6>]"& )],
    False,
    BoxID -> 7710521304538733832749594298768493204293899955398745960976,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TemplateBox[{
      RowBox[{
        StyleBox[
         TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{
         Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
         TemplateBox[{
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                   GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["\"image\"", "SummaryItem"], "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["2", "SummaryItem"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                   GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -9}, {-17.999999999999993`, 
                    4.823081465241212*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Embeddings\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-16.999999999999993`, 
                    4.555132494950033*^-7}], 
                    
                    Offset[{0, -20.5}, {-16.999999999999993`, 
                    4.555132494950033*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-15.999999999999995`, 
                    4.287183524658855*^-7}], 
                    
                    Offset[{0, -20.5}, {-15.999999999999995`, 
                    4.287183524658855*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-14.999999999999995`, 
                    4.0192345543676764`*^-7}], 
                    
                    Offset[{0, -20.5}, {-14.999999999999995`, 
                    4.0192345543676764`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer10\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-6.999999999999997, 
                    1.875642792038249*^-7}], 
                    
                    Offset[{0, -20.5}, {-6.999999999999997, 
                    1.875642792038249*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer11\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{0, -20.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer12\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{0, -20.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Norm\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -20.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-13.999999999999995`, 
                    3.751285584076498*^-7}], 
                    
                    Offset[{0, -20.5}, {-13.999999999999995`, 
                    3.751285584076498*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-12.999999999999996`, 
                    3.4833366137853197`*^-7}], 
                    
                    Offset[{0, -20.5}, {-12.999999999999996`, 
                    3.4833366137853197`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer5\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-11.999999999999996`, 
                    3.2153876434941414`*^-7}], 
                    
                    Offset[{0, -20.5}, {-11.999999999999996`, 
                    3.2153876434941414`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer6\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}], 
                    
                    Offset[{0, -20.5}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer7\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    
                    Offset[{0, -20.5}, {-9.999999999999996, 
                    2.679489702911784*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer8\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-8.999999999999996, 
                    2.411540732620606*^-7}], 
                    
                    Offset[{0, -20.5}, {-8.999999999999996, 
                    2.411540732620606*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Layer9\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-7.999999999999997, 
                    2.1435917623294274`*^-7}], 
                    
                    Offset[{0, -20.5}, {-7.999999999999997, 
                    2.1435917623294274`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"RawFeatur..\"", "\"RawFeatures\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "RawFeatures", 
                    "Tooltip"]& ], TraditionalForm], 
                    
                    Offset[{
                    0, -9}, {-3.000000026794896, -0.9999999196153085}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Part\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{0, -20.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Normalize\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -20.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -9}, {0., 0.}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Proj\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -20.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"384\"", "\"384\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-17.449999999999992`, 
                    4.675709531581064*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294295`*^-7, 
                    5.4999999999999964`}, {-16.449999999999992`, 
                    4.407760561289885*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.89743956787169*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-15.449999999999996`, 
                    4.1398115909987066`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294271`*^-7, 
                    5.4999999999999964`}, {-6.4499999999999975`, 
                    1.728270858378101*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439567871686*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294277`*^-7, 
                    5.4999999999999964`}, {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716865`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    Offset[{2.1435917623294266`*^-7, 
                    5.4999999999999964`}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-14.449999999999996`, 
                    3.8718626207075283`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294295`*^-7, 
                    5.4999999999999964`}, {-13.449999999999996`, 
                    3.60391365041635*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.89743956787169*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-12.449999999999996`, 
                    3.3359646801251716`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294298`*^-7, 
                    5.4999999999999964`}, {-11.449999999999996`, 
                    3.0680157098339927`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716905`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-10.449999999999996`, 
                    2.8000667395428143`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-9.449999999999996, 
                    2.532117769251636*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294271`*^-7, 
                    5.4999999999999964`}, {-8.449999999999996, 
                    2.2641687989604576`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439567871686*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-7.4499999999999975`, 
                    1.9962198286692792`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{4.532230661050466, 
                    3.1159084124913003`}, {-3.450000014737192, \
-0.5499999075576051}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.5665288022711455, -0.824041938372812}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"577\"", 
                    "\"768\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.4999999999999964`}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"256\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"768\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.143591762329427*^-7, 
                    5.4999999999999964`}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439567871685*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"256\"", 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-17.999999999999993`, 
                    4.823081465241212*^-7}, {-16.999999999999993`, 
                    4.555132494950033*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]384\[Times]384\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]384\[Times]384\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-16.999999999999993`, 
                    4.555132494950033*^-7}, {-15.999999999999995`, 
                    4.287183524658855*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-15.999999999999995`, 
                    4.287183524658855*^-7}, {-14.999999999999995`, 
                    4.0192345543676764`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-14.999999999999995`, 
                    4.0192345543676764`*^-7}, {-13.999999999999995`, 
                    3.751285584076498*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.999999999999995`, 
                    3.751285584076498*^-7}, {-12.999999999999996`, 
                    3.4833366137853197`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-12.999999999999996`, 
                    3.4833366137853197`*^-7}, {-11.999999999999996`, 
                    3.2153876434941414`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-11.999999999999996`, 
                    3.2153876434941414`*^-7}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.999999999999996`, 
                    2.9474386732029625`*^-7}, {-9.999999999999996, 
                    2.679489702911784*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.999999999999996, 
                    2.679489702911784*^-7}, {-8.999999999999996, 
                    2.411540732620606*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999999999996, 
                    2.411540732620606*^-7}, {-7.999999999999997, 
                    2.1435917623294274`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999999999997, 
                    2.1435917623294274`*^-7}, {-6.999999999999997, 
                    1.875642792038249*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.000000026794896, \
-0.9999999196153085}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"RawFeatures\""}, 
                    "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "RawFeatures"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 768\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-17.449999999999992`, 
                    4.675709531581064*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]384\[Times]384\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]384\[Times]384\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-16.449999999999992`, 
                    4.407760561289885*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-15.449999999999996`, 
                    4.1398115909987066`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-6.4499999999999975`, 
                    1.728270858378101*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999991, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871689*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999996, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-14.449999999999996`, 
                    3.8718626207075283`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-13.449999999999996`, 
                    3.60391365041635*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-12.449999999999996`, 
                    3.3359646801251716`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-11.449999999999996`, 
                    3.0680157098339927`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871693*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-10.449999999999996`, 
                    2.8000667395428143`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-9.449999999999996, 
                    2.532117769251636*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-8.449999999999996, 
                    2.2641687989604576`*^-7}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999991, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-7.4499999999999975`, 
                    1.9962198286692792`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-3.450000014737192, -0.5499999075576051}, \
{-0.25, 0}, 
                    Offset[10], {0.9999999732051026, -1.4545454935198499`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"RawFeatures\""}, 
                    "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "RawFeatures"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999996, -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-2.4499999999999993`, 
                    6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999998, -3.897439567871687*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 768\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 768\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-1.4499999999999993`, 
                    3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-17.999999999999993`, 4.823081465241212*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-16.999999999999993`, 4.555132494950033*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Embeddings\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Embeddings", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-15.999999999999995`, 4.287183524658855*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer1", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-14.999999999999995`, 4.0192345543676764`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer2", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-6.999999999999997, 
                    1.875642792038249*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer10", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer11", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer12", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], 
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJpIGZiAIOEBfJqDiDGhgYjEJ3QYKCJwl+wVxfMf5Cn
DeY/CNYH8x0uqYP5CemofIVwCF9hiwZE3gEqvwxsbsIBFSh/lRaEzwXlr4OY
f+CvHkT/Kh0UfsN8XRQ+1H0GB94bYOUzMKhA3H9OD4Xf4Ai2lyFhOsS8B2vA
7mSYMN0AYv50VP6ClRC+gQqEn3AAwncI04fwb0H4ByL0IPwvEP6DGIj5DMyQ
8HRI0UHhw8ITxoe7Fxof6HyQ/wDn9FU8
                    "]]}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-3.9999999999999987`, 1.0717958811647137`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NormalizationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Norm", Bold], 
                    Style[
                    NormalizationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-13.999999999999995`, 3.751285584076498*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer3", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-12.999999999999996`, 3.4833366137853197`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer4", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-11.999999999999996`, 3.2153876434941414`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer5", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-10.999999999999996`, 2.9474386732029625`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer6", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer7", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-8.999999999999996, 
                    2.411540732620606*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer8", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-7.999999999999997, 
                    2.1435917623294274`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Layer9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Layer9", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-3.000000026794896, -0.9999999196153085}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"RawFeatures\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["RawFeatures", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.36328125, 
                    8.962890625}, {8.162109375, 8.962890625}, {8.162109375, 
                    19.837890625}, {12.36328125, 19.837890625}, {12.36328125, 
                    18.96484375}, {11.0859375, 18.96484375}, {11.0859375, 
                    9.736328125}, {12.36328125, 9.736328125}, {12.36328125, 
                    8.962890625}}, {{9.92578125, 18.96484375}, {8.923828125, 
                    18.96484375}, {8.923828125, 9.73046875}, {9.919921875, 
                    9.73046875}, {9.92578125, 18.96484375}}}]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.563508987426758`, 9.736328125}, {16.840852737426758`, 
                    9.736328125}, {16.840852737426758`, 18.96484375}, {
                    15.563508987426758`, 18.96484375}, {15.563508987426758`, 
                    19.837890625}, {19.764680862426758`, 19.837890625}, {
                    19.764680862426758`, 8.962890625}, {15.563508987426758`, 
                    8.962890625}, {15.563508987426758`, 9.736328125}}, {{
                    18.006868362426758`, 9.73046875}, {19.002962112426758`, 
                    9.73046875}, {19.002962112426758`, 18.96484375}, {
                    18.001008987426758`, 18.96484375}, {18.006868362426758`, 
                    9.73046875}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-2.999999999999999, 8.038469108735353*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Part\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Part", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJtIGZiAIMG27UqDkB6g+wfQxDdUOsO4e8VMILwnyiD
+bryEL5tC4R/VgPCj1WF8HONIPy7e5TAfFtzCF/WB5X/t0wRhT/3tgLEPFmo
edUQfu9LqHtkIPy128B8ht035CHuy0bly3Kh8n13GEDM51TBxk/Yna+PrB6D
X71YDcyvviKFlY9QL4KNv6F3lQGyepj9cP5cFkMUPm8olM8gDeb/nQ/hW0dD
+LlPofzNEP5dLSOIensZSPikQfi//0P4ujOg8gdkIfInIXzrrXIQ/R+g/HuQ
8OLlNYaETzMkvG01IXxbI0h8rTWH8Pf+ReXPnayEyleCpIdaQwhfdg2Ev1cZ
Km8KiY9Ycaj5O6DpjwXC/2usCpF/DU1vSOkTABaXoos=
                    "]]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    14.333966255187988`, 9.251429557800293}, {
                    11.959942817687988`, 9.251429557800293}, {
                    11.959942817687988`, 18.162074089050293`}, {
                    14.333966255187988`, 18.162074089050293`}, {
                    14.333966255187988`, 17.238245964050293`}, {
                    12.915997505187988`, 17.238245964050293`}, {
                    12.915997505187988`, 10.175257682800293`}, {
                    14.333966255187988`, 10.175257682800293`}, {
                    14.333966255187988`, 9.251429557800293}}}]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJ1IGZiAIML97YbOADphN92OiB6wd4TuiB6g+8OsPiF
OBcDFH7dD4j63Sn6ED6fIZhfLQXh26lD+NJn9CD6HSH831UQfl00hG+tDeH7
lUH13wbbeyFvAoS/uxvCl5uDyt+3AWr+LSj/GKp5dfeh6msh/L7vUPkLEL4d
nxGYP1sO4t57ShC+dRbUP8eMUP0rbYLCt3OF6v+tDebr2ZpA3L9YDcK/a4TC
lxOF8KOPaoD5/35B3DObXxPVvQkQ/ruDEH70dgifbyk0/Hi1IO7tgIZXAoT/
Lxvqvw1QfgIq/54b1PxYCD9PF2o/D4TPJwYNz10Q+9b9g8RvdBbUPU8h/Gox
CP/caQj/9n6If9aJGyD7d0Fsqy6K/5HTFwAUTqMS
                    "]]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    23.039533615112305`, 9.251429557800293}, {
                    20.660139083862305`, 9.251429557800293}, {
                    20.660139083862305`, 10.175257682800293`}, {
                    22.083478927612305`, 10.175257682800293`}, {
                    22.083478927612305`, 17.238245964050293`}, {
                    20.660139083862305`, 17.238245964050293`}, {
                    20.660139083862305`, 18.162074089050293`}, {
                    23.039533615112305`, 18.162074089050293`}, {
                    23.039533615112305`, 9.251429557800293}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-0.9999999999999997, 2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Normalize\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"FunctionLayer", "[", "Normalize", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Normalize", Bold], 
                    HoldForm[
                    FunctionLayer[Normalize]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {7.250000953674316, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {14.000000953674316`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{10.625000953674316`, 
                    9.64120101928711}, {20.750001907348633`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {7.249997138977051, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {13.999998092651367`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{17.374998092651367`, 
                    9.64120101928711}, {20.749998092651367`, 
                    18.079200744628906`}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, CompressedData["
1:eJxtlDFoE1EYxw/FJbgoLbU1Yi6X5nKmTc5cExxSeZuii+jQxSEIXaTabsXt
TSJOoYOTYEVwdnRwOFpcujkVtBSXSqHURbL75b33vfd/lxyEyz/H9/++7/fP
vfDZ5uP1i0EQXKLPPH0uBObKe2J86x3dFk7Lveb6WIvByVA9XxX/0vF957yv
9Mv7H5TeG512x/fdRw+V7pe2u9qvnGq/wNP56M0KalGaW8H6rav7GfrvLmxm
2J8qMpiPNcyvn6+KJx2s329+76D/TjSfYf/B9ReZP9/7zJ9fa7ef1rw/1zMf
42/5cX/my/NN8pftKdrumx+EbeRR+fWqhbzk2Y9l5Cln/i4V8vC0PLvSRD2Y
ad3C+t+11wn6i+5xw89DNvw8lMb5G7gv1zMP9uc8uD/zdPPZPJZQu/2MNvtz
PfNhf+bn8tB8XR4T/MMpGvMIC3lUkFdw+Okm8gySoxuFPMqePowWPJ08vebV
P7g8h/7y+bdZ7E/XrPDyUBrm1895X663PIw/8+L+zNPNZ/Moe9ruZ7TZH/Ko
oD/zgzxC4edR4J/r3ze+Rqjl2kFV9TkZai3/qLrheV//z4Z3lc5Hp8pHfHyn
5hClbe27cadi9vE0nQcpajovUqyn/28b/dPucQv707cWzsfaza/1lvxc8+rX
3i6if3qvU8f+X3o/64X54sL8cWG/GPfneubD/paf6c98eb5J/jKZpnlfyjdB
HpR/A3nR+xojT3qf68ibLk/TebCIms6LGtYTrwj96bypYn/6VsX5WMP8VdzX
1rs8Io+X6c88YT7Oo44a9otxf65nPuxv+dk8NF+XB/D/D5kFgAI=
                    "]]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-1.9999999999999993`, 5.3589794058235685`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Proj\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "LinearLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Proj", Bold], 
                    Style[
                    LinearLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`\
makeSelectionHighlighter[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQAWIQ/e8/CBgeCL8+78o/vQV2EL7BgQ4OndIVE+fZ/QXz
9Q8kJUk5Bh+dA+XrHrDZw8H778csKF/6gJjY9xsrdDqh+sUPnDp5ueDf5FYo
X/hAbe0GjpDfjVD1/FDzaqB8baj+mVD1mgc+5D9dEpwwHcpXh5o3FcpXPbBY
+ZDNyuOToXxlqPkToXxFqH8mQM2Xh9rXY5e2agYzAwPHAWnmG1f+/3+/H6Ke
HWp+KVT9+/0Q9TF2DGgAIv8fKp9jBwDXvMyF
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    
                    Part[{8, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
                    31, 31, 8, 31, 31, 8, 31}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Part[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.565492, 0.263725, 0.7075]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    StandardForm, Graphics]]}, 
                    ImageSize -> {1059.9999999999995`, 140.0000321538764}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35., 35.}, {35., 25.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Input\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"Output\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox["\"RawFeatures\"", FrameStyle -> 
                    GrayLevel[0, 0], FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox["\"RawFeatures\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"RawFeatures"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"RawFeatures\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"RawFeatures"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 577\[Times]768\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Embeddings" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 384, 384}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"ClassEmbedding" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{1, 768}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{1, 768}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1, 768}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "PositionEmbedding" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{577, 768}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {577, 768}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Conv" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{768, 3, 16, 16}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"OutputChannels" -> 768, 
                    "KernelSize" -> {16, 16}, "Stride" -> {16, 16}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$InputSize" -> {384, 384}, "$OutputSize" -> {24, 24}, 
                    "$WeightsInputChannels" -> 3|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 384, 384}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Flatten" -> <|"Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{768, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768, 576}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Transpose" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{768, 576}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{576, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Concat" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1, 768}, NeuralNetworks`AtomT], 
                    "Input2" -> NeuralNetworks`TensorT[{576, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`AtomT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Concat", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClassEmbedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PositionEmbedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Concat", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Transpose", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Concat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add", "Outputs", "Output"]}|>, 
                    "Layer1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Layer12" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Norm1" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"InputProject" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2304, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    2304}]|>, "Parameters" -> <|"OutputDimensions" -> {3, 12, 
                    64}, "$OutputSize" -> 2304, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 3,
                     12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Query" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Key" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 2}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "Value" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 3, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>|>, 
                    "SelfAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {577, 12}, 
                    "$QueryShape" -> {577, 12}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{577, 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    12, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{577, 12, 577}, 
                    NeuralNetworks`RealT]|>|>, 
                    "OutputProject" -> <|"Type" -> "NetMap", "Arrays" -> <||>,
                     "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 768, 
                    "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 12, 
                    64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "InputProject", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputProject", "Outputs", "Output"]}|>, 
                    "Add1" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Norm2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MLP" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "NetMap", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Net" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{3072, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{3072}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {3072}, 
                    "$OutputSize" -> 3072, "$InputSize" -> 768, 
                    "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {577, 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|"OutputDimensions" -> {768}, 
                    "$OutputSize" -> 768, "$InputSize" -> 3072, 
                    "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 577, 
                    "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{577, 
                    3072}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{577, 
                    768}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Add2" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{577, 768}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SelfAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "MLP", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MLP", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Add2", "Outputs", "Output"]}|>, 
                    "Norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-6, "Unbiased" -> False, "$Dimensions" -> {577, 768}, 
                    "$StatsDimensions" -> {768}, "GroupNumber" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Part" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[1]|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "Proj" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{256}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {256}, "$OutputSize" -> 256, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Normalize" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Normalize, 
                    "Net" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Sqrt], 
                    "$Dimensions" -> {}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}|>, "divide" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Divide], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "divide", "Outputs", "Output"]}|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>|>,
                     "Inputs" -> <|
                    "Input" -> <|"Form" -> 
                    NeuralNetworks`TensorT[{3, 384, 384}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{384, 384}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48145466, 0.4578275, 0.40821073}, 
                    "VarianceImage" -> {0.0721618297606116, 
                    0.0682790383146564, 0.0760530143999521}, "DataTransposed" -> 
                    False, "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter["Cubic"], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "14.1.2"|>|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "RawFeatures" -> 
                    NeuralNetworks`TensorT[{577, 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Embeddings", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Embeddings", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Layer12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "RawFeatures"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Proj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Proj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Normalize", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Embeddings"], 
                    NeuralNetworks`NetPath["Nodes", "Layer1"], 
                    NeuralNetworks`NetPath["Nodes", "Layer2"], 
                    NeuralNetworks`NetPath["Nodes", "Layer10"], 
                    NeuralNetworks`NetPath["Nodes", "Layer11"], 
                    NeuralNetworks`NetPath["Nodes", "Layer12"], 
                    NeuralNetworks`NetPath["Nodes", "Norm"], 
                    NeuralNetworks`NetPath["Nodes", "Layer3"], 
                    NeuralNetworks`NetPath["Nodes", "Layer4"], 
                    NeuralNetworks`NetPath["Nodes", "Layer5"], 
                    NeuralNetworks`NetPath["Nodes", "Layer6"], 
                    NeuralNetworks`NetPath["Nodes", "Layer7"], 
                    NeuralNetworks`NetPath["Nodes", "Layer8"], 
                    NeuralNetworks`NetPath["Nodes", "Layer9"], 
                    NeuralNetworks`NetPath["Outputs", "RawFeatures"], 
                    NeuralNetworks`NetPath["Nodes", "Part"], 
                    NeuralNetworks`NetPath["Nodes", "Normalize"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Proj"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Embeddings"], 
                    NeuralNetworks`NetPath["Nodes", "Layer1"], 
                    NeuralNetworks`NetPath["Nodes", "Layer2"], 
                    NeuralNetworks`NetPath["Nodes", "Layer10"], 
                    NeuralNetworks`NetPath["Nodes", "Layer11"], 
                    NeuralNetworks`NetPath["Nodes", "Layer12"], 
                    NeuralNetworks`NetPath["Nodes", "Norm"], 
                    NeuralNetworks`NetPath["Nodes", "Layer3"], 
                    NeuralNetworks`NetPath["Nodes", "Layer4"], 
                    NeuralNetworks`NetPath["Nodes", "Layer5"], 
                    NeuralNetworks`NetPath["Nodes", "Layer6"], 
                    NeuralNetworks`NetPath["Nodes", "Layer7"], 
                    NeuralNetworks`NetPath["Nodes", "Layer8"], 
                    NeuralNetworks`NetPath["Nodes", "Layer9"], 
                    NeuralNetworks`NetPath["Outputs", "RawFeatures"], 
                    NeuralNetworks`NetPath["Nodes", "Part"], 
                    NeuralNetworks`NetPath["Nodes", "Normalize"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Proj"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
            "SummaryPanel"], 
           ButtonBox[
            DynamicBox[
             ToBoxes[
              If[
               
               Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
                "Local"], 
               Style["This object cannot be used as input.", "SummaryEmbed"], 
               BoxForm`EmbedSummaryLabel[NetGraph, 346143200, 
                Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
            ButtonFunction :> 
            BoxForm`EmbedSummaryInterpretation[
             "Choose", NetGraph, 346143200, 
              7710521304538733832749594298768493204312346699471837236280, 
              EvaluationBox[], 
              Dynamic[Typeset`embedState$$], StandardForm, 
              ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
            "SummaryEmbedButton", ImageSize -> Inherited, 
            BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
              
              And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
               "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
            Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
          "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("NetGraph[<17>, <19>]"& )],
    False,
    BoxID -> 7710521304538733832749594298768493204312346699471837236280,
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.93818593598151*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"a09a8150-9d74-3346-acda-50a18d549b6a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Load", " ", "pre"}], "-", 
    RowBox[{
    "encoded", " ", "features", " ", "for", " ", "the", " ", "sample", " ", 
     "images", " ", "from", " ", "the", " ", "original", " ", "file"}]}], 
   "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"sampleImageFeatures", "=", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\tuzhe\\\\Desktop\\\\wolfram_dl_deployment\\\\\
Image2024.wxf\>\"", ",", "\"\<WXF\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Flatten", " ", "the", " ", "features", " ", "only", " ", "once"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sampleImageFeaturesFlattened", "=", 
     RowBox[{"N", "[", 
      RowBox[{"Flatten", "/@", "sampleImageFeatures"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
     "\"\<C:\\\\Users\\\\tuzhe\\\\Desktop\\\\wolfram_dl_deployment\\\\\
Image2024_Flattened.mx\>\"", ",", "sampleImageFeaturesFlattened"}], "]"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{
  3.9381859649114456`*^9, {3.9381859980723267`*^9, 3.9381859980800457`*^9}, {
   3.9381860417413273`*^9, 3.938186056895893*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"2bcff302-4b3e-d642-94f0-f8e74d801fce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sampleImageFeaturesFlattened", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\tuzhe\\\\Desktop\\\\wolfram_dl_deployment\\\\\
Image2024_Flattened.mx\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.938186201381464*^9, 3.9381862103307323`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"b814e409-98df-844b-a75a-7e9f293fe2f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testImage2", " ", "=", " ", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\tuzhe\\\\Desktop\\\\2024_new_lamp\\\\B9445-4.png\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9381868286705265`*^9, 3.9381868521805477`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"596fa581-f876-3649-bd81-53290b7b1ae3"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Xd8W9l9JnznjZM4vWw2fjeb8maTbJxkE8epfh3HiZN1HG/elDfNjtt4
imZGXey9N7A3gCBRiN57IwgCJNg7KVEiJar3Puq9PnvunUgr2TPjGUljjZNn
5vMVgYuLg3sv+Md5eO7vnF96afM/vPp/fehDH8r6iPjnH17M+2xm5osF//gT
4sk/b8pa+9qmNa98YVP2mtfWZH7ype8VG0+Jf/4f4cPicSDgAxERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREREREREREREREREREREREREREREREREREREREREREX1w
ORx26PXad8ViMT334yUiIiIiou9er776Cj70oQ+9az/xEz+Bj3/8t/G3f/s3
aGlpes+f5/G40Nrags2bN+FrX/sqMjI2Q6Gohd/vfSbnY7NZ8A//8P/j7//+
77Bx44bvaHvSOVit5vfE5XJ8R77nZ31diIiIiIiexHvNH4/6vu/7PmzatPFd
fY7DYcOf/uln8L3f+71v2dZHP/pRrFnzylPnkE9/+tMP2/yDP/j9p74+76W9
pqaG93wNP//5v/yOfM/P+roQERERET2JR/PHhz/8YXls4638+q//On7hF35B
zhzf3If+53/+p3f8jLa2FvzX//qz76o//id/8ml4ve4nOhcpCz3a1tP2s99r
e1lZmR/I/PGsrwsRERER0ZN6NH/8+I//+Lfd3+12YsOG9Y/lEGlMo7tb/Zb7
S/cY/eiP/ujDfb/ne74Hn/rU/4sXXvi66K9n4F//9Uv41V/91cf6x3/5l597
z+fR1aXCRz7ykWfWz36S9r7ylS8/3PdHfuRH5Ov57Uj3Q72f3++zvi5ERERE
RE/jveaPB8rLyx7r00o54q32k/rXD/aRckhpacm37CPdc/XSSy8+llGke5ne
7bFI4yW/8iu//C1jC0/az37S9v78zz/7cF+DQf/cv9tnfV2IiIiIiJ7Wk+YP
yY/92I89fO9nPvOZb3ldo+l5bJzk29U9P1qj8Pu//+77yFJd9YP3/fIv//JT
97OftL2Pfexj8n4/9EM/9Ny/1/fjuhARERERPa2nyR8f//jHH773U5/61Le8
Ls1x9eB1qf7j29WWd3a2P9z/+7//+9/V3FAVFeXyeIn0nk9+8pN45ZWXnqqf
/TTtSXODSfv9yq/8ynP/Xp/1dSEiIiIiehaeJn/8p//0U+9Yg/7o39+lua++
XXvS/UKPzo9VWlr8jvubTAb81E+9eQzST7PZ+FT97KdpT5rf68F+f/Znf/pc
v9NnfV2IiIiIiJ6VJ80f0tofj9YUVFdXfss+f/iHf/jw9S996Yvvqt2f+Zmf
ecdM83j7f/CwXqS8vFTe9jT97Kdp79HrIdWhP8/v9FlfFyIiIiKiZ+VJ8kdj
Y8NjtR/S/T1vtZ80l+6DfaSxkHfT9kc+8gMP3/O5z739PFivvrrm4X5/8zf/
38PtT9rPftr2cnKyH+4nPdZourFu3Vr89V//Nf7H//hN/M7vfFxes1GqgZHG
I96/7/PZXhciIiIiomfp0fwh9f2leazeyj/+4z/IeeCb51OSasZtNutbti29
753qQ76ZTqd9rO23yzXt7a0P69p/8Rd/UZ4T+MFrT9LPfhbtffWrX3m4n5S7
3mqdlAek7PZu1218L571dSEiIiIietaeZv3z3/iNX4fd/tbZQ5Kbm/NwX2k9
DGktkHc6Fmn980fb/83f/I1v2UfqU0vrIEqvS31taW3DR19/r/3sZ9XeX/zF
n7/tdXq7Nd//6I/+8KnXe3+/rgsRERER0fvhafKH5Id/+Ifx+uuvvmXb0rjI
T/7kTz7c93/9ry+87XEolZ34gR/4gcfalu5b+ub9vvCFLzx8XVoz5Jtff6/9
7GfVnpSVHj323/u938OWLZvR3d0lZwxpHcC1a1+X73F7dL+vf/1rz+R7fNbX
hYiIiIjo/fBo/pCyRGVl+VuS5nPNz8+T+9Cf/eyf4Qd/8Acf60e/Xc11Vlbm
Y/t94hOfQF1dDSwW08N++Ze//K8P6z4ezBn7VvdsFRYWPHxNqqd4q7GD99LP
fpbtPZhvSvJ3f/e3bzuuIY0B/ff//n/We5fGRqTa9Uf3aW1tkWtI3smj7T/r
60JERERE9H550vmvpPGKn//5n3v4XumeH2n9jrfaV1qb8N3cl/SRj3wEX/jC
Xz18/ld/9fmHbej12oc179I66r29urf8rHfbz37W7anVKnnN9sbG+m977aTM
9WidvVRb8+jrUn75duNOD2o7nvV5EBERERG9n55m/Q+p9kNaJ/DB+6Xs8Hb7
SvXW0rrgb9ef/tmf/VnU1dXKc0Q92PYv//LP8nulv+f/9m//1sPteXm5b/s5
76af/azbexKf+cyfPDIm9DuPvfZu88cH4TyIiIiIiN6Lp8kfkkfXQP/N3/zW
eo1HGQx6ZGVl4J/+6R/ltUGkcRGpVqGmpvrh3/N/93d/92F7Uv2EtE2n0zzc
Jt33Jd2X9XZ+6Zd+6eG+0j1Rj74mjU+8H+09iUfny5LWTX/0tRde+Dp+4Rd+
/h15PK4PxHkQEREREb0XT5s/pDGKR/u1T3Ms0t/zpRqUB+09uJfo0X7205Dq
JN6P9p7Ehg3rH7Yjrbn4JG18EM6DiIiIiOi9eNr88fnP/+XD9/+3//ZLT3Us
zc2ND9uS1q94sP2Dnj+k8YPa2mqZ0dj7rs5VWo/xQTu/93u/+0TXi/mDiIiI
iL7bPE3+kO4B+s//+acfvl+6n+rR16V7raQ2Jb//+9++5uDR2g+pBuLR17xe
97uyfv26h21In/noa4/OC/Us2/vkJ//o4T7vNMfwo37t137t4Xv+/u//7om/
v2d9XYiIiIiI3k9Pmj+kfuvnP//5x/6OXlpa8tg+0lxQD1778Ic/DKfT/rbt
SeMG0hqF0r7SvFhdXconOp+NGzc8/MxnUWf9btp75ZWXH+4j1XL4fJ53bLO4
uOix66ZQ1L7v3/Ozvi5ERERERE/iveYPjaYHJSVFj/39XiLVoX/zvlLekObl
fbDPl770xbdsU1oT47d+6//M4/Q//+dfPPH5PI/8Ic07/Oi1+OM//hRcLsdb
7ivdY/bTP/3Tj+37nfiemT+IiIiI6IPg0fwhrf0n/f3+7Ujrc7xV/YCUHaS5
rd6qfWkup0f3le6xamtrke/5sdks8ljAf/kv//djGUiqa3jS83ke+UPyxS/+
y2PnKdXCfOMbL6C6ulJeG6SgIF+e9+vRPCY97ulRf0e+Z+YPIiIiIvogeDR/
vFdSXpH63e9UPyDdi/Sxj33sW94rzRf76FrnEmnuq9bW5qc6n+eVP6Rr8OlP
//G7vnYf/ehHUV9f9x37npk/iIiIiOiD4L3kjx/6oR+U77v63Oc+J69n19zc
9K4+Q6pT/8pXvvzYWoXf7BOf+ATa21uf+nyeV/6QSBkkKysTP/dzP/e25yll
rs9+9s/ktRu/k98z8wcRERER/Uej02mRk5MlZxGpD/5Xf/V5vPjiN1Bfr3ju
x/YsSTlEmot33bq18txW0ly70vrvjY0NcDhsz/34iIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIvh2/3yvz+Twy
aZvP54Xb7YTX60ZAvObxuOB02uXnkgf7ERERERERvVtSxrBYzLDabDAYTbDZ
7IjFoggG/bBbTfB57YiEXAgFpQzikLdLecRg0MHhsMLvcyMej4j3hBCNBkUu
ccPlknKKB5FIRLTvkrPLW322lHme9/kTEREREdH7x+vzwOlyydkg3tcn54mg
yAFDQ0kcPnoA5984hR3bZ7B7dRY3r5/A0UOLGIhbxM/tOHV8P+ZmRnBw/wp2
bJvG2MgAZqdHsDA3hn17tmH7thnMzAxjaWkaq6s75DYjoTDMJrPINVY4HXbY
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
gxhQq9larD6fH7K2NtTX10FMsXlPRxe62zoga5WSgwjR0SZHh1yB3bur8bd/
9zP87Jdv4I2dv8KbxK+qdmEXt+ZuQwN21NejrlWCKvKWf/Mf/gr3PfEM/pdv
3oXbH3gc2x57Dtuf/wFe/fGf4sXXf8qc47Ztz+Ebdz1F7sCtufs6cxGOBx7n
nOSHePzZ38NDT/8+7njgh/jWPa/R9nXc+cAPyDNeJ//4EV3zd8k9foJ7OBd5
hCAXufuh79Hz5CjbXqB9uu6TXH3X91ht1l33fwc/+IM/xtv0ORvbxagWNd3y
Dwn5h6QFu2Vi1HdI0aJog5BcpElQA6NRSQ4YQCqmRSw4gPGSF8mwHm5rD2I+
HcaLfowVA/A51OR6KsyNJ/5P9t46OK4rX9R99arePWcmbEaZmdmJg5NJMjPJ
5EwGTuKAY7ZsMTOjJVnMzNAtZmZmWbZsyzLEGLJDduyYvrfWcjJ17/vj/fPm
1lTl7Zn6au29e3dLcndXrS8/orOxRPW/yk2NFMdltNeXCJ9IRJcmc7PEv62r
MUHeVgT72BLm70SZLpFT4jMwcbxLuEu5eF4MpfnpTIwNcGnihHh/C6kuy1ef
g8a6ClJT4nB1scHK8oh4D32FH2UzIT9Pl8YYl3XnF09w9fwoVy+c4u6tG/Dg
NkJEuHf3NvW1tcpB/t3fDQ0NDQ0NDQ0NjX89mbmZVDVWU1CaR44+hYzsWLx8
ZR6TGVFRAdRUF9DeWslgf4twjwYGeusZHmymsb6Imio9FaW55GYlk5edSqX8
b991pVSV5ZGXlUBU+FHCgnzJSUulraFB0ERFUQmpCYnKO9wcnAjy9Vc16NJB
ZB16bFiE8o+I8HDcXF1xE86RkZFObW0dJcXFHD16FHPhEvaWtnjYOuPt4oGH
kzu2VrYcPmzEnr37OXjYmCNm5hwyPsJB48McNDXG0MJcYIGpvb3Yzzvx5w/e
x2DlGn4z3YD/nDqH34p19tINbH3lXV56478FH7DtFdkP63cq1jF/+YvKPybN
WiNYKxxkG0tWv8qyta9jsOw1npv1PE9N2yT8YzuT57wg7tn+8/HzTJ4r123C
P7YzY8HzTDXYwjMz1/HsrHXCXXawYtNbrNnyJ1ZvepMFK7ayesuLvL9nL6YO
dsKVHLB2dcbK2RlzcWzmJn5/V3usne2wc7bF1t5U/Ft5ivchkZRET+LCHYUr
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
80w5XTXhJAQeIcLzEKFexgR5mlKYHUZlSQLJsZ54uxribLsbP09jEoSfZCb7
ExZkS2SwPWkJPuo8NdaX1DhfUmJ8iI9wJzsliOQYb9rq8xjuqSTkqA0hQfbi
fU6mv7uKuuo8dLoExs/2c+p0Hw2NJWpG5RXhHceHWlTteVdHFd2dVcpFvvp8
nNs/XOX+/TvcvfsjP/10R3wW74vPXgO52uxzDQ0NDQ0NDY1fDZlZmZSVl3H/
px+4Kf/b9PVxvrpxnuMnOujtrRd7xBpVg97cWMroSIfykVMnexjsb6amSqfq
yxNiQ1Svq/y8VJV7lRQfpnKvCnSpgnRV9yFrQOprSmlvqVV5WHXVwmlK9MpL
pF/IWnOZayVjIOnJCVSXl9DR0qh670on6eloE3vVFrram2lvbRAOVEhJoU7F
SVzFHtzMyBCjQwf5+9/+JniPXbs+Zt++vew7sJf9B/ezT7DrwG72mRlywMKU
7W/8QTjFEp6ZuZhnZsl+V0tVrtWT0xfxxJRFKv7x1DThINOXqHqQKXPlDJDV
ap0y57FzSPeQ/bB+8Q/ZB0vlX8leWIu2MXPp80wSLvL0HFlXLtxk+YvMXfca
c9a9ypTl2/mtrCtZvBmDda+wZOubrHrxHRZveUMdL9z0OjOWbeTJ2fPY+sYb
Ku/qiKOdchAjB1vMHB0xd3TCzskeexcPLBzc1AxCR7dD4j0J5rtL1Ty82sT3
Z6uo0Xmp+EeA424CnA+QGOaCPjOY8sJY0hN9cbHbg5fLIXzdjxDka668I/xn
/wgNsCYhyl05R35WuPKO6BBn8tJDKNXH0t8hPhf9NUQFOxEZ6kx3a6nwxwp6
u6qpr8sX71kNw8JjBwZb6OmuY/xUNyODzYImzgk3GTvRxddfX+D+g2+Eb3zD
vQd3uSP84+7dO/x09ydKiospLMz/t39PNDQ0NDQ0NDQ0/r8j93UpqSnUNTbw
iLtcvXKa06f6ODnWKfyji/6BZirKclTMo7pSp5C15xfPH+f8xLCKf3S111JW
nENTfZmKe0gK9enKQ+KijykPkbEO2f9Kxj7SkmPF9VCS4qLQZWXQUF1FvUDG
PqSDZKUlExsZpjwkMTZK1YQE+fsQfiyQ2IhQ8fx4MtOSCDsWQEJ0pKoV8XRx
xNPVEQtTU95//++KXbs+Yv/+vRw4uE85yN4De9h1aDf7rY6wx+QIL771JwyW
bVD15dI9npm5VOVaybnn0jt+QdaFyPjHtHlrFZPnPK5Rl/lXj3tibVAzCOcs
fjwT5JdZIJNlryxx/bcypiI8Zap4/LmFm3li7hqeFeusNS8xZckWZq3a8Tjv
SiCdQ9ahSyYv3sITc5YyZfEK/vzJpxi7OGHkZIuJ8A0zB3vhG86YOzhhK85t
HF2wsHfE1tmaqFgXxscK+PF6Hfc+q2W8PZn0CBPSwszJinYiPdKFkqwwGivT
aKpOp1gXqWgUx2UFMeRlHEOfFUJTTQYl+ijys0Pp6yimu6WA3rZilXeVFu+n
fKQ4L5qu5gLOn2pXHtJUnU19RRZDPdWMCecYHmykrkZPZUUuI8PtwjcG+Orq
SUaHWjh7pofvvrkk1kEuXT7Nj3dv8PDRDzx4dJ8HDx4oLly4qM0919DQ0NDQ
0ND4lZGelUlrXxff3LnJtZsXmbg0RklFHsWleZQUyf64OQz0NdHTVUdrc7nq
v/vZhVH6exupEvfV1xRRVpTDyGAHJ4/3qFoQWYcu4yIlhVlq7WqvU/M+3Jxt
8PN2FT7hjY+HC5GhwcI3UtHnZJGWFK9cQtZ8yP5XshdvQkykOpZe4u3ugquj
HY62VurYxcEWOysLbCxMsTY3VvXrNuL84w8/4MOd7/Ppp5+wd+9u9u3fw+69
n7Jrzyd8sm8Xh6yNOGhpwst/eodZS9Yq93hu9jLhH0sU0jd+4Rf/mDxnFdPn
r1NIF5k0axVT5Uzzn3tfSfeYu2S7Qp5L/3hOPP608I5nxPEUOW9QuMnT8zYI
99iEwfrfsWz7n5RvLNr8e1a/9Ge1zvnZSWRO1rMLNvI/pi9kybYX2Wttg5mr
Mybi7zdzFO7h6IClgwvWwjvsxN9tJXzExMoSJxdr8nKO8dnZEr4+X8J346WM
d6RQme1BYbILRak+FKcHUiz8o0wXRUSQLYnR7nQ05QnHKKKuIoXC3HBqypLo
bNapvCuJrBNpqc2hojBBOUdO6jEV7yjLj1NxELl+Nt4l6Fb+UV+RLfxFz0h/
IxNn+pSz9nTVc3K0ncsTwm+Hm7n5xQSXLp7g9OkBvv76CnfufiPc445wkAc8
egQ3bnxDSUkpuVrvXQ0NDQ0NDQ2NXxW6fD0T1y5x8cuLVDaVUtdaSX1LJbqC
NAIC3IiO9CNfl0xWRgzt4rHLn51UOVgyJlJcmKZqzDNTY1XNuYyBRIb5k5uV
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
zZLMuEDhFBGEBziQFutHmXAK6R4SfXoY6cJV5HFjRQYdDXoaq7MYFq4x3FNF
eUECjVVZXL/Yz0h3Jd2tRXxxZZivr40y0FNBW2M+1y6O8P3X57h8bohLE4NM
jPVw6cIg339zgQf3v+YRcubHHe49useP935S/vHNrR/IzM4Un0ut95WGhoaG
hoaGxq8NucfLyMjg4sWLKu/l0qXzxMWEEi/o62qitrIAXU6yimEUF2Qqjzh1
oo/mhnLyspMoL3kc35C5VzIOIp3lF++Iiz5G0FF3khPCqKksFF6SQWR4EHGR
4VQUF5KXlUHYsSCiwyOIi4oSfpFGVVmxin/IOEh8dITKwZLXGmurVI1HW3Md
ZUV6woMDcHG0wdfbVbhRAiW6LOEw6aQLN3H2dsfQ9AiGJkbCNR73qzWxEe5h
ZcMRCytVg25iaYq9izMO7l785YNdzF60mmdmLGDagpWCtUz6OcYxZcEGVm3/
A5uENxis2qGc5KlZK1W9hnQPWe8hYyDLNv7+n+cbXnyX197+hHUvvMXitTtY
uv4lNr30R4XspSVrTGYtWsfcpcJhFq4W6zpeevMvGFq6YO9xDHN7b4xsPDCx
88bM0VO4hzuWwj+sHZ2Fe9jgYGeOtdle3OwPqZjF3R/OMT5Wx9hAIbeutvLg
i1bOdiRRkeJET0k4IzUp9JTGM1CdxonGPMY7y6nNTyQl0ofqonRqSjLJTDhG
uvCPpEhPcpKPUVuSqijJjXkc+6jOoa02l4bKTLpbCjl7Qs7waOfKuT5++PoM
JwfrqS1Ppa4inbqqdAaFo1z/bFg4Rz9DPXUM99aLtZ7xk918dmGYibN9fPPt
JR4+usXd+z/w4/0fufdz7tXg6Agpwk+1uYMaGhoaGhoaGr8+ZH1vfHwc1dXV
fPf9t3zzzQ2GBrrEXr+CjpYaSoVHyNnlsoeVnGk+1N+m6tJlrysZ4zh9sp++
7iY1f1DWoEsPkav0k6z0OGKjAoV3JIvXKBUeI+cYhqgYh+y3W6TPQ5edRXpy
siCF8uICmuqqlW/I+Ie8T8ZJ5FwQeRwTFU50RCiJsdHkZqYJf0lBl5VGRZGO
wuxUKgtzqK0p51hYIIdNDIV/HMHUyhITayuOWAnvUMi6EBNMrEwxt7XG2tlB
7Pcd+f3b7zFp9kJ+O2k2k+euZPaK55mxbJuKdcxeLvxi8++ZI679ZtpS5SXT
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
ay/nxrUxrl8cYfx4C2dG2/j8+gT3H9wS3nFLzf24d+8OTc0NZGSk/9u/Cxoa
GhoaGhoaGv/7KSws4OsbN5V/3Pj6CxobKikryVP1562N5fQK/5A+Ibl4blT1
uZI+IT1E5mNJB/nFQ+S8dBkr6WqvVaus/UhJDFNxkLjoUDyFK0SGHxNeU0JP
RwtVZaUU6fXCQ3JUXUdMRCjBAf442lrhZGeDu7MjlqZGGO7fjclhQzxcPUhO
TEKfnU12ciKpsREkhQWSFRVCWWY8TVWFasa6nK/u7GzLYdmT19wUYysLjKws
VR3IERvhH+K1Te2slYOY2ltjJI/tHJQPWLp6svuILb9/90OWrt+hZqI/O2sp
0+evU/PQ5yzezMyFW5i6YIuKhTwzeyW/nb6QJ2fM59m5i3h23kKeMZgvnMOA
WYsXsmbbFt7+x98wtDTHyccbZz9vrFydhVfYY+nsgIWTE2YOLuL3EP7h4KFq
zs0c3MTqquadWznYYmVhiI3RTrIiHLjYp+e7c/VcG6vk3PFyvr7UBrdG4c4w
x7uSKM1yZKA5hrGuHFqL4xhpKuDamTZqCqKJDrAhzMcCN8tPcbXYhb/TESL9
7DjmYUGgmxlV+gQV15CxDOkVMtYhYxvSQ+T1UeEhA8IzBpqL1flnwjOununh
0lgnZ4eaGBbPOd5fz9kT7ZwdbefyxABfXx3j2oVhvrx8kls3P+POra+499MP
PLh/W3zi7nP3p7vU1deTm5v9b/8uaGhoaGhoaGho/O9F5tkXFhVx8+a3PHz4
kDs//kB3VzNFBVk01ZdSXa4X5Ktcq+6OBsZGe1WcIzUpWjmHzMfKz0tTuVmy
PqS4IFu4Rz3d7Q2UFuaRFBdOVHggoUH+qoYjONBPzTKXrhEXFYmflycOwgec
7R3wcnPDTezFne3tFT4engT5++PpKq47OxEZFk5VaQUdTa3UlJRSUaCjriyf
+rI8GstzyUkW7uLrSLi/B7HB/hz1csZMxj8MD6n55xZW1phZ2WBsbYGp9A7h
OEY2sibdUjnJYRtbjB3ssPFwx8HrKNYuPuwztuEP7+1k4443WbXpZRat2sas
heuYPGclT81cJrxjEf8x1YD/a8oscT6XOctXsnzLVta/9CIv//Et/vbxhxyy
MBOv54mrny8Onu6Yi59hbGuDhaMDVsKvLJwcxDUnLISDWNi7PkbO+nB0xNre
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
Cx0cbQ2xt9XP6lI7C7MBRsWavi1gpa/bKdbrFcyP+2irNeI2JOI1Jsrcrxbh
DL7iDGY63cx2exgOFEsPmegto7vVTJUnlVLx3pH3fyM+7yNm+ryUFyUQdO0X
3P3kZ8Q+/hPxTz6hIP0pNn0cZk0U+sxwRntqaaiyYClIorHaSkfAI9yjkuGe
eg42J9hdGxHOUUddhU44hZeV+YDwjyJBIcuzNWw9b+Zwu5vNlTaWphuEewQ4
3VNiNgPieX5WFgbZ31ng+HBVeMcO5+fCOc6POD3dl/lWin8MDvQQ/PSR9A4l
7+qdt9/gjde/J/3j088+lTNnXvQ9r6KioqKioqKi8mLJy8ujq7OXi4sLsb7c
4fniAuPDPbS1VAr/aGJ4oIX21mo62+toCVTS290gt4Empf6jkZHBdiZGe6SH
FBpyKHWYCDRWUl/josJjlw6i1IKYjRqspgLhHGbhHxWy3jxdOIXFmI9Bp8GU
r0WvyZbzQZS5508e3iMi9IngqYyDFBUa0YnHI8Oe8uTRXdlny5Cfg7PYQF5a
NFnxYRTmpeI0ZFGYFY8mMQxtchjO/FRsuUliP5JSUzYddWX4PSZGWj301lop
00XgzA2jLDeEtrJUWktTKMl+SGNxHPNdNqoLn+HMuUOVKQSvIYYm4Q+dVSYW
h3ysTbfS31ZKfWU+3tIsrMZYXK4M4Ww2Rnq9LE346Kgx4XdpGWmw01WmY1g4
wvZwA+vCBfrrCsVr5TPa5qSlVkdTbR6Ndbk0eLOEZ/yexOA/Ydc9w1eWRV7i
HR589ktiHv2ZEn2snPlh1cZQYc/CX20mIJxDyb+yF6bhtmtk3tXMWDtj/Y1M
DDbyfK6byeF66iq1tAeKmBqtFpTzfL6a8UEnC1OVbK+1srPWKfPL5ifqOdoZ
YnN1hPGRNjaeT3B6tMbZyRYnp7vCPQ4FinccyZyrzY3nJMRH88H7b0v3+PCD
d3jrze/z6ivf5tVXv82jRw9lvO1F3+8qKioqKioqKiovFqvVTHV1jVhHnjE/
Pc3s1CSnhzsszA3iqyuhvraEco+VEkcBem2K3K+pctBY7+X50iTLC+OMDXdR
XeEUjqHMQNdT7rZRVe6Q8ZAyZ6HM0XKVKHND8qVn2MxG6Rrx0ZEy90qJfRj1
edJPCgt00jkUstNT5GNmQz5ZaSlEPntKeGgQ8THCPfTZMgcsPTWaqND7mDSp
VJVaBWZ0qVHCR0KwaJKEf6QJH4kjNzGCcls+TRVWivWJmLMi0ScFUWVNo7vW
Qk+1gZEmMy3CHxy5QXiNYYwGCvGXJdNcliTcIxRLehDlxhS6ayzM9tTQ22Cj
zq2luc5Mh1+4Srlwua5SlhZamRurZ6DZSV9DEYONxfjt2dQWJDHlc7DUXk6X
W0eHV0dDSTqBcg3alNsU6UMY6ChisreMUkM0kQ9/S/SjPzAQsDPW4SI94gbR
D/9CSUEc3eK9/ZUmevyl9LW4seUnkpMagr/OxuxYK2MDjUwNNQsP8uGvtdHe
VCL8plBgoL+zlJH+cuYmq1lbrGdqpEzgZbS/jK2VNjaXOpgarmF/o5/9rRkW
5oWHrCn9rjY4P9/jVJnxcX7E2cWJ4FTmXXV3tfHJx3+U3vHDH7z/N//49svf
4PXXXiEqKpKiIusLv99VVFRUVFRUVFT+HnCwub7F8+UVtrc24fyYqYk+4RwG
im166mvK8Dd5cRTr8Td66Wirxd9QQU9HEz2dTYwMdtBQ58FhK5BxkLrqMuqq
yqSDKPlYSixEn5dBXk6azJ9SnKKo0EB6cgK63Cy5r3hISkKszLdKjo+RfqLk
atmFHyn1IMGPHxAR8oR8bbZwHIPswZWTmciToNvERgqPcNnw2gsx5iSTlxZL
csQj0qODyIkPFr6RKrzDgc9jo9ScjduSI3wkmLjga5QZUuhqsLM0VM9Qk52m
0hzhJEnYcoOxZD3BWxhDV40OpzYEffx93IYk+nx2uuqK0acHU5Qfx+RQHWsL
XcyMNTEz2cjKYjsby530t5YSEI7RUqmnrjiNClMiPksqDYLucj39dSYqzPHC
hYLQJ9+lxpHMYIuV2X4PHbVGMmOvkxF5jeGWUjZnWmmtMGJMD6Ew8xk9wmlm
h3z0t7ioLtNRrsw9L9EKt6gUDjHM0nQ3Q121DPfUyTkfk4MNNNWYaKjOF27i
ZXaijnnhH3OT5exvdrC+1EJ/u114Uy2L4jtMDlSz87yX85NVjo9WOT1e5+Ji
T5jGEecXx5/7h/hP+Xewv01WZgo//tFHvPvOm3zw/juy/kPxj5df+jqvv/6K
7L2r5Pu9+HtdRUVFRUVFRUXlRaPX62lpaePk+ISL8wsOD3aFfwzS3lJPV3uj
zK8aHmxjqL+F6Yle+noaaWuulnEOr6uI8ZFuhgfaaQ3USB9pC9TSUO+hstwm
fKWcCq9Yq+el4SwupKbSTXWFS+Zh/TXukZmaRFJcNCFBD4kOD5UxEsVJcjNT
5Wx0ZV56Uny0PKfMElFqSnIyxXMSIomPCUGTkYBZn0V2cjS6rCScJg3a1Ggy
48RzH17DkBlLhcOEs1BDqUW8tl64UFq4IAKHKYPyEh0N7gIsGeHCN9LoqS/G
Y0omKeQSOTG3qbSmiPMJuAuSaHLnM9rupU+s+42aSCwFcTQLF6gUnlFkTqLV
b2dssEas75vYWetleSrASEcpAy3FtNcbhO9E49JGMVhnYaDeTLkpjoKku1iF
gwTc2bR5hR+ZoqkrzcSqCSUv4S7VxelMdlfwfCxAa2UhJQWJVNkz6WsuZVh8
Fo8tmxJTOgMdVXQG3DT7nIwP+pkebmF9YZDdjXHhGW30trsFpQz2uJgeqxHX
eJibqORgu4fNlXYWZ5qYn2qS/YNXZtrY3xoTLroFF7ucn+8K0zjmnFNOTpQ5
55+7x/PVVQrE3/Df//UXvPv293n7re/xztuv8N473+fNN17lO9/+Ju+++zYp
Kckv/D5XUVFRUVFRUVH5+6CoyILTWSq845ijwxO2NjdZX11ka32JteUZOdu8
yedldLCd6cleursUL6kXvlEt86uam6ro72mWnqLERaxmLXZbAcVFebjLCvG6
rTjtBuEqVjlDpKezWVxXTX11uYxzKHlWymx0xTs0WenSSZTYiFL/kRgbTXJ8
rHCRNEodRdiLTGSkJhATGUJuVjIldiNWUx6pwkXSE6PwOApx2wy4rTpqXRa8
xflUOgxo02PJToyQDlJm1QpPiUGTGoHXrsfjzCc9RrzXk1sUa5LorHZS7yjA
nBFJQUqIIJTGsgI66+wEKs0MtZUTqLGgzQ5DL1yiqaEYtzsPW3EaXW1ltAec
NFQZaG2yMNTtYnzAK461OG2xNFZqGBKOMup30Cv8w6F5hib6OpqYa7j14XQI
/yjND8fv0QjXyUWf/FA4yD06qs3szncy11+HXzhQetQtUiJuUOfW4a+1UOPN
F+9bSlO9UlNewfpyP8uz3cxPtLG7PsrpwTw7q4NMDNbS3+kS5xuFM7rp63Oy
vNLCxkY3m5v9bG0Ni7//OPt7c5ydrXN2ui9rPM7PTqVznJ5+jvJPmR0TGR7J
v//y53z4zut88M6rvPfWy7z95rd4563v8Npr3+all77GBx98QEZGxgu/z1VU
VFRUVFRUVP5+KLLZWF5e4fD4VKw99zk9OoCzI9ZW5mmoryDQKByj18/YaDt9
PQ1iP8DC7LCs+1ByrpR+V0r8o7rCgbPYiM2ikzUj7jIjHuEg5V4rleV2ersC
cna60t+33O1Am5tFYYFezgbxlDqkjyhxESUfKyEmkrzsTFl/niIcJCM1kaT4
KJLilN688ViMWuE/ZvH8XHSaDNx2M52BWsqFExXps/AIB2qr91Ir/CcrIZzE
8CCykyKx5meSkxJJfMRDclOjKNAmkRD2AF1iJCW6TBx56RRlJwsSKcyIJvHp
TUp1aXgtWTgLkvBXWTDkRJKZGESJLUu4Vw2VFQZKS/NYnO1gqEd4WXEmVS4t
Pc2lTPRV0+Gz4vPk0eWz0FCSgdcUS7M7R2xjcOQGk59wC1PqXeaU2ERXmfCd
bFrK9dhyw8iMuE6reP2DxR5OV4YYbyknK/oOj2/+WjjXfTo7S9ncGmRktI6+
3nKWFzvYWO1jZqyByeE6tlcHON2fEf4xJOeYz0+1MDVYz0C/l95hFyMTVYxO
1jGnPG97jIOjJc4vdrgQnJ6Ie+HkRLjIifCOE05OTj+vN9/cICYmlp/++J/5
2Ufv85MP3+K9N7/L22+8xNtvvcSbYvvyy1/jK1/5Ir/85S9kn4MXfY+rqKio
qKioqKj8/WAyGXGWlDI1PSvXlxenZxzv77G8MMvctFJj3k1Pt9LvqpXebh/D
g+3MTA7KHldKLXpnWwPNTdUyDqK4SIWnmBJ7vnAQvfCOIlmz7nVZhKsUSzcx
KH5QZsPlLJa+YTUZZIxDm5OFt6xE1qGHBD0i9MljUhPjZV+smMhnJCdGo9dm
Yi7UytfISI8hLVnpw5tFuctGlVu8r1WHPitOOIbSEyuJfLGfERdMSnQQ8eEP
MGgScVpyyE4JJy9DuExSsNh/hseiwa5NIzX8IZr4UHLjQ0gXjlIgrnMXZJAd
9RC9uLaiSDw37jGF2dH43EZa60ooyI4iK/EJfe1VdLV4sJlSaag0M9Zdw9ZM
NxPtlXjyU6i2pGFMvUdy8J8oL4ymo0o4Sl0B1UUJlBWEM9vrZn28nkprIgGP
Br87F3NmMM0ePTPdVSwPib9BwIUhPVS83yOsxgT8TTbmFzpYWx8Q7jjO4nw7
kyOKe/jYXOmTsw/nlbmHs22c7E1yKBxjUTjI8GA1I+M19PR7BOXCPzrZ3ZsR
rrEp7oA96R8XSp+r02NOjpQZgyd8/u9c+KSbX//q3/ng3Xf56Q/e54fvvcZb
3/+G8I9v8s5bL/PqK1/n61/9El/58hf5+ONP1N67KioqKioqKioq/x+UHCyt
Tkt+gYHx8QnOT8442NljdLCf2clRpicG6OlqZGhAWbc2MzzQylB/Ky2Bagb7
munpaKSqwiHjIUo+lpKvVeY04i4z0+KvxlfnwWzMwV1qlcelTjOe0mLqqtw4
bWY5I+TzunQjxRazcJEMwkNCePb0qawJUWaAKLXn5R6HwCbWs1mkpIWRlBJC
dmY8+XnpWApzhb8kkpMWiSYzXKzNkygpSiczKYjE6HuYtPEUaGIw5MVSZsuh
yJAqPCQTmzENj1NLhVOHLjWchGe3yUt6Rk7cUzIiH9JQYqRREH3vEhnhdykt
SMGZn4zPZaSzoYR6j5GMhCC06eH0tFYw2FtHU52NQK2N4Y5K5gYaaHTlk/bs
JsU5YXRW66gtTqK3XvzWbXYGGgsJuLNwFUSI90pjYaCcXl+hwMx0twePKR5t
wj0qzKnM9lSzNdVOq3Abh/h+bkc2tVVGRobrWFsbYGW5RzhgJVPCP5S4x+H2
qKznGOmrZG2pk72NYVYXulma7mBmopmJaT9DYw0MDNWxsNjDweGS9I/z821Z
b670Irg4OxX7n+dcnZ4civcr5y9//B0fvv8WP/vJR/zsh+/ywVuvCP/4Jm+9
/g3eeuNbfO87X+OrX/lHvv71r/L4cZC8v170Pa6ioqKioqKiovL3RXFxkfAP
PQUGAxNjYxzv7TPa38vc5AjPFyeFZ7QwOtzK6soYUxPdwkVaxXG7oEM6SFOD
F4/LQkOdS+ZntbeIdbivSs5R72prokK4Q6Cxhq52v+xfpfTPLSuxCEcpFmta
N94yBwXaXOkedquFMoeT9ORkQp88IiEmAleJjfbWBqqrHGRkRhOf+ASdPlE6
R2ZqLFFhD8lOjxavY8RpzRLukUmpLZO0+IfER9wR3hEn0WdHYRbPU/zDpE2g
ojQff62dMksO+rQIUiMfkBJ+D01iKNacePxuM5aMGIKu/I68xGAKxfNzE59S
Zdcy3uOjrd6JPjOCyjI9/Z3VNNYWUeM10FxvZ0Qcz/X78Av/SAm5hjkjRDiE
m9XRGtbGasW+iyG/hbYKDXZNMKX6MOEcpayN++ioLmDQb6OtUk980F/QJTxg
ob9O5mDNDzTitmXhLs5hdMjH9vYYG8ItJsYDTI4F2FwdYnd9mIWpZjl3cH6y
ie21bmYnxN+ixcVwVz3zU53MCxeZmetiaqaL1dVRjo9XOT3d5Ox8VzjHARfK
XPPzExnzUGJhOk0mv/pfP+fdt77Hhx+8xo8+eoMfvfcKH7z9Hd78/jd4/dWv
8Ybg5W99iS998Qu8/dbbJCUlvfB7W0VFRUVFRUVF5e8XxUHcZaUc7e2yv73J
zsYyBztrct7HyFAb46MdjI90MCAco7ujgZ7ORjkXfXZqUPa/UvKxZsT+7PQw
9TUeKr1OWcPuq/VS7rZTVa70sMonX5spnMIqrq+ixV8va9CVHCxl3kegwUdt
ZZWc+6H0x7IY9TiKCjGbtOTr0tDrkrGYsyjQJ5MUH0JcVAhR4Y8oMueK9XUV
TTXFFOoTSBfukRJzj4LcGAyaODKTgslNC5P7intkCI9Qti6bBocxHXNuAjkJ
wSSH3UMr/MNlzKTSqiHm/mWi7n+G15otvOQpT2/9EX16OBUOHYbcWOLCb1FR
oqWtqUx8j2yKC1Px2HPxFGVRZcvFV6ojXVwT//gvwkWymOz4PO6hoDjIZIeT
GlsiFeZYRlqKhH/UCfewMtrqYHXMh0MbSVrYFXzObGa6K9iZ72FmsImp4Sbm
ZtqZnGhmXTjH8+V+1lcG2Bb7c+Lc9IiPlfkWNp93srXaKT2kw19CR6OX5ZlB
4SxTrK1NsrU1x8HB87/NNr84PxJb4R/np5wdH9Lmb+Dpo3v8z5/9kB+895rw
je/xwbsKL/PBWy/x3hvfEu7xVV797pd45Ttf5KVv/hNf/tI/8fOf/xKNRvPC
72kVFRUVFRUVFZW/b6xms1jPrsqcm+PDXXa3V1lenKC3q4mWQBV9PX7Z70qp
92jyldPWXMfoUBedbfXYi/JlHtbwYIfwk4DseRVorMZdWkSpw0xtlUs6ibPY
RIXHKd2joa5S9rf6fA6hgUqPm2KLRfhHGvmaHDwldiwmvey5m50eK/azsRVm
ocmIJCrsPskJ4bjtJnyVJfgqbJQ79bImIy3mPtlJT2SelbUghdS4xyRE3iMn
9RnFpnR5TpsZiS4zCrMmgcLcePJSw2XsQ5f0jJL8NLH2Tyb2wVXyk8No9JjE
dbHkKT2xys201jvIywzn6f2PMeTF4BLOIWMsmihspmTK7TnUl+rp8zkxJAfz
7MavZayju1b4VF6IOG9kZbiKpcEKmY+lPDYsvGNhwMv6ZD3z/eXCP+qFk9jx
FsbRVp3P1myroEv6x6rwEMU5xkb9bKyPcLA/w9RYM4Pd1SzPdnKwNSK2fkYH
XAx0lQgnaWBmJMBIT4DNlVmOjzY5Od3m7GyXk+NtTk93OVfmC54eytpz5d/+
7jbpSbH85KN3+eeP3uYnP3yTjz5Q3EN4x9vf5N03vsHbr32d1175Et/99hf4
7sv/xEvf+CJf+8qX+fgvn1BYaHrh97OKioqKioqKisrfNxZzIVOTU3L9eXS4
L9a0Q8I9Wujtbqaz1Sf2/bL+fHigQ8Y1/A2Vf4txVHodMs6hzA/p7Wqmo7WB
xvoKOQe9NVAnnKVV9r8qc1pkD6zOtia62gMyvpGenIgmK4OSYhulduEcRpOc
+2HUacjNSsWYn4PTqhfukUN2agShDy8TdP+yWPNn0OGvodXnxVWkxZATg1UX
j1W4gEUbh7s4V/hAOmZ9ErqsKLKSQ6R72AszyBYuUahNxOc147bmkpsYgla4
hsuURZkhg/ig64Td+hiP8J3egEe+lsOUxni/T9ZRlNqyCH70ifiMcQz11NPZ
4qau0iQdYLynjgprNva8WNJCbxB28zd0VutZG6uR7rE4UM7yUCVzvW66avS0
V+YJ5/CwMlrF6ngN4+0OhoSPzPdXSAcZDNhYGq5jwF+Kv8LCWH89O0rPqoMZ
2Td3abmPyfEWRsT553Pd7KwNsjjTyNigi552C3OTPnZXR9lbneNoZ53j4105
U1CJd5ydfO4d52dHkovzEy7OTuhs9nPtkz/yw/ff4J9/8BY/eP9z93j/7a/z
7ltf4d3Xv8o7wj9ef+XLf/OPr3/1H/jmN75GaEjIC7+XVVRUVFRUVFRU/v6x
Flno6uyW/rG3tyPWtKMszE7LXlg9HX76OgOMj/QwPdEvHKRTeobCUH+HPFbi
IUrdx9T4AH3dLTIGomy7xXMVF1HiIEruleIf9TXl4rF2OQ/EXKDDaiqQ8Y+m
ep+4tp66mgpsFqOsPzcJ/7AacrDo0mQ/q6d3PiHy6R006QmU2QporHDiFG6S
nxmFQXhGfkYYhmwlvhGJXjiJkmuloNR+lNlyKS3KwZgXj9ehJVBjx2nMIDn8
LvHBt/CYcwh4LCSH3OLJ1d+TlxAiPCWezMQnFAqfaKy24i3Rkp0eSlL8Q6rK
jcyMt4n1uocqj4G+tgq6Gkuw5ERjSn9GftJTkp5eknMG2epje7qR1dFqlgcr
ZB264h4BVyYzPaWsTVazPlnDZJeTrlodI802Znu9THa6ZE1Ij8/OQHMVU0PN
bK+Ps7U1werzYZ4vD7K6MsTO+hibS0NMDYvfvbOEhel61lda2Fzr4nR/Tkjl
Jke7m8JblNjHPqfKnI+zQy4ujpXmZ0qlOYtL03jK7Dy5c4uf/+B9fvTuG/zg
7Vf44I2X+PDNl8T2W7z3mnCP73+Zt1/9Mm987yu8+p2v8J1vfZkv/eM/8OMf
/giNJveF38sqKioqKioqKip//9hsVjkTZGNzS6xJzzk+OoLzc/a3Npgc7qe/
u5Uh4RnzM+NiTbvI4twEY8N9jAz2MDrUK7bd9Pe0SR9R4h/KzA+lFkTpuVtT
6ZL5WMq56opSsW4vE77SRHd7M63+BgIN9dI/qrxe/L4GKspd1NcrPbVqMOlz
yUyKJD02hNTIx5iy4v5znnk8xpw0XFY9DmO2cI8YWSNuyAjHkBlBVlIwmckh
pMcHSd8oK9ZQWVZAlctAkTGNfOEmxtw4CjKiZP15asQDGlyFTHTW4zFmYs9J
wC22OcnBRARdQiteV6n3cDs1n/tH3APqqi30tFdSqEskMfouviozU4MN4nXy
6aoporu2mKyIm5ToIthbaGFReMfKSDXbs36mukoZa7fTVZdPq/CQSeEgO/MB
QQsz/eUMBYqZH6jmYLlbeImfuQEfm4uDbK8MC+cRf4s+xS8GWVsaYGrEz+HW
FPvrU0z2NzPe52NjqZejvXFOjmY4P1sRf8tNTk6Egxxvcny6zenZDmcXSixE
ybm6YGdvFW1+Or/79S/4lx99xA/feo2PXhfu8erLvP/9b/HBay/x/qvf5N3v
fZU3v/tPvPGdLwj/+DLf/85X+eaX/5Ev/sMXuHTpsryPXvS9rKKioqKioqKi
8l+D/IJ8ytxesUZV+q/C/s4uJ3t77G+sizXvKD2dLcItmqRvrD2fZ3V5lqnx
IXk8PTHC+EgvLf5acV2ArvYmWfeheMdgXwezU8PCTdrl7MJKbwmN9cJHBAFf
Hc2NDdRWVuByKDNDXOTr8zBbjDT766mvcmPISSE54jHm7AQaSwupdhhxFurI
SYkhMyFCzj6vsOsoEV5RUZyDOTeGtLjHsu68xJpNfYWF8lLx3YpyseanoM+K
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
Jbn6nFdagzTUlunnhGSlJ+odot1ep3pFO19EOyekoqyQlKRYfU2QxLgoQoPu
6/MvaesZhgR64e12m6SYUBKjgtQ+vmoRbe1C1SLhfp4Eed3Rx0Ci/b1ICPYh
0seRxEBXQlQfeF47TXyAE7EBDvg5nycl3J3kMA+CPa/jY38eX/sL+Ny+wPUz
x7l5/mN8VLv4u93A2+GSPgaijX3Eqf6IDfJQ/XBbXytd645Lnx8jOsSd+grV
V6ojmmpySIn1IzLIRW+P+oo0df2ueowrWcmB1Japz6QiXV0Op6Ykk6HueqqL
06jMT6ROtUR5TjQlqkMKU0MpU/3SWpNFS3UmrbVZNFSmk50erPrMl9Tk+9RU
ZdDdrj7r0gxqK3MZHWpjfKRDdUgLQ71NDPU3MzzYyqDqj1HVGaNjvYyN9Kpm
7FUd0q/+iBNjHuNjfaTHR/Cnl59l//YNbLOzUVZgZ23GKvMlymJlLivMZqv2
mI2V8WzVH7NYbjQLi0UzWbZAO/djOotUh8yc/hCLF8zh2LF3J/07K4QQQggh
vvlc7rgQGxdHX18/fT09DPT363Ni9ff30t7SSLNqj5qKEhprK2lSGmrKVVtk
UVSQqTqjVD83/ev20MZASgqz9NtLi3L089NTk2J02jkh2vog2mO1ObQyUmOI
jgggNsKfmDDVGwHeZCZGkZcSR35qPLnaz0WFkh4ZTPhdN9KjAkgIctfXHY+7
70RamKfeHykRbmTH+RJ93574oDt6g8So+0M8buodcufqGbxUc2jjH9qYR4i3
g77VWsT9xhf6dW3OrPzMCNUQwQSoFtG2TVVZNFZlU5QZyX31O73vXCQnNZie
1mI6GvPJSw8lLf4e5QVx1JYmExvmTV5GDANdtaot8lWXpKnbU6guTKBLPb5b
0easqtTGPkqSqK9Mo7woXn2WMdTWZ1FSnkRjUyFd7TVUlmVTV5Ovt8aItpag
vm1jbGhifquhUbVV7TEy2qfaY5CR4X7GFG1+3RHVIkWZibz+3GFWmC5m82or
9m62Y7OtFWuXm2JnaTox15X5HNUfs7A0manaYwbLF8/AfNEM1R4GLJ03jSXK
PMNHmTnjYezsbLG3vzXp31UhhBBCCPHtoI2FeHl74ezsQnJSsj4eMjw8TFN9
PeUlRVSXl6gGKdXPBdFaRD8eq7xIn6dXm5s3OyOZzLREfcyjvCRftUW8vm56
ZVm+vjZhaJCvPkdvTGSQ+pnir9Y3VD0RE0xRbgrJsSHEhPjp/80+SzVIWY7a
N89JJy85TvVHEBGqPxJDfMmODSTQ9QqRPrcpTPAn+t4t4kOdKMsKJSbAgdgA
R8J9b6gOcSHE6zouV07q53xE+N3RmyMlwo9M9RzxwV74On2J2/VzJIb6EO7v
QmFmFNXFKWQlqdekLuemhJKfHkFJjuoqdZt2rJW2Nog2/vF1fxTnRNHfUUZd
eSqp8QFUFqfR3lhIRlIgcREe1Kvb68tSaKxMZaSngqbKdNUgMZSpZqmpSFWf
YYq+tmB3fyU1zdlU1mXR0lBJT2cDHa3VqkXqGR5oU/3RoXfI2HCX6o5OhsY7
GRzpU3+jAUZHh1WDjDA62E+z+tnwEG+O/eEFfV6rjSss2LnOlp3rV7NplSXr
rJax3tqcNcu1MZDZ2JgasNx4OhZG01V7TGfZQgNM50/HZO5UjAwfY87Mh1i0
YCZvv/3mpH9HhRBCCCHEt4+LixMeHp5qv3aMru5umpqa6Ohoo7uzTTVIKfEx
EeRlpdLd3kxrUy1tzXU01lXqzZGTmaLPkVWYm0VkWKBqEG2dwlzyspNJig/T
lRZlUlGSQ1x0kGoSH8KU7PQ4stNiSY0JIVY1SLCvG/fdnchJjKG9poy0qBD9
/I9gTwfiA91JCnajICGA+PtOBLlfUk1xh5wEHzJivEgKdVOPu6JaxY0Yf2ci
fG+rfrmvmiOI9JgA/XgrrT0i/Fxwu3FOdYoXzeXZ5KeFU5wVTV5qGAXqcn1Z
GjkpISRH+1GWn0B7bT6dqjmKsiL0MZDU2LukJ9ynq7mQoa4K/bis5Ph76r1G
0t5cQF5mCJnJ/rTUZVKaF6Wey4+ellx9HKSyIJGSvFhqytPobC9hcFR9xr0V
NLQWUFKdQU1NMb09Tao52hlRvaEZHe3W57MaG+thZLybgbFu+od7GFL9MabN
GzA+prqnDsfrl9i7dS12lsZsXmnG7vUr2GlnzdbVFmywWar6Y4m6T7OI1Waz
WWE8Desl07FcYoD54umYLZyB8TwDlhhOY77hVAymP8aWLZv178VkfzeFEEII
IcS3k6ubGyNjkJ9fRFFxqT4O0tHWRqXqj+LCfEryc+lsbdJbo66qnKbaGjJS
EokMDSI/O1P1SQZJcRGkpUSSnRFPblYiZcXZlBSmq/7Q5vWNJiLUj/CQu/r8
V0lxIeSrx5TkppKrmiXS3wsfl5vEBvpRlaf237NSiPbzIMTTUfWHJ9kx98iO
vktqsLu67E1+ii/J4S5E+98i1PsqOfF+pIR7EhfgQllmBBXZcRSnR1OWHa+f
fx4T4E7kvTv4u92kNDOW8qx41TC+qk3c1P2OZMUFkpMUrB7jQmqUH9WFSXTU
5dNal0NVcaI+dpGbEUZRThSdLUXUlqdSWhiv3mO8+oyS6Osp19fu0NcNbM7T
zykvzIlQzRGtOi2Bprps1W1FtLWU0KK2zc1q21JKR3slbUpfb6NqD+28jx5F
O7+jh9GhXnVbD2NDfYwODzIyMqRuH1bZMayuD1BfWoTbrS85tHsrG63MVHNY
sGeDhdouY+sqEzbaGLHBehFrLeazetlc1ihrl85kpdE0bIwMsFoyQx/7WDpv
OibzZ7Bo7jSmP/Yg8+Ya8tFHH0z6d1IIIYQQQnx7ubm70tLeSUdXDw2NzQwP
DdPT00V9XQ1FBQVkpKVQqfZ3tQ4pKyrQxzuy1G056an6fFllRflkpiaQlRGr
z8er9UZeThKpSRGkJIZTUZatbtfW2bhLSIA3yfHhav88We3bZ5MUFURGnLqe
kUiCtp56qD+JSmygD9mxwdTkJVGVFUOE921iVCtkxviQFO5MXpIv2fE+qkPu
UJOv9vMzwilJDaFRtUNNfiJFaZHUFaaQmxCi2sSX9Kj7ZMcF0ViiWinUh7hA
d9UtwXqbZCcEk5sYSoZ6TH1RGu2VefS3lNHWqt6reu6y0kQqK1IoyIuiqFD1
i7reUJdFV2epaody1RR51FRn0FCfR3VVlnq/aVSUZ1JclEx1dTr9fdpa5c30
dtdQVZlJTWUOXR01enOMjXQw8tU55+Mj3Xp/jGvneAx2M9TXxehAn94dY6Mj
ajtIT1c7KfHRnPv4OPs327HN1oontqxTVuntsXnlEtZbLdKts1zAGvN52JoZ
TjA2YOXi6dgsNsBy8cRxV0sMp7LIcDqzpz3M1Ed/z969u3F1dZn076QQQggh
hPj28vTywNvXl6aWVgYHhxkcGtL19vWQl5dNRmoyFSXFqjMKdUV5uWofupz6
2mrKSwp1paoltH3rspJU8nMTSEkKJSE+iES1j1+gGkIbB8lMiyEuKoDEWG38
I0H1SywBvnfISI6ksjiL2PD7hN3zIEa1R0FqDM0V+dSp27MSwkiNDiJNyYoP
JD3Gi4KUQGoL46kvSCAzUj0+IZA29buL4gKID3BVrRFIc2kGreVZ5Kqfqc6J
pyQtgrLMGNUiflTnJdNVV0RlbqJ+PJbWH0WpUYx21TPaVkNvYym1tVl0dJQy
0F9LXm4UaalB5OXH0NJSSF9fLXW12XS0F6nWSNHvKylKormxmO7OKvXZFKoe
KaSzvUx1RyVDA3X09dTq9/d2q98x3Ab0wHgvo0Pt+nkeWn+MDffoGBv4ah1B
rT20+cl6KSzI5urlz9m/azNbV1uzw24lu9fbsn/TavZstGar7VK9O+yWT3SH
Nu6hWWU6Bxvjmawwmo71IgOsF8/AYqEBJvOmY6TaY47Bo0x/5EEszEw4f/6L
Sf8+CiGEEEKIbz9tjWsnJ2cy0jK1ZdEZHh5lZGSEnp4e2lqaqCwtpbKijBpt
ft6WRjrammhsqKayqoi29np6eutoa83XxwpKipMoKkikqiKH3Ox4YqP9yctO
Uu2SSUZKhOqPINKTI9TlSNKSwsnNilNNk0RSTCApMUG0VBdRW5JNakwwoX5u
xIfdoyAjnhrVIoMdNdQUxpKXHERZVgRFKcFkRfmSG3ufqsxoclVbhHnbU646
o7E4jWrVQqnhvhSnRlCYHEaV6hDt9t7GEvKTw0kI8aatKo/C1EhKM2LoaShm
rKuOmqJUCgpiaWosUF2VTmSEJzHRPqSnhaquyGd0pJn6uhxamgtpashX/aUa
qzhVfS5VqjO0c/gzqanKpburWh/3GOirZ2SoRbVM48R4x3i33h5ac4wOdX11
7JV23NVEg2jzWsEovZ3N1FSXEBDgyVtvvaKvY25hMo+1liZstrVk22pLdq21
ZvsaczavNGad5cI/N8cKk1k6rT2sl8xQ3WHA8kXavFezMJ2vnfMxnYWzpjL1
wd8zc+qjvPvO23hpLfo/4PsohBBCCCG+/dzc7mBvb09Obh5f/xsfH1MdMqD2
w9U+eU0VGempFBXm0NvbTnt7I0XF2dTVlan98Aq1X55Nfm4ceTmx1Fbnqv7I
prAgmcL8ZAryklXDZFGh9sujwu7qyorS9ds0pYXqeXOTaKoqoLmqkHJtffX0
ODLiw8hMCCc6yIeYkLvq/jzKcmLIjg8gN1H1SoQ3ldnRDDYV01aWTmlKKOkR
d/XG0MY/cuICibzrRG58kGqVcNIj/ahTr6m5LEs/L13TUVOgmiaV8txEGtVr
rlc/V5ARpR9LpSnIj6ekMFk1RSrZmZHq/Scx2N/A8GCTao0aOtsrqavNp7I8
m+bGclqbKmisK1UtUvPVXFZtDA60MjrcoXSqxtDWMO/V1+7Q1hOcOOfjq/M+
BrsYUcbHBmmoKcXN+aa+jvnOnWtZvdqMFdZG2FobY2djynpl6yoL3SYbkz+f
7/F1e/y5OxTturXRLNUfMzFfNGvinI/Z05j+6INMUf3xxP49ctyVEEIIIYT4
b+fm5oqDgwPh4eG0tLQwrv43OjJMf28vaSnJuDg7UlpcoB8T1N/bSU11KdnZ
6ZSV5qjLWao94igrSaOxvkg/DisjLVJd19ZPz6S+uoDy4gwiQrQ5sGJorC3S
e6SkIJWstGhSE8NIjQ0hIzGchIgA8jPi6GgoJzkmGD8Pe+LC71GqGqW6MIWC
1EiSwn1Vg4TQWpFFk/qdRUnB+jhIaVqEup6uH3ulHW+VEOSh94g2JqLNp1WW
EaMfn5USeY+0qPtUqe6oKUpTzRFDYaYmlibVE9WVWWSmR5Cveqq+No+C3HiS
E4MoVv1RW52jWqNINUYFTQ1F6rF5aluiWqSW/p7WP49jaNvhgS6G+ztVV3x1
fNWQtoa51h8T6weODfWo3uhXrTekuqSfwb52wkP8+OC9N3n6wG7WrV3OKlsj
VqxcjO2qJWxYa8bmNeZssdXGPJaxwUq1iKURdsvn/5uxj6/7w8rIQG1nYrV4
DhYLZmE2fxbGhgbMmfYwjzzwO1avtOH69auT/t0TQgghhBB/nbQGuXHjOk5O
TlRWVenjIJ3t7ao/UklJTKK7s0M1Sb++Bt7QYA+NjbWUl+WSkhSi9tej1WOr
1b55CdlqPz4jLYqcrDj9HJCGmkK9P1ISQsnLiqcoL5nq8hx9mxQXTHJ8CGX5
qRRkxhEV7ENaXCg1pdnkpEaTEOlPeUEaNSXZFKbHk6UaJScpklL1PD1qv786
L5GcuAAKEoJpUz3SU1dEV22BaosEfeyjvTJH3+ap+5vLMihMiaC2IIXawlRa
qvJoLM+mRT2+pa6AWvXzrU3FVKjHaQrzE1VPFVJSlKLeS4zeHJXlE8dXaedy
9HTV0t1Rr49raGMZ2rkb4yPaeeN9jKvPaHSwTzemGdJu087v6NNbQzvXHK07
GFP/H9TP90hJjOLVlw6zfctqtm1axdo1ZljZzMN29WJ1eQl2tiZsXGXKBhvF
ykRZip3FItaYT5zvoZ1rvnLpbNUfM/QG0fpDO9/ccuEczObNxES1x3yDqUxV
7WE0by5nPjutrwcz2d87IYQQQgjx18vDw43r16/pa2DX1FRPHIw1ph+Qxdjo
KP39PfT1dtHf1606pI+urmbyshMpzE2jvqaIUtUZFWqfvrY6X+23p+ktUleV
T31VAQU5ifq5H/nZCVSVZevbXNUcpYVpdLdVU62aQxv7KCtIpaG6gLrKPHU5
TbVBMf2dDbTVVJCfnkBmQiSV+Wn0tVSr1iiiIidOH/MYUO2jNUZFViwpYT6U
ZUTrfZIU4kVJWiRd1Xn0NZTRW1+ifq6YkR71nKo9qssz1OvNpqE2j5bmEn09
8sL8JNVOiXpPaeMb9epxI0OtdHfVqOao1dfs+PoYKv2c8dFBnd4bw+r62KhK
ilGVFoOqPQaUfr1N9P7Qxz8G1fVBqitKiQoLxN3Vnjdee4E9OzexY+tqNqyz
ZLWtMStt52O7Rhv/WMhK6wWstpzPKnPtXI+FrDVfrNpjgd4fWnus0NtjJtZG
X/eHdr75NCy+GvdYMPMxpj/8ALMfm8Lbb76Bu+rNyf6+CSGEEEIIoTWIo6M9
zk4ORIRHkJOdS3lZBWUlpfR0auvkDTCs9qkH+nv0/eie7maa6ipoaayivDRH
Pweioa5I19xURmtTuT4GojVHrWqK1sYyvUmK81P+fByWttXOC6lSDaKNlWjj
Iy0NpZTkp1KUn6z3SFluFvWlxTRVllJVkElTeR6DrTVUF6TQXVdAf1MJZZnR
ZEXfJ0M730M1RHFqODmxATQVp+vHYVWp5hlQv7+tMpeGskyqilIoLkikrDSV
yspM+vrr6eqsVu2USk1VnuqsRvU+Culoq2RsRGuODoYG2lSLdE90xEi/Pt4x
Ojwx1jEyoPpieEjdp51KPs64uqytVz7RJEP87/+09ebPfXaa5555it07N7N1
0xp27VzPxvU22K1Zzpo1Jnp/rFwxlxVWhtgsn80K8znYaOsJmk5Yqc2vu8xQ
bWdjpTfHTP18D5slhlgtNsR83gyWLpjF/JnTmfLQ75n2yIM8f/SIfjzdZH/P
hBBCCCGE+Jo2H5LeIQ72igPXrl7ji3PniIqIZHBwQDXIIIP92jrdE8ccdXc0
09/TRltTNbmZiZSq/X1tPqjxsQ593725oUQ1SrHqkALVHhMN0qJu01pDOyZL
mzeqvaVSPU+N6o0U8nISqFXNoc2jla2aorYij6aqKnqam+lqqKUsL52aoiz6
WqoYaK1kqKOakfZKalVzVGbF0lGVq58LUqvapVb1RUNxKjnxQWTFBNCunqtD
PXdtURqVBWmqcRKor8mjvaOc7p5a2loq9Ncx0Nc0cYxVZ63qjk59/qqRwVbV
Ep2qN3r19z0+oh1LNaDPkzs00D1xnNXIkL52oN4c49pcuuN/bo7BoUFqa2pI
S03ly0uXePKJ/ezbvZPt2zZhu2o5q22V1ctVc5hgbbUQa8s5WKvusLFQTWE+
C2szA52NqQFWS6cr2uWZqklmYLl0FpZGqkOWqJ8xms/yhfMwNZzNQsMZTJvy
II+p/jh08IA+tjXZ3y8hhBBCCCH+PU5OjtjftictJUXtm2vtMaqPhWjr5Q30
dujnWQ/2dVBTpc1NW0qn2ofv6VLUtru9hqb6YipKM/VxD60/utpqqKnIoTA3
UfVHBs2Npeo52tR9pfqxWmnJ4WRnxKgGiaWyJJvW6kra66qpKsihNDtVbTNo
qSxU/VFDf0s1vQ3l1Kj+0NYS7GosobOhmJ7Wcuors1S/ZOjHWVUUptJYnkd3
Y4V6TBl1ZTlUFKTS1VTC+EATfaqV2tTtvao5hvtVU3XXq/fUpJqiUx//GBts
AW29DtUc/2piDGRMO6dD9ZjWZPplfS7dMdUm/XS1t6muyuOerzdXLl7i4vnz
HD/2Hru2b+PxPbvUdjM2y00VY1ap9rCxNsJq+QKsLOYos7HW2mPZTKz07lAN
onWHyQx9a206Xe8Ra9Uf1sZzWK4axGLhXEznGrLYYCYzpjzClEd+x97d27l1
8/qkf4+EEEIIIYT4S7m7u+KsOiQ7K5OhQbWfPTLCsHbckeqQEbWf3d/Tqc8p
OzrcTUtzNW1ttYwOdap9+Ta6VCd0NFfRoVqhu62Ovi61v9/VSHN9mb4uYV56
nGqVOhjupLm2WJ+Xt74ij+K8ZLKSIilMi6ciN01JpTIvg87acnqbanR9zfV0
1JXpx2K1VubSWpOv2qOC0YFmWhqKKC9No6WpWP3+ctpVpwx2NzDU00CraiLN
kDZWM9BCX3u1en1V9Hao+/vaGOxt1V/7uLZOoD6HVZfKil7Q+uIr+rnkY/3/
9jKj+lxhpUW5+Pl64mx/i+uXL3Lqow84+cFxvrx4gY8/OMG2TZt4fPdODuzb
xWobc1ZYGmO70oSVK4xZYb2QFcsNlTnYWGjHXqkO0cY6lk5Yqa3zofrDyvQx
1R5TsTQ2wGLxDJbOm4HJ3FksnjWb2Y9Mw+CRh9m6aT3Xr12Z9O+PEEIIIYQQ
/1FagzjY2xMfG0d3ZyfjYyP68UZah/R2dTDY36WfDzHYr7pDO09C7a+PD/eq
fXe11eal7etgoFvt1/d1qv38JtpVpzSrJmhtqNDbpFc1yWBfKz2d9fr64F3t
tVSUZFNVmE1jaRF1xdr4RTWj6jnGetoZU9vBtiY6GrQxjVL6Wqvobiqlp62S
vo5a1TpV1FRmq99RxEBXHd3aMVvquUf7mhjubVLt0chITzMMtavLTfraf4M9
HYz29zDS360apkfdp53XMTBhpP+r9uidgLZm+eBX2xF9295SS1jQXT4+8Q7v
vPkHPvngfS6c/ZQvL5zjyoXz3Lp6lXfffJ2Na23Zt3MbBx/fzZqV5tgsN2KV
tbHaLlTNMQ/rZXN02jkf1qazsVo6Mbeujb6+x0yslkxnufEjWBg9itmixzBd
MJUlc7X1Bacz49EpTH94Cna2qzh//vNJ/94IIYQQQgjxf+vrc0Pu+vqSlpxE
Q22NPtcTqkX086y187L1cyT6VXOofXR1ma8ua/0x1Nuu6+toVt1RRVfrxDiJ
1h3amEi/6oH2ZtUJvS1KK50tNfS1NarmaKenuZ5+dXmwo5VR1R8jXW201lRS
V5avHlNDe0MpTdUF+rFT2rFc2rnr7c3l+vWR/hYGuxsZ7mlRr7ed0cEOfV2O
scFuvY1GB7pUo3Qy1N2jEkO9h8EBxtX70jCk3tfQiHqcNt9Vz1drCU6sJzg4
0K66SbVUWy1Z6bHcvHqOZw7uZd+uzXx47C3Onv6I82dOc/vqZdUeV7C/fpVX
XzjKCstl7Nq6kaee2Kn6wwLLZQtUeyzAUrXH8q/aw/qr9tCOr7JS3WG5eDpW
C1V3KJaLpmG+cAom8x5h6bwpLF0wDSPVH7OmPcLUhx9k0zo7zn/xucyzK4QQ
QgghvhW0sZBbN27g5+NDWVERHa1q/16fF2tookP0OZ9G9OvjQ9paGL362hja
VhtXGNPGSbo7VIc0MTTQObEWuOqAgb42mhsq6Wpv0Nf109bxG1OPHx/s1883
6Wltol/1x0hvl2oJ7Xoz3S31qmla6WiqpLosVz1nAwPdTdRWFtBUV6qeo10f
r9DmzWVYdcdgp94b2uvSxzRGVFeothjtH1C/a6I5RvvVax3QzrEfVvePqp8f
/9f+YEgfn6koysTf9w4uty9z+YuT/PHlw+zZvo7VK0zVdj2ffXSMT5UzH5/A
6eZV3B1v42p/i5ePPsMKczP2bNvEU/u2s8bGFCtTQ2yWzcXafA7LTWdhaaKd
Uz4LC6OZaqssUv2xwIDl81V/zJ/GctUby9TWeM6jLJn9GEaGU5kz/SEMHnuA
LZvsuHjh3KR/R4QQQgghhPjPpP23dWdHB1ycnXB3ceGejzepSfE01VfTqxqh
u6NF7dr3fnVs0lf/tH394X59zYzxoX6GB7rp18ZEBjoY0Y7VUh0y3N+hbu/U
e2R8tF+fV2p8dFhdH2S4r0/d18+INheXvsaGagH9fm1eYG3OrQb1813q+Qfo
aW+iq7VBXdTWH9eeR1u3o2ti/XF9bEZrj0G1HVbXx1SXDOn9MaZ1iDKuft/4
2CjD6nf09fbSp/WSdt5KQxmp8WF8cfp9DuzawLYNK9hsZ8VGWws2rbHE1sqY
vdvs+OT4nzh14m3OnfoQD2d7/Nzv4HzjKs8++TgrlpnwxM6tqj+2sspyMcuW
qMYwnYOV2SyWm8zA3MgAC9Ucyxap7UJFdYf5vKlYzH0MC8Mp6vJ01R+zMJk1
nUUzpjDP4BEMZz7Cnl2buHz5/KR/N4QQQgghhPivos3Zq7WIdmyWtnaIh6sL
vuq6u4sTfj5exEaFk5mmrYdeoTpgSD9He1xfP2NAP1dbm0tK75A+1R2qDSbm
lNLu75+YZ2pEa48RlQpDjAypy8MjjI58bZTR0RG9cUbVY7VzULT1ERlTTaGe
f1w7b0NbG1C7XRtn0ZpmeGKd8vHhwYmxDe3Hh8cZV8+vv77xUb15hnq7KC3M
xdvNhQtnP+P21Us4Xf+Ck8f+qBpiJ7s3r1a9sZwNtssUc/2yZpWFEftUf5w8
9gan3n+L86c/xO32dXydHXC4dJGDu3ZguWQRT+3exuH927ExW8DShdOxMFbt
sXQGFiYGmC9WDbJo5lftYTDRG3OnsWzOVOUxzOYYsGTGDBY8NoW5Ux7FyHAm
Rw4f4Nata5P+fRBCCCGEEOK/09driGjHaHkod+444XD7JrdvXCMpNlrfv5/4
N6r3xajqjK+Njw3qvp7jVmuK4eFhhoZG1XaUkZF/NTwyphtS9w9ra5CPDal+
6WOgv1tfD1BbZ1wFi35slX5cmHau+PhE/0ws7v5//htX/dFQXUGW6qW7Hq68
+YcX2bLeltUrrNi0diXb1mvjHMtYv9JUt2WtBdvWWbJZbTevVQ2i7rM1W8j+
rXYcf+sVTrz9B85+cgJn1QWezk7YX73C4zu3Ym40j0NP7FQds4tVyxayTPWH
zZKZrDSejrXRFJYvns5y7birxapJFs5S/TETM8NZmM6ejcnMmSyeOg3DBx9i
1gMPYGVszGsvvYijw+1J/9sLIYQQQgjxP4XWI/a3bhAWHERLYyMj/RPrh4/r
c0gNf3Wc1sjE+RVjWnv0q85Q/TEyorZjyri6TaM6YXxidb9RlRHa/Vp/jI8P
T9DGMEaHJ46t+qp1Bvo76e1tUm2jrV/Sp4+tjAz309ffxcBANz3dbRTkZODu
dIt3X3+FA3t2sH3jWrbYrWKbnS3b1tqydY0Nm9doYx0mqjvM2LpuGVvtJmxe
Y6r6Q1m5lDVLF3Bwx3re+9OLvPPWy5z/4lNc3Z3U+3fh6pXLbN+6AVNj1R8H
93LkqT3YWizEYuE0Vi2Zge2SaaxcPAUr1R/a2IfZ3KmYGk5j2dyZmM4xxHiG
IfMenc6M3z/EwqlT2bVxoz63r5ury6T/fYUQQgghhPifRhsbcXK018dDbl2/
iquLIwUFuXoH9GrrGerni0w0g9YYY6onxka1870HGdbWPBzqZ3Cwn87ODro6
21RPDH01ljH61XrjI/T3dOjrkXw9xlFVWYGj/XXOfHqMa1dOc/nCJ5w/9xFn
Tr3PB8de5+QHb3H8vdd4/tkD7NiyhnWrLFi/ajnrV5qzfoU5G1dasGnFcsWc
DStNVH8Ys2m1iW7z6qW6jeq2DauWsG75ItaYzOfo/m18/P4fOa6e/9r1i+p9
u+Nyx5Fz586wYd0qzE0XcfTwAQ4/uRObZQswX2SAjbE2/jEDG6NpLF9swLIF
M1g6dxomc6ZhPNuABdOmMvuhR5jxwEOYzZvPq0ePcvOGHG8lhBBCCCHEv8fL
0x03tztc+fKS2ic/y6VLF7h29UtuqCZxuH2LAP97pKWlUFyUT2lxPqmJMeo2
XwLueXPf15MrF7/gxpWLJMZFkpudRm5mKsV52cRHheNwQz3HzWuEBPnjf/8u
Jz/+kH17trJpnRVbNlizdeMKtbVhw1pL1q+xZNsmW9Udq9loZ8Va1RerbYxZ
Y72ENVZLWGtlzDprRd8uwc56sbKI9TaLVZsY6dt1ip3VIvXYhaw0nYOtqWqD
Zx7n7Ml3OfXxu9jbX8VHdZfbHWd1/UNWWi3D2sKYF44+yYG9m7Eym6+f72Fj
MpsV+rxX2nqCM7EwMlS3z8F4rgFzpz7C9H/5HXMefUT9Hivef/tt3NXnN9l/
RyGEEEIIIb5JtPEQ/TwRDzed1iSOjvZcuXKZs2c+5fPPz3Dh/DnOq0bRXPji
c859/hkffvA+f3r9Nf7w8gs898zTHD74BEcPP8W+XdtYu8oGO9sVqik2qNZY
zyobS1ZYmrLKcom+xt/6NRbYrVrGSnV9paUxq1eYsGbFUkV1h81CbK0WsFq1
xNetYacur7GYz1rN8vmsWT6xtbNcoNNuX71sLrbmhlguMcB22ULefPFpPj99
jNOfvo+T0w3u+nrh7eHOiXfewWzJYlZYLeWl555Ur3cjlqpXzI1mYbV0LlbG
s/X5dpcvmcuyxfMwmjuTOdMeYeYjD2Ayfx6HnnyCSxe+mPS/mxBCCCGEEH9t
tHZxcLjF6VMnef7Is2ywW4P5UhMsTI2xWGqEubERposXYGG8mJUWJtguN2Kt
6oyNa5YrFqxbZaaY6mMdq60WsVq1xxob1RfWqics505YPpc15nNYbTab1aaz
WbNMuz5Pt9ZcNYjWJOqyrZkhq0xmsWzBVNUrxhx7/XnOnn5P9dNHqqkc8PNV
r9nNlfdefwPThfOxtdb64yD7d29iudlCzJcY6swWz8Bs0QyMF85m3mwDZjz2
MIYzprJmpTXvvv0nXJwdJ/1zF0IIIYQQ4q+d1iKXL13k1ZdfYsNaWyxVg9iY
LcVadYi1yWJWmZuonjBhrY0p61ctY9MaczbYmmG3UhvzMFIWqfsWqPZQLaG6
Y5WFag5zQ9ZaaL1hqPpiNrams1SHGCqqP5ZN0BpE265aOkefv8ps3hQ22Zrz
0bHX+OLsCa5dO4ePjyt3fTzwcXfnzRdfYumCufqxXi8//xR7d27Q+0NjZjyX
hXOnMXf2FAxnTWP+nJmqp4w5eGC/vpb5ZH/GQgghhBBCiH9LO5brk48/ZPvm
jSxbOB+LRfOwWDgX80WGWC1dyMplqjUsjbGzMVa9sUT1hnas1VxFNYTqjhXm
c1hhNgubpTNYuXTmv457mM1RnaGaxNRwwlJDddtc/bKtdt6Gtn7gwmmYz3uM
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
i928eR0HB3tSUpKVRC5ePMe2HZv4zW9/zg9+8Df8s2qP2bMfY9eOjTzz1H72
7NrEHnX5o+Pv4K7aZbJfvxBCCCGEEOKbQRv7uHnzBgkJCeTmZmPvcItnjzzF
rNnT+bvvfYdf/PLvmTrtQTZtWsPhQ4/zxN7tbNmwhle1c85vXZ/01y+EEEII
IYT4ZnB3d+XK1auEhoaSnZ2Fr683r7/xGuYWJvz9j/6OH/347/j9737DqpXm
vPTiMxx4fAfbN9vpDfLF55/KcVdCCCGEEEKIv4inpztXLl8iMCiY7Kxs1SAh
fPrpKXbs3MY//tNv+P4PvsvPfv4j5s4z4MizB3jxhUNs37qObVvW8eGJ93Bz
c5n09yCEEEIIIf49Xl/R5judmPP07l0fAgLv4+9/X+0Tqts8J+6b/Ncqvs3s
b9/Ez9ubnNx8oqNjuHz5MkePPsvUqY/y45/8kF/88if8r9/9hg2bVvOH157n
wIFdbNlkx4vPH8ZB1jkXQgghhJg8Pp743buLj6+32vrp2//9fq0x7gf4ExMT
S1pKGhnp6aQkJRMbE01iQhyVVWUMDPbQ3dVGVUU5JcVFlJWVkZKcrNrkLm7u
rvpzaP+9WmsXHx9v/TgZrVu0y9p9chyM+I9wdnLA844LqYlJxMbFqZ5w4Pjx
91mwYC4/+tEP+NnPf8yvf/Nz/Tiso0ef4tCh/ezdu5UnD+zh3NnTX30XJ/99
CCGEEEL8NfHx9cL3rjcBQf6kZKYRGR9HalYGASFBeGq9oB6j0a5X1lQxNNTP
+PgQjA/T2FBFdXUxAwPtqjsa6WirZ3S4S903wGB/O53tjYwM9aj7e8jISiUs
IoT8ghzqG+pITUknKiqGJNUwERGR6rV44+rqyh21P+nu5irrwIn/Xy4uTjjd
vkW6ao8E1cRePj589NFHrF+/nl/+8hcTfvVTpk1/lKPPHeKFF59h2/b1PL5v
Bx99cEx9z2StDyGEEEKI/1Zenqo7fIiMDiMtI4Hmtkqq64rp6Gmlu6+NlPQE
ouPCae1ooLe/i8HhbkbGeujsqlPdUUx/fxMNjUWqP3JVY7RQXZFNRnIYFcWp
dDaXM9LfTFdHFVVlWeTlptDRVc/YeC8jo90MDykDA4wNDVJdXkZDTTWMjjLQ
30eVuh4dHk6gf4B6jV64ubrg4S4tIv6tm9eukRgdT3JsAoH3Ajlz5hw7d+7i
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
RnpKFpVlNbQ0duDp5s2f/rc/5rnnnuMbf/mHhIS60dJWgUnGxYF9H/DBe6+p
7OHn7IjT3l14ODigy0zX5l1p0qRJkyZNmjT9O6X4MIvVwsj4GM/+QP+AK1eX
GRpq4NRiD8NDVdjtmbJuKsVFKdRW59HVWqzGA7paipnoq2dutI22ukJSEwLJ
N6QIr3QLgwxSXWYmwPUoQccdaCq2MN7RQF9zFX3CLb3tlXQIP/S0lNBZa1Zj
JdasOKoL9OiSwmR/BcIhNuGdbLXGVXtzoXBHCMHBx0lK9Mecn4heH010tAf+
fg4YDHHCSpXUlAt/xAYSHeSBISOO4e5a5sbbyc+JUfukTwzU0yWM09BQINdi
pVo4pLG+gKpyg5yvgZ42u5pLUldhkHOw0dtWTldziaqx/npWTg1xeXWK25dO
cf/KMuM9DTRX27h0dorVUyNUFOUwITy1ND8k/NEuywnuXDsvt/UWjx7c5LFa
K+shjx/dV/uoaAzyi5cSe8rJySEnOxezyUpbczv1tU04HnPmD776VT4u7PHt
b/8ZSSlB9PZXYxQOVthj44afcvTgdjwcHXDcuxeHHTuJDg7Wai1r0qRJkyZN
mjT9O1RcXERZRTnVNdWcOnWSp8Id9x9c4/LlRU4vDWOvyKW52cbsTKv49SKa
Wsw0N5mpKM+iu13pEVgvDFGq8sP8WBurp2Wb0lzKSnKZmepjXvijvbEcY2os
sd7uZEYG011TymBbDW31JTTV2ii2ZJCdEkpHrXjAKjNlpjTMunjCfJywi4/v
aCwhPTFY9lNCd1sFacnB+Ho7kJURIexgFu+YTEyUF95eR0iI86emyoLNmEaw
lxOBno7Y8lLobi6nodKs5qsrx1Jq9RYWZgpTmSgtzkGXFU2VvG6osQp7VDLQ
Wa3W5u1pLaOxOl/lkNY6pb9hsRqHOT3bq17r2ZODnJ0bVGNAfS2VnJrqFT5p
ol+2X1kc5erFBW5dPcvJiT75rJ5LK/M8un+Nx/dv8OTRXbV3yMVL58QLF2p/
O/9PlnJ/lbwmRQp76HQ6kpPShKcr6Ghrx2o2s2njJr7whS/ymc98inXrvocu
O5bhsQaKSjI5eHAT77/3srDHh7gfP8CxfTs58OFWfI47kavT+nxo0qRJkyZN
mjT9W7IVWJmYnmLt0gX6B3tYOXeaa9cvMC3MMDTSwuRkOx3tSl5uEmMjNZya
72Cgv4LBfjs1dj1V5dmM9lUzOVQvLGFT80FmRtuoKNaTKj7flp9Ou3jyoe5G
inLTcRO/5nZgB+32QnqbKzEreeNWYY+0CKKDXagpzKGnrpgaWzZVhXqSo/ww
ZsZRZs0mLtyH/JxECmWfKYkhBAU4k50VQ2NDMZXlRjLSIwnwcyI+1p9WhTWq
CoU9nPA6cUj4Jot6YRJdahgRQS4kRflQKzxhMiYRL7zi4+VAaPAJaoU9Bnvr
GeyuQS/7S4zyprpUL9xTSEXhs16Ho311TAw2qnki9ZUmxmX98e56RrrquLA0
wfRwK5VyHZ0t5YwNNDE52so1YZDh7gasuakM9TRw98YaTx5c5+Hdyzx6cFUN
N/X19mp/P/9PkjKvUJ1nlZtLWFi4qsTERGGPVMpLKqivbSA6Joof/Oj7fOxj
H+Mzv/WbfLhlA7UyZpaXBqmq1nH0yEa2bnwVZ4cdeDof4MierezfthnH/ftI
io3R8ng0adKkSZMmTZr+DSm1fgaHB9Q8hIuX1hgZ7WV6boiR8S7aO+z09dfQ
31dFZ3shzc1GYY82Vpd7aao30tKQT09bMZbcGKpLslT+WJjqZFx8eb3dRIE5
DS/3Qzg57BS+0InnblL5w9/xEO77d2LLSqStupjs1CgKTBm01BaSGhNAubzu
rS+nQJdEdWEuBXmp6typUnM2+boU8e8ZFJlzyMlIwM/HmbiYQAqsOaSnROLv
64zL8YNEhPnQ09mo5lxEBHri7XyYUpuexupCYYoY4iN9MGbHUV6QTWpqKP5+
xwjyd5J9hGLJT6WyNE/OKZVI4ZTUuAA1N0WJeyjzrpS4hzL3akaYoqOxCENW
FG01NtbmR7h8Zprzpyfoa7VjL9LTJlxUVWagrsrMwnQvc2OdTA62cmq6j5mx
bs4vz3B5bYFLa6d48ugmN69dobBAywX5/1vK/czPNxEXF8/BA468+eYWDhxy
IyUtl4aGFoos+ezbu42v/8UfqbkeX/riZ9m/faMay7q+OkVPRyGeHh/ywfof
4X54O8FuDjjt28rBbRtx2r+bqNAQLedckyZNmjRp0qTpX5Hix5S+HnV1VVy+
co7F01NMTQ1w9uwMlVX52AozOL00yJUrswwNVlFanEhDXTbjo3bGh6rEh1uF
F4z0Cn/UlmdTbksTf25mfrJDjQ30tlcwN9lFsS2LWPH6VRX5jPQ1M9haQ7k+
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
o3DHHgKO78Xj0DaO736fI7s/wMlhn9ofJlWeA0NejtyPX1w/j5/n3+fl6YW/
sujt6mJRvP3q2RUe33+oevezp5eYld/1/t1n86uU/9bk+yKrjZKCQmGOYXo6
OoUtupmdnOb2tVuMDY4K6yrMsMzYcB95OakyHpOFbWTc1hUJi7Sqz2ihVUd3
V508owbKS4zUyZiuKDNhzEsS7miW86llpL9F9lXC5Oiw7H+cieFhNeby9P4N
rghzTI32MTHaq/LH2sop4ZZFYYwbcpb3hTsecvXqeS5dXFX71ty4flley/vz
F3govKGwyIXzK0xOjnLjxlVZ9zJTU1OMjo5TLeev5Ydo0qRJkyZNvzpSfU2p
ldHxTm7eXqGgOAuzJVX8aaeaO15SmEOZcEFXcyWttWVqTakSpf6tOYd4pcdG
mC++7sfwdFbmKXmoOR8twixKP/BA3xMc3LsZD5cjZKbGCpvUiN824HR4P46H
9xIj/KL8rd+WnyXe31+dz6TUklLyy6srLaq3SUkJpbhET0FhFsVlwj5VBppb
y2mpryYrNZHE2Aj0smyvq6KurJhysxGLLpMgLw/179PlRVbMednqugnR4cIU
HsIQfsIevmpvhvrqSuGlcrzdXdQYiLI8vH8PRw/tx8fDlYT4aHyFPXw8Toj/
DSEtIVKu04fkmGBiQ33xl2sP9j+hSskDUXqAnHDcg5vzfjmWk1oLKzc7Xhjm
BM5Ocs1ynRlpscJjOrlXZvF1BszCdKWFJpFBzjlYzXHPz0unrMgovjGPkcEO
hnpbyE6LwZCVgFGXqDKIEvOYHetheqSTYWGUTuHFicF6zi2NcObUCMunxrl1
7Zx4y9OcXTrJZfFzl8+viu+8wu3r12lpav5/zMN6VlvKos7hycrKJDkpiYSE
BOLi4ggJDuX4cWcO7DvI5g+28crLr/PCT17m+R+/xI9/+IK6fPGFV3j5xVd5
47VX2bjhZ+zavpnDB3bL/Tgq48FdfudQ4dEEuVfJKhfaTDKWbCYZV3o1Vyct
IVplQ88TDhw/fJDDuw+wU3hm09vv8u7rb/LOq2+w4fW3Wf/am7z6/Ev85H/8
E3/zjT/iK5//NF/6zCf44qd/g89+8mN8+XOf4i++/vt8/zvf4oN31uFzYhfZ
SYGU5ydTZkrCkiW8E3gMn6Nbcdn3Hk473sZ93yZ8HXbgemAzjrs3cmT7ezjs
2Iirw16CfD2EhYVtTb/4eIcyt8qi1IoqLECfI0za3Myje/e5ef0a94Q1lFiH
EuMY6Onl3s9zO54+Fc/+gMtrF+T5ssg9TxXWrsReVi5jUieMMCpsck54oRZD
TjZjQwPCJ30UF8ixTDpqa4o4dXKUi8IIjQ3l6nidmxmmrqZEjl/F6HCXjB87
Fvm8qa6CtqYaGW8zwjfN8mzWCEu3COd0qLGWh3ducOPKBdl+gpbGWuamxuRY
PUyND8k5LLEk250+Pcbp5THa22uYn59gbW2ZtXMrLC0ucvvWbXj0iJsXzzE6
0M3a8gI8viMcfYOrV65wfvUSVovtlyqvSZMmTZo0adL0/66SUhuLS+OMTrYz
fbKfodFWrAWZTEx0cuXSAgN9dVhNKZQV6liYGaKrrVp8jIVW8SQlNr14mXjS
kyOIjfDDz/sY/j5HsRoz6O+up6LEiIvTAXw9j1NnL6SnvYFm4YSY8GAO7t7K
iaP7hR9CKLRkiw8qFGYxiY8pV/t8KLkQURHeHHfaTXxiEHnGJMIjvdS5WmZr
Fk31VcIVOcSFh5CfnUmpJR9zdhbWHB25qSlEBPgR4u9DRnI80WFBxEWGqtwR
FRqobpeaEKPmhLQ1N9Db2UZooB+H9u1WuWP7lk24n3AiyM+bCDlXJXc9WJSb
lUpSTBjhgd6kJ0Tg73ZM5Q+lN0RIoIua7xEa6Iqf1zE1JqLMwVIU5O9MgN9x
PN0PqfkdzfXltIp3a6q3q37PXl6ozmupKMlX89tTEyMw6lPlXtjVmEi9eD4l
HmIzpFNbZqayyKDyR29bjRr76O+oZ7CrkaZqG0PdVcxNdDE91iXscVa0wuzk
IDOTQ1y6sKLOxXp0/xZPH97nzu07VFVWquNA8W4ZGRmEhobh5eHB0SMObNm8
mbfffIs333iDt17/Ga//9FVeXveCaB2vvvRT9bMNb73NxvUb2L55Kwd278Xh
wAHcnZ2FIXzkXgWTkRhJemK4cEU4CZH+xMk4CQtwx0/um8vRXRw7INvtfI8P
33+d9372PK+v+y4vfO9veP573xJ9mx/9w9/zwj99lx//w3f47t98k3/81l/z
3f/rm3znr/+cv/7jP+RPvvoFvvrFT/AHv/sp/vav/oAXvv83bHxrHW6Ou+R4
vlj0idSU5VBXnoM1N4aUSA+8nXbhtGcjzvs+wGX/FuEPYZBdH+K8YyvOO7dw
cPMGHPdsx8/VkVj5/XUZKZjzjb/w2sXPcvKN2Kw2rl+9zsP7D7l08Sp3bt5i
enyM+iq7PI9tjA0OkZ2eIUyXxdnTZ7hz4zZjw+PyPFXS1drJ3OSMvC4Xps2j
o6VVxlUjiydPMtg3QHtLm7pdU10tU2MKw3TJPpuFR/pYnJ8Sb78kbNNPV3uz
cMIsLQ01TIwOsnp2kWFhiI6WRtlfA8P9vZyam1F5XmGPydEh2pvr1fUHejsZ
Hxlg9cyiMMeIyh3jss+zSwtcOX+O+toyausKmJzqpq6+hI7OBuZPTnL92iXR
ZS5cOM+jO7cQuGLtzCkurS1x9+ZFpiaG1PF7/twl6uuaMeQpbFjyzzWaC39l
a01r0qRJkyZN/1X1rMeYhcXTE9y5t4bRnEyeKYmZk32YzKkkJwWrPQTPnZ0U
j15CeXG2ygXd7bXi1+tUDpkY7WRY/G99dSG69BgiQj2EQRyIjfJV+/J1tNjV
/hjR4b4UWXLI16djzM6gssRGfHQIXq7HZBlEri5Z+MMmxzCosY86kSU/nfTU
CNzdDuEv3j1NvL2feHl38fXxCWHi3+vIz80mKT6GQsWjCVPoU5NJjYmiKC+X
+PBQYQhH8nQZJMVGkZYYR0RwAPFR4dRWlonnSiXAx0t4II++rnYyU5PYtW0L
e3du+5e5WIF+Cv8cEW5wJiTIV53LFRrgJQzjq86/UnqsZwl7BQeekOvwV+df
KTWxlNpXQX7OajxEee3qfABXlwP4+zphNetoEJ4oLTJiystU+42YjDrKS8yY
hS/Ki00UWfWqlNiHLV+nMokSEym15tAn93+ou1HN/VBeK0vl/aKw4UBXHX0d
wiytlSzODYpHW+PqxSV13v7aygL3717l0cNbPLx7k8f3lfyAB+INe0hKTJB7
7MeHW7fz2qtv8NJPfszLz/9YGGMdb732Cm+//jrvv/MW2zZtZN/OD3HYvwdX
xyP4ujkTLpyRGBVGWlw0mUlx5Ml9NWWnY9IlyWeBhPo64y3XfuLIDpwObOHY
/g/Yv2M92ze+xrtvfI/33/4BW977CR+s/5Hoh/L6x3y48QX1s80bfszmd19k
09s/kXV/wPrXv897b/6QnVteFX59hz0fvs62jS+zd9ubwhvbhW3csBriabAb
aau3CnfohT9iSYhyw+vEDhz2bWDfhz/j8M71OAlzuB3aJZyxjcNbN3J4ywcc
3b4N98MHCff1JCMlkXxDrjDAL26O1c+l1M21WS20t7aLr24Qnz3J1cvXGegb
ZnR4Us0hHxnoEc7PkzFiZbC3W52vZsrNY6B7gKnRKQw6gzC2Mq+vlLOLZ+jr
7KGno4OlhXnGh4c4OTXN/PRJNQ+9ub5BZZKVpdOy3z6VQVaWTqlxirHhfuEU
YZjpMXUe3/TEMMMD3cxOjTI9OSKvnzGIwhsKf9TIs6U8T3NT4yyfOimfTQv7
Dqs1sk4vzHDt8jn5N2VRth/h1vWLwh8rnFmaZWlpggnh5pmZAfk3aZIpYeaL
wssP7t/mtHDKyul5YZDrav7IzSsrwmBrrJyZo7e7g8sXLnN+7Qqzcj0T45Ny
TsP09w/S1NyMxWpV5wtqLKJJkyZNmjR99FLqXY2M9XD/wSVWVqepqbFgMCaJ
B+hgcqqL4oIsUhIC1fq5J2d66GyrUPMYRofaOCPM0tVerfYit5iecUJaSgSp
yeFkpoWredeK71Z4QslbyE6Px8fDEbfjh3FzciA5LhKbKUf18kF+ruL1olV+
UeZgKT6+vEh8VG+j+K0mdFlxeHgcJTMrmSzhlIjIQJJT4uTYNnKy0gkLCpDj
BVNgEnaxlxPh70tieBiRgf4kxkTSUF1BelICurQUtc6uwh8W8ZU5mWm4OB2T
7f2FfSrEu2WzZ8eH7Nu1XRgiUpgogwBvDw4f2ofTscNyrFQMwh+BPorHzZLj
ZWHITCQ5OlBlDV16tMofaUlhah0s5fqVuWTK5yec9uHlKZ/JteXoEsjLTiEh
VomruAl/hJOdmSLbxql1rpR5VzmZCcJtsv+cFLk2XzUfRImNFOVnqVJyP5R5
VxWFeRQYM2itK2VuvJdz8rtMDrczKBxy/swMS6fGubS2wN3bF3lw9woP7l3j
3q1L4uOu8vjeTbU3oTLvPyo8nD27drF/70H27dnPsUMHhN2OEyJsoXCYcv9y
delq3KjIlk9FsRV7cT7lNjm+IVPOQYk/6akts9BoL6JazlXp5Z6dHCIc6Ckc
4k9uWgSFhiRK8tMoMiaTnx0jnBIm91HptRgv28tvakugsjCJiqJkuc4Y+Z0i
KTTGUmJJoKokXfatp70+n+4mK42VeioLUqi0pVBflkVLVS41JXIe+XJ/00MJ
9jrI0f3vCaO8xtYNwjPvPs+OTa+yc9Pr7N38Nvu2vs+hHVuFifbhfdyJcH8/
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
ukuNJjZmi9GehFwbNo64geMeAT6sT3cTvQjXn2I2iWV/3t0dCoUvQkLC4Ovn
T769Fzy9FMQb0YiOiYMvjTsH8tMt7G2ha2SA3epq+Gn3LmxXoWtYUwN7tNSx
U00FqnqacPR1Q0phFkpaalBOPnNJZyNKyG8u7W1FeV87bWtD0YEGFLTXobCj
gfY3o/RgCyqIR6r7D6CKjiuoL0dSbhr86LwZ07xiYKQvevTI+GiERIXBydkB
jsQmNrZ0TnwVkoclug87W+I+U5pXIlCUXwaFdwD27zOAjRUxnJMLLImzLIgf
rCwtZH7yZh0Z1/91coKZgT6sTIyln6IPnY9omluYPbiuF9fLsONaGDSHedHf
RBGjpScQI8bGID46SmqQJcREi7k5cX8RK5nruLZXTESY6NkrSgvQ3dmC/p42
Ws+leY5+b4WLxELa6VyxLoT54xCdhwOttThMy2MDB0WXzjG1E0e7cfHcCbQ0
VhCj1OPW9XN4eO8qjbfbeProBl48v4cHD2+jvKLsdx87SlOa0pSmNKX9W8Y5
JYUl+bj74AZuXD+PtpZaqRWZmhKLwF/jHhHh/lILKzTMD1FRQeSn2AmT5JG/
lEpMERroL3nR/LyV9Zk25qbQ1VSDttpemBjsh4ONjfQt5nr+tnTPNzc2grW5
mdyfw4KDpL6nqbEpmYn0QLMwM4fBfn3hDXtbO+EPZg1nRyfZZ2fD+d8uMDEy
hq2VjTCLmvperF6zXHp+cO4V8wfX4tXUUkUM+Xo7d+/A2IlThD/GTZuBtydP
xRsTJ2MMrb9D/DGWWGTi3Fc5VWOmzpe4B/MHM8bbxBLjpi+QHKvZS9ZInINZ
Y5RFmD84XsIswsdNIgaZPn85ZtJxc5esxaKVG7Bg+Xpavkf8sRVrNn6ItRs2
YfPWj/HLLzugq6uN3bt/wc8/fA1dje2wNtWGs60h+URWkoM10FNPLvwtPLpz
BiePNuPc6S48f3YRD+6dxqP7Z4hDLmF4qAtpSaGIj/JDRUmW9JRwd+Y+bQo6
X8Z0jpyRGBdCvqcLAsh/DfVzg7udGbwcreHjYo9gbzdEB/kiOykWDeVF6Kiv
QntdJQYOtuEa+dw3yDj/iuMmvM5xEGYPzr/iGlj3b17G86cPgOePMELLZ08f
4sXIU4yMPMeLFyMYHBz8LY7wRzLWJV2/fgNcwes4fc/snFQkpUQgOSUKufR9
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
fzQ1co2NRlHLr7NNhkViDPad9nXKMETXpO6OBroGjglf3PzcOFZX53F4tI2z
8yORU3d5Rec/XUMvL0+IlzdRyPU1sqT7DZIkSZIkSVJ2ViZysnOJJ2auW/Oe
nWB/d1vUbDk62MHGKveuWMLB7gb91l7HYDFXzM30iVirgV4Z8Us3FohF2OaT
1XMsVr9gkDHRV6QVnR01xAZc67ZE+C166Pe7SVYi+hZyzS3uKcK+EOYFzl3v
ITt/ZLBDsEdDXalY5l7RzCN93U2CP8pLs0WcF3MHx17xfWr2oTDTcGwXr3e3
VwuO4Bxi5gr2Z7D9wCPng/D2qbFu4euYI85g7uCRY7N4v9nJPszT+srckPBx
8Li5PI6V2SGcHKwSsO3h4mgNp7srON5ZxTnZHpfc6/j0UNynv7i8wNHxKU5O
+T7opSiuOz46RsyXIvUe+5soh2zaOWLdhRnUy8oho++5qaUclRWZ1zkczaXo
6qgUnJGZHo7szCjh+6ipyiLl0ty4jsEqzE9EZTmxbEU28nMTRP8Xjr/KYB4p
TKX3SUBCfDBxSijiYgJEPFZVRQ5iI/2JQTyJYWJF3Wd3VxvBFdx/hmuuJcWH
wcXRAq5OVoiLDkJ8bAhxSghiowIRGeYHextjaL97DiOdtzDTfwdd9eewNtGB
q52ZGH3d7GBvoQ/1l4/h6mCDiGBfuDlYCt9IZIgXIkI9YWepi28+v4uPP/5T
/OQnf4qbn/0Ud25/jNtk/ysQi9z9S5Jjyd/AHfmbuHOHxTnp3CtEjpblSXK0
fBu3b98WoxxJXp44hRhEQeSTKArmuK+kSlLBA15WUYKKioLIC1FSukOv/xlu
3PgIj7+5D3cXS2SmhhC31+B4dwTrC410vjRgf5Ns9lbuK2+FlBhLFKb7oDgz
GIPt5eiQFcDb0YSOx0tihZd0fO1E7o6vrwPc3e3h4+sBfQMdvH7zCpZW1khJ
SSNuSISVlY2Qs7MrTEzMhC+Ec8zd3LyE/8PB3kXEXzk5usHD3UcsW1nawcLc
Gvp6xjAzs6RzMAttbW1obW0R82pychztHS2CPzo7W4gpJunaNkLXqkr0d7eI
HDi+h9HWUI6+jnqM9Ldh5z3ne6xgdWUWW9vrdK4f4OLqXOjyks77qzPs7Gyg
prqCPnuSlOMlSZIkSZIkfRD3d+N89LqaGqyvrgkOOdzfp9/fGeKSMRwebOHq
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
kQUs0HfweshNWE/ABeYa0/SZOayTe7DegKxXOcudrK2EuWusszq64UUaJ3sW
y5hlvUVco9DrBiFpbUZrSxOGjHq4nA5Impu4w7GeHlf65ygQCAQCgUDw10j8
xXj8/Ge/wA3X34SPfPjvcNV1n8Tt3/wSnnv5eSSlJ+Hk2eN4edsmbHjiUezZ
sxPp6alIik/gfaD/EuPLTE/Drx7+Gf7pnnv43KoHfvxjXHfDTfjEJ2/AXXfd
jRdefBa73tiJjZtfwjN/eBq7d+9GdnbWB/rv2ix3VZifi8aaKjhGTJiedCPM
6smyvt0Uf4cpnme9vFlvb+YdK7RdX1nmjsJi/xn/BBZCMwiSE8wGpsgt5mjf
B4/LAcuwEWNOK58jxXoV+iZHKaaf5zWnJsZH6PxRvk6crdEI+GzkH3q+Jt08
pEC/nNXlVZJXjJJTzGHcacdAvwzj5Dus7zhWw3wcLPcx5hjh22VyosjiPDnG
LBbngoguhmj883Rskca+REOOYD0WJfe4zFpkiXsWc471lQh/vUqvY8uLtI2S
L4UgaWpCDv0OlJODvpM7qqmu/ED/TggEAoFAIBC8X2AecerUKTzwwIP46Ec/
jr/5yIfwyU9fh2/dfSd27HqVO8ihY4ew+ZXNeOqZJ7B331tISUhGWnLKn32t
Lvsb9fGjh3Hv3Xfjpw89hCc3/B7f++73cM011/I15z//2c9x6NB+7Nv3Np5+
+kmeH9m7920U/4Xc6ErB4mj27PmaBdYfj7ZlRQXo6+rA2tI7NbJW+Lyk1T96
xzrF/qus516YnGQ5hMjyAjkI844AFhbmsMTWZPOaUBEsUywfCPhg0KrgtBrJ
ZWYw7R/ndXUn3SMYGzWQfzjhnbQQwwgFx8lNhjFiVvO+56zHIHMJNtfJ66H3
XJfnW80GJrlvsHlXLqcFwekpPo+KrclYJt8ITE2RP8zTGGms0RiNN4oI+URk
iRyDXGOV3IrlOdZjYdCXo22EfycSLD63iv1z2Z0oKsgX68gFAoFAIBAI3sOU
lpbgzJkzuOee+8g/Poy/+diHccMtN+Gue7+P1954HReSLuLgkYPY9PJGPPv8
H3Ds6HEkJSQhMzPjzzquvLxcbHzxBXzza1/Dr37xCzz6m9/iq1/6Mq762FW4
7fNfwLZXtiAn4xLe2v06Hvntb/Dcc8/h4sULf5V/52Y1Y1lOpJacbUAuw9T4
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
diYq0FfE/MEkRwURIJjE3W4VOmcbAv28SY4OIzsplqKsVErEd1SQkSIexwl2
MKneudGhRsFyIWQlhxMe5IO74yqsJg/VuyrUInjG7i1chYL8HTDpN+DnuQa9
YBE3+6V4OS8XzOFGYpQfMaE+JEX7E2nViWvjQVy4rEW3EBNsIMhXPA41C+7M
o15wZIi/L05rVyt5OdiJz2+mOCudnNR4wiwGwgONii2rS/LUnEPpgYQE+Crf
o66mROVhlZfksmm4h3OnjzC9fZSWxiqVhyU9D1mPLiW9ECk5B0Tyh8y/Gu5u
ZURwyrF9O/n0o5OcPr7Aof3TnDw+Lzh6kUuXTvD55+/zxRcfCwb5hJs3r4p7
/wvVB+ujj95ncKDvb/671KRJkyZNmjRp+q8o6X2MjG7ms6uXuXv3Fpc/k7lX
o+yeGRIMsonp6R6md/YxKbhjaKhGPO5mcd8og72VbBqsZXa6lz07+lnYMUBP
axF15Rls6mtibKCdcREj7p4cZ0bEhmnxYQQaPEmJDVWxptXfB6vRV8TNkVQX
FzLUKePFNlprK6gqyiU1JoJwi1HE2Z5YRCxflJ3G6Ei/iD9rKczNoCgvi9zM
tG9qv+XsDx/BDZHKv5DMUFFSqnrtyhwqySLf8oPspys5RNaWS16QNSF6L52S
PCZ9EFlfLhlG8ojMx5L8Ies+ZD6XzM3y9RIxeGwyeZn5YptIZEgEweZA9dxA
kwlvd3d00gdIDiMlPQprqIGIcBMRggE8HdfismEFJp2jeJ31gjmW4e21Gk/3
lTjavYGH63J8PFdjs+4lNqx7Bad1b6NzWItF8EawwUPIk2CjB0YPe7yd1mIU
fBIXFkSS4LWE8CDy0xLEdxdGgliT2/jQr3tiJccGUVmcTn5mLN5u61n37qus
fucldK7riQzWi2tjT3SIp2CUAIKMDni7vovJ52sO8XR6R7DBOkLNboIj/chM
CiYtLkjxh8nbXlwnb/F+JhIjLBRmxIvPEIfV4IWn7HPlZEuQwYe0mChqCvMF
O4UJzlmremWV5mXQ1VyrvJCU2HDFJDFhFvG9x5Cfm0phXjq5Wck01VewZ26K
sU39NDdUqv5Wsv5ccob0PmSenpyPLmeDyHr0vbPT4n6cYO/OcT44fZBzJ/az
fWs/05PD4t6d5OOPjnDz1gWuXb/AlSvvcfnye3z11SeCPz7/ZhbhaS3/SpMm
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
oOS/LWOjmgeiSZMmTZo0adL0H6iurg4mJie/zr366irHTh1i65YBNo10iHiv
TsSBaXS2lbFrZpiZyUHBIo2CPwrobK0Q2yLGNrWJ9SEGOxvZLGLAjb1t1JTk
MtjVzOhAl6oZH+hoZFj2tSotJikqjKykBOrKShSDzGwdE8/rITc1mXjBEYlx
0YoxlOchtjLXSu7LXKzm+hoaaiqpFBwjGUVyR3R4iGIQeZ48X9aiyx5W0eGR
ijG+nWMuPQzJF5Ih5NrXeVL+KvdKHpPeh+QO6ZN8K8kieVnZ1FfXqNwtySDS
FwkK+Dpfy93JWW2jxDE5B0T24QoMMOBsvwGdpzMBfh74edjiZrcCd9sVhBk8
KE2LJTsikEBXO0I9BFfI2eX+zgR6byBMcIav0wrc1r1BoG4DwT626OyWYRZM
khVrIiFYh8HlXcEdb+Fl86ZgkRUkhXpRkRtDTUESJemRJIX5Eu7vglXvQJC3
PbFBnmTFW8hODhW85IXd2rdY/faLKvcqLsJEZnI4EVY94UHe+Iv3c7Z546+5
VwF6G8UhkkF8XN8lzOJCapyJULOr4JEVeDmvFEyloygrjpzUKMFQTlj0LoIr
s+kV90deWhQxIUYSI8yqZj4rMYq81FhiBH8kRYVSWZSjel55Odti8nFnpLed
qS0jKkcvKtQivktf4qJDqa4spLpC3g+ZNNYJDhX3U0dLrfI9ulrr1XwYyR/S
/5C9sGRO1viWYfbOTXL+xH7eP32Ao4u7OH1sgaOCQfbtmeDMiQUuXTyhZoDc
unGRO7cvc+P6JW5c+1RsL/+1D9bc3E46O9v/5r9TTZo0adKkSZOm/yrq6u5k
YnqKW2ry2h1u3v2K06cOMNjfRG11Ns0N+fR1V7N9Wy/7946zc3pYxH7lNNYW
0t5czraxXhEH1lItmKOjoYaclHgRnxpIjY1QkvMf+jua6Wtvoa2umu7mRhor
y8V5SarmfHN/r3hcRrZgksSYKMUT0teQfJGTkUpNRanyQKQXIj2Qno5W+rs7
xGdopLy4QMX80g+Rfol8LFlE1mnIGR3S75C8IJnjW7/jW/6QPCG9DKlvj0mW
kNwh92Vulruzi/I1+rt7aG1sUjwia0TUTHRxjpuTk5KcOxgZEky6+BvCgy24
Otng6S5ry53w97QjOlAnOMCHcIMbUX5uRPu6E6FzJkocjza6YhVxv0HE8gaX
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
6GbqSksJF2wRFRpOfmYu7U3t7JicYXpqmvq6OqIjowgPDSMyPIJkwROJ8Qkk
JSZSlJ+veCIvK5NiwTNSORnp5GZmUFFSTElBPpGhcm55oIhNEwWfNAoO6qIw
N4eUhHiy01KpKi+jtraG9IwMQkJCMJlMGARrGI3Gv8r0LX98wxqSP3wFf8h9
X71e7Vv85aw+K54uHrg6OmLQ6/DVuePj5UJkiIns9DjBUN44O6zGx91GxM4r
VHxucFpOXrQv7UUxdJfF01YYRmNmIG05VjZWxjLRkMx0QwrzLans7Uxnb3cG
+wcKODAs+GOwhLmeQjbVJpIrOEG/7jk2vPoQbz39IM88+lv+9MAvWXLfT3jg
F9/h0Xt/wB9//xNeevI+Qgx2DDbmcHxnL6d39zIpeKazLJSJrmwuHNzI0e0t
nJnt4ex8N6MtaTTlBpMT4Y7J8TW81jyL55pnsLguFbzzAqsE17isfB6L+yqs
unUYnJejd1yOu2AQ2+UvYLPiRdzt3sbLcYVSiL+LUqCvg+KSvNRQDF5rSYjU
09NaREttFnHhekw+doSaXMlKCqatoYihnlrqKwVjJFgxG1zw9ZS84kF0sD+J
kUHiesp+xw6sX72MAIMnwRYDJsF/eZmpgndLiQ4LIT8rRfW5OnZwQdV9yDys
xT07OXpgN4f2znHiyF4OL+4Q/LGRxYVJVfshfZAdk+I+HR9UOVgfCO44emCS
Y4dnuPHVB9y4/jFXL5/n6tUP+Oqrj7l15wo3b1/n4OEjmv+hSZMmTZo0adL0
/1FDG4f59MvP+fLWTaYXdjI0Nsj7n5zjYxF37T+yg7GJHvbs28qHHx9g+1Q3
ra2FNNbl0NtVxczkABNjvfR21ov4v4qU+CiVs19dUsDYQB9z2yfEdoDBzi7q
KipFHJlEbGQMpUUltLe2Uy7YpKKsnNLiEhLi4omLiVUsEhMVTZlYqyguIjM1
RcT3aYpDJFfI2RqSQySPSBaRHNIoGKOno526qkq1Js8JMMj5HkHExsaQmpZG
Tk4O4eHheHt7K99DSvGHYJIAf8Elvn6CQ4yKN2T+1bc8YpR16eKYydeo+mFt
WLMKu/Wr8XJxwMPZltS4MHpbq8lIDMfXyx4/wR9655VEGJwoSw6ktzyRXsEe
HQURtGUF05FrZaAkgo1lkWypjGKiOoZdjUkstKcI/sgU7FHCgY3lLAj+mOnM
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
8swfH+Lpxx/kz0vuF9vf88wTD/DUY4JLlvxOcMqveP2pR0kL9maX4I9jW7s4
OdHF7r5KtjVks3ugksm2PCZas+kqDqcwUry/93IKo/xIs7hicVyOxW0NZrd1
2L7zIrbLX8HmnZexX/s6CbEminJjyUixEhHsia9uAw4b3mTdqpcJDfIkNdqf
+FA9VoMTyVH+lOXGKQaR/XkHOyrJFszmr3MgKdpChFVPlNWXwsw44sL90buu
x8/dFk+ntUSH+jPS00R7Qxk5abJ2JIXCrFQaqsQ9VF4o2DRX9eGVnCH5Y3S4
XzHI2MZB5YHI/tDTW4c5tDAjGGSWI/t2sGNihH1zWzm0d5KTh2c5Ln2PQ9Oc
O7aLE4JDrnxyiutfXuSTT85y5fOPuX3nS8Ee17lx4wvxu5gSDK/NAdGkSZMm
TZo0afr3qrOzS8RU17h+/RrDQ11UVWUwsa2VuckWTh/ZyoenpzlzdAsL873M
TLUyPd3M5o3lnDy+ndMnZ1jYPczuuWFxrI9tYx3snh2lpaFEMUhFSTb11cX0
97RQU1NKcmocKanxpGUkk5qeRF1DjWCQclISk5Xv0d3VTXlpGfm5eaQmp5D8
zXpvZ4dgilQRxwaRm5kuXrNK1XvIPCzJHI014nWKiv7a+0rmZSXHx6ncrKAA
E2bBGyHBVpV3ZTabVZ8rg+CMAFOA4g1zgFkdk7MIrUHS//AnNDiI4OBAfPQ6
vLzccXN1xEXIR++FySjYxcMNvZMdVi8XLC42RBvcqEoXDJGXSFVaOBVJFmrS
TNSn+1GboqMu0YuqaHdqoj1pyQxmsDKZ5pwwMoN1mJ1XseaVP/PsQ7/lvh9+
h3u++4/87Hv/i5985//he//w3/nBP/53fiz2f/Xjf+HXP/kOv/7xP/Pwvffw
5EMP8+KTT/Das0/x3JOPCc54kCcf/Z3Q7xVvPLnkXp545F6efOQ+/vTIb9X2
+cfvZ8Vzjwq28OOwzJ0bqlPs8d6uQT7eu5GDow3sGapgtr+U8dYsKhMNxOg3
YHFYSoRuHaHeGzC5rsbfdS1mLzuiLd7ECJ6pKBIM1VxMhGANySM2q17ByeYt
LAZHIsXfKGtDOuoLqC1JFawRTE1ximKQ8rx4WmtyqSlNIynKTIR4vWCTJxGB
3uSlRZEvvlPpfxg8bQkP1InrGkxmcgQx4QGEBckcrTAKspMFf6aI9XhVi15d
Xsz8jmm2COZorquiu62RvXPTqgZk7+wUZ47t58D8FLu2b+Lgnim2jnTQ31XD
5JYexR7vn9zNpfP7OCPY49C+bVz44AjXvviQ6zcucvPOZ0JXuHP7c8EfXzI2
tplurQeWJk2aNGnSpEnTv1sdHR0s7D3M7Zu32CT4o7Eui9OCLb68uIcPT41z
aO8g75+aYH6mjdGRMvp68tixo5XDBzYxOdFKf28ZPV0l7N29WbDHJvHcefE6
LXS0yJz7Pnq7mxjoa6WhoZKO9kYGBiTjlFBQkE1ZWaFgjwRVU95QW0NZSbGa
1VGYl6/mgCTExFFZWsnmoSF6Ozopys0nI0mwS3wCWSmplBbI2XNVIt6sEMdy
yRFsUltZofwP2fNK1n4EW+TMDl+ssvZc8IXMw/L7JtcqSNabG014e+pUvlVo
cDAJCbGEhsjZIL4EBPgRFGzCZPbFWTCGjd1aXN1c0Lm7CPZwwNd+A/72a0k2
ewvmiKA2M5qa9AjqMsNpEIxRmWygLM6TsngPSqI8qEky0JoRTF1aCFF6G5Y/
8zCP/OxfuOdfBFt8/x/47b/+bx7+9b9yzw/+iV/99Hv88cH7+MWPvsv3/vF/
8JPv/hP/9D/+Gw/c+zMe+8NvuOdH3+MX3/8+v7vnZ8r/eP7Pj/PsHx9W7PHE
w7/9mjeW3Kf01JLfCzZ5gGf++ACvP7uEd/7yKOtffYLWvGjOzw5zbHsXB8ea
2D/WyOFtLUx1FnBgrJ4PF8T3XhpLpG410d7ryArzIkLwh4/tUgK9bEgM9aOl
PIui9EjiIvSCH4xEh3jj722Du8M7Ys2PwqwoMhKDBH8EkJMcQk9zCSXZMYIz
PEiMMBAW4EZGvIXxkVYGOqoFy+iJDJT1HX6kxgaSkRAsztUR6OdMcqyZWMEx
vjpbYiPN4vqaiIsMISstSbBpALHhsrdzBq31deyfn2PTYC+bB/vUTPSjB3cz
u0Nw9Ox25qY209lUQUdDOdvHepna2sfOiQEWdo3ynmCPg/NjLM6OcPbIDj79
6BCfXzrBjWsfceu2nP1xiS/VPJDL3Llzk33792r+hyZNmjRp0qRJ079T8v9t
O0Rc/+GHn8Dd25w4toeFPRu5/NkBbnx5mJMHRzi2OMzlj+fZO9vF+GgVQz35
zE23sGuqhZHBcno786ipTBSxXg0bB2qZmeilvbGI7rYKtmzsEDxRTGtTJXVV
RWo23OS2TVSXFQl2yGGkr5uxkT4aqkvU/GqLUU9CVCS5qWmkxMaTGBVHXka2
OLeIhqpq+jq6aKqpo7y4mJT4eJJi48hITSVbzVgv/2s9uuyPJeeBpH7DNlZz
AAY5P9AUQKDZovKpZL+r0OAQLAFm5YGo/lY+eowGP+LjYoiJihD7PhjFZwqy
mtDpXLC1XYOD3QYcN6zB22EDRicbon3dqUwKpzEvnurMSBqzo2jODqE21UJZ
gh/FMTrKEv1oyAmjMsVKuM6GNS//iYd+IbjjO/+TH//Df+Oe7/8T7rar0Ls7
4mizlmf//BhPLHmQ1e8uVdun/rSEV158lp/95Pu89cbLLF/2Br/++U/44b/8
Ez/94b/wyO/v5enHHxZ88TDPPfmI0tOCNZ59/AH+8scH+ctTj/D800t44akl
LH3xz6x/41nxGR7H6rqSo1O9cO0cX5yb5+zujSxsqmdhcx2fHt7KJwc2M9Ge
R1tBJDVpgSQGOBLktkpw1zI8bd/C1+ldAr1tMXquw9VuGY7r3yDU7KZ4IybU
h/SEQIqyBZOVpCrWkJK+h8y/kr15g/wcMYnvI9joTLZgk7qyTOrLM2iqyiE+
wkhIgDv5GVGqP6/V6IJBJ9jHax068X45GTEU56cSE2klPTlR+VyBRiMttXV0
NDXRUldDcZ64xwa62b1zu7jvhlncOyO2Q/S1VQtGKWbrxk5OHdnF2eO7ufj+
IY4dmGJ2elDc6xuZn+xi364hLn0ofgufn+GrL97nk0unuPDJab649jG3b10B
bvL++XP0dP/tf8uaNGnSpEmTJk1/D+oW2r13gVt3b3D184+Z3z3GnoVNnD27
k7Mnxtm1vUnpvZPb2D/XzfbRama21nNoTy8Tm6vo6ypg01A5U+Mt7NzexebB
Wga7K2lvkLFdB20NJVSV5tLdXk9PeyPtTTWqL+rmoT6VFzPY3cHUtlGVo1+Q
nU667NObJuJTwQy56emU5hcI/shUvXbjY6IE50jeaae5vk7VfORmZQr+SBHH
ohV7yN5Xshbd4m9UvoesP5d9e2WdiNn/6/ke5m96XEkvJCIsXG0li0gF+Afg
4e6Gt84Tg683cbGRhIdbWbN6BXY2q/HycETv4YTtyrdxWfU2Vnd7SuPDaMqJ
oyYjjPJUK7XpQdQmGSlPMFAS50tFcgA12REUxFtwWvEq9/30f3PPd/+Xmhv4
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
CRMmoq+vz8IFi5g4cZLwk+VYWloxffpM4R8dmD13BiamhgwbPog+vXUYPnyA
7CB9e3ail057hgj/GdS3C6MG9cBo1VKcLA3xVpkIXzAg0HU9cQHGlKQL98gN
oFJw+Xglr1+c5+PvV7ncto3zx4p4eHUnV/fn87Ctiicna7h9sJjW2iTqc4Kp
lmadZ0cRG+CO2sIQa6NV2JmsZ7Nwkc0bdXG03YyttSEBAa4U5sUT6O+EvY2B
cEUvisRxUrSWpCg/4SCO+LhaCv+wk3th+btZEhngIu4zT3xdzfF0NqUwPZKs
xEDhHT7CSd2IFp9DQpQWPzcnrIw34WBuLnxOvJaXD6nxcWwtzMPPQ0OwvzdN
O7dz88p5zp86yvbqYhp3ldN2rImzp1qEH+8VrtLK5XOHhE83cf/mSc4d38PR
lhquXjrEDeEmt8S5p09u8OrVd/zxx3PevP2Zd+9+5eOH32hublLqzxUUFBQU
FBQU/i+Q1kwnzp7gp1+e89OPT/j+8U153vPtc/s40pBDa3Mpj24d4+CeIi6f
buDSqV2cb6vjyL5S9tRlsq0wit31xezZUUpeRpRY84VQnJ3CLqmGvKqcAw27
2JqfTU5GDFuLMkiIDhLrRrHO3frnPLjtlWUcP3SAHdWV5GekUb2tlIrSAgql
GdbpsWSmRpObGUdtRR7llUUUleawTWzLK4sJiwjA09uF6LgwUtLjyCsQrx8X
TVhwoBzvkOo+PDSSazjjJdagGrVKOIaz7B8SUrxDcg/JQezE+l/KxZLjIK5q
XFycsDAX/mFhKsc/bIwMcDDcgO3aVYQ5OVASFUhFnPAPsW4uFevgwiAn8oNU
wj8cKY31IcbHntnjh9Llk78wcdgADPV0WbVkCdMmTKFPtz4M7DmQKWOnsF5/
HaZGpqxYtoKlS5Yya+YMFiyYx3LdJYwYNYSx48aL46+ZNWuucJDVzJgxWzAL
Y2NT+Vy//gNYu34VPj5uwj8G8tknf2PYsP4Ml2pNOnxC106fYrRxBW5qK3kW
yNxp49DYmhDp50hcoD2p4Q7kxKmoKQhmR2kUeyrjaaqK58KRUt78eIY752pp
2ZHIrdOVPDhVzZMztTw4Uc315iJ2ZQewvyye5m3p1Bcnkx7hj6edKSqzDZit
XY6FoT5hWmnt74KpyWoC/NSkJ4fj7+Mo4+dhJ9zOAK3YpscFybMGvYR/RAW5
4KexwMvZhG35cbS11BIXqhHHZgR72wlfsyTIx5YAb1vcnMxwtpXytowx3bAe
b/GZxgaFobFXCV9xJjMhnszkeMpL8jl8oInb1y9w+GATOcJXWw7s4Pr1M5w5
fZCzgqePrnH72kl5/sd3Dy5x7fwhLp89KJ5zgts3zvD44RWe/XBXOMdPfPjw
Up4B8u79z8Bv3L93g9paxT8UFBQUFBQUFP5PVIs108lzbbx9/ztv3/zC29++
5/mji2I9GcvWNF8ONuRz4nANzbsKONtaz/GWSm5dahEuskc4SBm763I5J9Zr
F04Lh6gpEg4ST7yUG5WSQPXWYnHdSQqz04mNDCQ2KpiwED+CA7zJykgiLyed
/NxMsc0gPTWW0qJMSoSj5OckCVfJZGfdVnbWl1Et3KOkMIWc3FTypN5ZNWXs
3FlLaVkB8QmRcvxDqkuX5qpr/b2JigyVtxrhEP6+XnKtukbjjJvGSeAqu4fk
GtL8QRsra3nmoLQv1YPIva/UzvK8c1tbSyzNNmNjvIkta/UxWLwAleFa0sVr
V8WFC/fQUhriQVGQmlx/sY7XOlAc50NOpAd6cyfRq8PfmTJyAJtX62Kov4KZ
kycxcvAwenfuxeC+Q5g1dRZLFy5l5lczmTV9JgYbNmJkaICpqTG6K5YxbMRg
Zs6cxbJluujqrmTNmnUsX76ClSv1mTdvAQP6D2LK1K+wsrHExU3F0OED+OzT
/2D0qKGMHzOUbp0/F/7xGbO+Go/ppjVMmzySYf27obIwIibQVTiIDWlRTuQl
uVCW6cvOrZEcrE+lrjiE0nRP7l/exc+PDnPleClX27Zyq7WMb8/X8eh0rZyL
1VwUTlm8B6nCvWrzEihLi8HXwQIXcyOCNA74CueJDvEiLswHJ9vNuItjXw97
0hNDSI4JwN5COJ2FIS52JqhtjXG0NMTZxkiuBQn2thEOYSi8xI/tZcJFkwIJ
8LDCQ7VZXLcGF/GY1sNajplEaN0J8XbD3d4erZsHUdpgfJyFd9rbkRIt9fIt
5f6t69y5eZm21hbOnm3l4iXhFLcucP/+Ne7evsD1q6f45s4Fblxu49rFY9y/
fZYLp/YLWuT8rNs3Tgs/v88fv/3Am9fPhYP8zEd+5eNHaQb6T/DxNXfuXqe6
WnEQBQUFBQUFBYX/HVLO+t27t3j7VvjH7y/5+dlD7lxtE25RxaHdpRzaU07N
1nQqi1OpKkmnoSaf/Q1l1JVnUy9RmcvJ43vlvx+fPrGf40f3kiFcIjcriYLc
NGoqSkhPjhO+kUxCfBQZaUlkiv3QEC2eHi7ERIcRHhZIeKg/VRX5wjXyiY7w
Jz42WDw/Rc6Tad5Ty56GKqoqS//MscpMltlaVkhRca7wknThIVFyfyypFkTq
j+UmfCMwwJfIiBC5R5abmxqVow1WlhbY2dgJ/3D6r9wrKQ5iZWEpx0DUKmec
1CrsxdrV3HSz3JvKztQIi3X6mKxYTKDKmq3xEVTFiDV6iA+FAa4UBDqTq1WR
G+pCaXIQjlv0GNjzM8YO7YPVZmm2hYpN61YxftQIBvTuy4Ce/Rk5ZDTTJ81g
yrjJjB85jvmz5rHF1Aw7W1vWr1snz/mYNWe6nHu1cOHXcrzD0HATGzYYsHTp
coYMGUZ3nR5Mnz4DYxNx3mA9PXvp0L9fL76cOoGBA3rSpeNndPji73Tv+DkD
+3VjyAAddDp+wrL50wj3dyYnSUt2ggcZcSryE12pzPZnR3EYTRVRlKRqONKQ
zOtnJ3hwuZ4zLbncPVXF/ZPV3DtRyZOz2zlUHktRhAspWkeKE4IoSYrAx3YL
7lbGZAjf1LraEeSpIisxTPiCCUYbl2O3ZQN5KVGkRQcR6e9GvnAWrYcDRmuW
YrxOFzMDPbzUZiRHeRLoaYW/mwUJ4e6kxngTH6ohOzmQzAR/4RwqORYS5q8W
19jjYmOOo5kZVkab0Ng6EiA8JMTLm/L8PI7s2cNjcY9fOn+SA/sbuHL1DA+f
3OL77+9z/vxxWlv3c+7cMU62Nct5WFKs4/snN+Xe0RdOHuLBncvcu32Rbx/d
4MXz+7z69Slv3rzgdzkH6xnv3v4gXOSVXId+rLWVqqrKf/n3WkFBQUFBQUHh
3xUp/+rU8Tbev33HB+Egr37+jl9/fMjvLx/z5N4Fzp/Yy4lDuzi8dzs7KvNp
rC1iW0Eyu7eXsE/qG5SXTEuz5DElnDl5QJ4tnZ+TQp4gUOuBr5eLcIsA2Quk
/lURYUGkpyUSFRmCj7cb2dmpspf4ersQFuxFVnos8THBBAd4oPVxISLUj7Sk
KArE65VuzaO6ZhupaQlyvXluXoY4V0CF8JL0zCTxukmUlAh/iQrDXfhGYkIM
Odnp8nFQoK/wHWnmuUp4h4PsGlIcRJo9KMc8hIdIMRA7a1usra1wdBRrWidH
LE2MsNq0DhO9JagMV5Ml3k9FcgQVwpHKgjwpClCT42tHtpR3lRRAhI8dE8f2
Qaf7J6xasZAgP3f8xc9pbLiBqRPGM3roSOEeIxk2cBjjRk5g4ZyFLF+8jGmT
v+LrRYuEH1miq7uc5cuXsGr1Cr788kvhIJNZtWqN7B9r166XYx9SLpZ0PHfu
fEaPGc3oUaNp376d8I8+TJwwhtEjBqPTpT0dPv+EgX170LtHJ0FHOrf7OyMH
9UJts4ls8X7zUn2FA3hSmuHN1nRPqnL9ZP+oKwpge5GW72/u4fndvZw/nMe9
89t5fHEHTy/s4FvhH8drkjhYlsiO3GiK4gJICRSfmYMl/oJILzUR3mrZMeLC
vGX/8NLY4OdqS0FSNNX5GUT4aggR12jdHIQrSLPQTTDesBJXB0PS432JDXEh
OsiZ4uwISrIjyRHukZMSKFzEC08nYyw36WJhtBKzjXrYbN6Iq5UVKjNz/NVu
pIWLzz4ukbLsbKoKC9i/aweNO6ppbm7g8OF9HD4q3OLSSZr3N7JzZ5U4t4cz
Zw5x8dwRHn5ziZ+efcMlsX/rymlePn/Md49vc+vaWeEmZ+X681evnvLsx/v8
9vt3fPz4QiDlYb0TXvKW2hqlDl1BQUFBQUFB4X9HVUU51y5f4t0fv/Lx3S+8
+ukxj7+5yIVTzbTsLufGhaPcvXqCg3uqOHm4gVNHGrlwopnmXduo25ZNU2M5
ZaWZtOyvZ9eObbJDpCRGiW0CmanxFOZlkpWVKntHYkI0WZkpcgxka2kBO+qr
KSrMITE+goSYEFKFa8REBuIv3MNTrEtdnW1Qq6zw8RTrWXE+OFQr151rA7xJ
TIqR+19J/iHlZcXFRZKWkij35JXcQyI5KU6OgYQJB5LiIYEB/vh4eQkPcZbr
z6U8LGkr9cNSOaiwtbLFxsYaBwcbnOytsDEzwmStLuZrlhKgMqM4Rkt5QhDl
YV6Uh7hTqHUi09uW7FA1WVGerF85h84d/0a37u2YOXMK5ls24+aqwtR4E3Nm
zWLmVzOYM2MOX02axqwvZ7F25VoM125k8vhJzJw+A0tzC9atW4ue3gp57vm4
ceMYMEDKw5qNkdFm5syZJ+dj+fsHEBMdJ8dFevTqSTvhHj10dOjXtw8D+/dl
7qzpjBg8kPaf/kMc92TAwB7o6HSka8fP6NnlC/QXzyIlWup3FSnW9v5sy/Kl
Ns+PusIA9lVFcaAmjpIUFy4ezufV44M8urydO2ereXRpJz/d3MurOy38eKWJ
C7sL2V0gro3VEi8cItLdiTBXB/yEg7haGBGgsSMx3E+OcQT7qfF3sSM1REt6
RCBqi01ohHOkiM+1ojCTYG/xGdiYEBPqRmFmGGmxXkQHOxMb5kKgpyW+GlM8
nDahtl2HnZk+FobLcNyyHh9xj2hdVARK/c3E5+du40CsfxAFicmkRUUTEyic
JTaayvJiLl8+w6XLp8U9U0h5RQHnL5zkm2+ucOPGOe7evcgD4R6PHlzlyaOr
XL/Uxpm2A9y6flZwhmsX27hx5STfPr7Oq5dP+O3X73j7+kc+SHMIP74U/vEH
7969plaZQ6igoKCgoKCg8L+lurqSA/v28lb4Bx9+54cnt9hdX0pGYhApMf7k
pkZSIc1H2FnG7cvHeXDzDOfb9nG4qVr4SSWn25o5dmQ3dbXF5OUkUltVxK76
SpntVVtpaqiTXaOsrIiK8hLZN/JyM6iuKqNcHEuPVVeUUL41X/aWhNgwmbBg
X/y8NTKebsITnO1x91Dj4+tOWHigHAcJDQsgOMRfrgGRcrCkWSDSXJCMdCnf
K5oArY9cCyLty7le4SH4+/nJcwb/dA5HGakGRMLa0potZqbCA8ywNTcR69xN
2Biuxtl0LUn+TlQkB7M11keu+SiWYh8+duRoVZQlBuDvbMqowTp07fw5/Qb0
luvHFy6ax2ZjQ9avX8eSxYtZungpXy9czKxpc/hywldMm/gVa3RXoa+rh/5K
PcxMTNDXX8ks4Q+TJo9n+vTpcrxDqvuwtbWXPWTCxMls3GiIq4sb9sKZRo8Z
y2eff8GYMWOYMH48PXv0YPiQQQzs05Mu7T+nR5cO9OnTnR49uoj31o7O7f7B
xNEDCfZ1oCQvlOIc4VTZPlTl+LC9QEvj1lAO70iiKMmJvZXh/PKkhXfP2/jh
1l5unqzk4dk63j46zsvrzbRWp7GvWFwbrSXa3ZEARyvhadb4OphjsmoJG3UX
4GhugJuDGXaWG/F3tSPKy41gVydiA7yoKsiiQrhjZKAnAR7OZCVHsqsqm4L0
IHxdTbDfooe54deYGyzC1W49fq6mBHtZESO8z9/ZHBdLA1ysN2FrvAEDveUY
rdZH42BPQmQ4RTmZhAeL+yQplmOH9/Lo0U1+ePYNp04foHZ7AfsP1NF2skX4
SBtPntzgypUTNB/YweFDDVw8d5TzZw/R0lzH+dOHeHTvMt8+vMaL77/hd8k7
/njOhzc/8fH9z7x/+0I4yC/CP95y9epFJf9KQUFBQUFBQeH/QFVlBdevXOHj
hze8/f0n3om11XePr9G0s5TaskyKsuIoy0+i9UA9R/bVsnt7sRz/kHzkQGMF
N64cp7GhnMS4IOKjA2k90sTpE4dknyguyBRuUUrZ1kJKS4RfJMfJMZBksSYs
yM8iLU2aZ+5HTFQomekJRIT6C/eIoKKsUI6f+Pu4ERLgTZC/J57CPaJjwoiL
jyQkVIufOOfi6oirRvVnX974KDTSjHI3F4IC/eS4h1QLIm3z87IpKS4gLTVJ
zrmS3EPqwSttpbwrKe4gzQKxsrTC2HAjNuamONqYY7l5A5YbV+BuvYHcKC9q
0oIpCncl29+OLD8bUr2tyAt1ZWuCli2rF9Gt/d/pqdOFIcOHMHnaZOYsnMPE
KRMZPXYM84VHmJtZoLdCn8GDhjCw72DGjxiP/jI9LE0tcBIuYWNtJa6by4wZ
wkvW6GFhaSF7x+pVa1mpp8/MWXPortOTjp26sEh4jNpFwzS5D29H5s+fz7Kl
S+ndsyedO7RnUJ9eDOjVk+6dO9C9e0d69e5G106f84+//oV+PdqjstlAQVaQ
+Hz9KUlxoyTZheosLxqKAmlrSKUy3Z3abE+eP9gvltbXePW0lbvnqrnRWsI3
J7ZxcV82F/YWcKgyXfhXEFlhXkS62RGosiRYbYfFupWsX74AN/stxIX6kCrF
jQpSKUgVn1WoLzFBXtRuzRFkkRKrpTg3jqqSJCoK4ogLdkG1ZbWMp8Mm/F22
4Om4GY3NRnycTIn0UeHjaMaWdUuwMtLHxmwjG1Yvx9bSVNyHkRTkZVG+rZjU
1ATy8jI5Ie7HGzfOcvRYI/uaq4SD7OP0mRZ27NrGduHaJ08d4PSpg+zeXcXu
xkraWvdy6sR+jhzcxcWzR3jy4Jrwj+v8+tNj3r3+UXaQP159/6d7vPuZt2//
zL86f/608I+Kf/l3WkFBQUFBQUHh35ldO3fw6qefxPLpNW9++5G3Uo+f355y
8VQzV8Qa7cGNM1w+1cLhvTXsqi6gSazXjrfsYHdtEacON9B2dDc5wlE83O0I
8HOlec92mpvqyMlMIjcrhSLhGRnpSXKduZenKwFab6KFb0jnpK10zs/Xg+iI
YMJD/OVtmXCVnMwUtOJ8TGQI8THhREYGkyDFRxKjZaQaEE9v4RHuzoRFBMpx
EHd3NS7OjjjYW8tz+qQ6dKkWJCI8SM77SoiLIVCrRevnj6e7h+wfUu2HVH9u
ZmKGlbklTva2uDrZ42i1Re5dZbx6McEu5lSkBlOVHCD8Qy2cw5mMQOEgQfbC
PXyI87JhztiBdPnsb/TR6c7QYUMZMWEsg0cOY+DQIYweN5bFS5ZiY2PHvLkL
6NShM+NHT2DF4hVy7bn+cj2cHZ3F78KTDevXMXfuLDZtNsDJWaqPd5HzrKT+
V6tXrWHI4KF079aDFctXYrDRiN69+9FevN7iJcuZv2ARHTp2pkuX7owbM45h
Q4ej07073bp0FM/pLPa7CDrTudMn6C+dSUF6KLUlsWzN8qAix526Yn92FWo5
VhPP7rwAKlM03DlRycdfLvPhp9O8fnqA5zd3cL01n/P7s7hwIJ/6nFCKY7xl
BymKDyTWRy1wI0z6LMxNcLXeQoi3CwmRfmQlhYl/M5YQXzXWpmvk2pCCzGiC
fezx97QmTOtIoLuleM4G7DavxNN+EwkhGhJDpP5WRths0hUOYkCQxgZ/Zwtx
nQGh3k5ECpdxF87j5eZEWLA/sdHhchwsNDiAKHHfpKXFkZAQSkVlLm0nhFuc
bubilVYePL7B/UfXOCZ8Y+/eWs6dPcy5M4c43LKTU23N8ozCC2cOy3lXVy8e
5/H9q7x8/kD2kDe/P+PDmxe8fyec/c1PcvzjxxffU1tb/S//TisoKCgoKCgo
/LtSVVnJrRs34OMH+e+3H9/+Cu9/4dHdi+yuK+LGxSP89N1tue6joaaQM8f2
yLEPqQbk4c0zfHv3Ao07tlKxLYesjBhBLI315dTXlFFanM224lyKC7Lk+Ibs
Bi6OeArfiI4KIS01Qa4Ll/pS2dta4CPOJyVEEyuujQ4PJsjfG293V4LFNdJx
fFwkYZGBRIrnJojrpHyrkDAtAYE+ePlo0Lg7idd2Ed6hwt7OCieVvbw132KM
na0lzs72qJ0c5DmDvt6++Hh5y/M+pK3kIeZmW7DYYo6HmwY38T6tzAwxXrcC
O2N9sqO8aCpJoC4jiPI4N7bFe1AS7Sr3n61ND8ZVrJX7d/yUz//2V3p37cyI
IUMYPmokY8aNY9as2cydP5eFixayfv16luvqMmnSJEaPGMX4MeMYPXIUXy9c
hLnpFrkWRXp/K3VXsmDefFatXIWhgZH4ORzEYy4sE47Rv+8Ahg4ehu6yFSxf
qiv8oz/9Bw5l2vTZ9BT7//H3z9Hp0Zehw8fQp/9g4SJS3KMj7b74lEGDBrBM
dynjxw1n2pThYv3vRmNlGttyfSnL0rCrREtDoT8tZRHsLwmjKMqeY7WJvP3u
BLw8xYfnR/jj2wP88qCJJxdrObU7k535YcI9fKhOC6VaeGikhyMeFsaEaNS4
WVlgskYf47UrsTXdiKeTFRp7M0w2rsBkgy6+wiM8nc3ZqD8f4w2L8XE1IzrQ
mSB3KznWodWYkxjqRna8lhhxXoqFSLNLov2c8XEwxVtlRrCXIwHuKpztLLCz
MkWjdhDeoZX7MCclxFJSnMeOHVU0NlRy/Phe2k7u5cSJJuEe13gs7u0bt85y
+uwhTgnHvilc+8a1Uxw/spuTR5q4dPYIVy+1ceVCK5fOHeX+nYv88uKR8PMf
5PjHm9+f80H4x/v3L+UevB/F/8379imz0BUUFBQUFBQU/hdUV1Vx8cIl3r9+
y8sXP/L61Uu5/uPtqx84fnAXu2rzuXz6AHekvPhd5XLfq/qKXGq2Zsq9eCUH
Odq8neLCZHbtKKN+ezG76spo3ltHbWUxRQUZVJQVUFtdJnuFr68HwUFSDbiP
XH9eVbGVpMQYPISXqFQ2eLmp8RZonB1wsrfB2twESzNpBqAZWl9P2WEk15Di
INL6UnqdyIhgIoSbBGoll1DJ7uEkHEPt7Cj3u3J1UeHoYIODeD0ba0vhIdbY
ybUetnK+ldQHS4p/SD2wpDwsyUG8PNzR+nkK/zBg05pluNsaU54u1uPbUmjK
j6Q+1ZfaRHe2J3myKyuY8nh/Ns6fSpe//5V//OUvdP70E/p27caQgYOZNHES
E8dL/XAH0LdPH3E8gfVr12JjY4PeipWMHztOrjtfv3YdVhYWcj28xRYLln69
hK+mTGXh/IVsWLdRdo05s+aKa2fJ7iHFT2ZOm4nlFku5Jn3g4OH0Eu7xj0++
4PPPO9Jdpw89e/Wjc9eetG/fiS4dO9JZOEj//n2Zv2AOE4R/DBvYDTcHI8rz
oijP8WdruoatKS6UJ7nQXBzCoW2R5IVYsq8khDfft8EvZ/j5biNPL1fz7aVK
vr+ynQdnq2ipjKM+O5CDFWlUpESiMlqD2crF+NoJr9y0iTVff83qxQtYNnca
VpvXEh3khbP1ZgzXLMbFbrM8fzA8QC3PE0yOFp5Xm8e2nBh8nU1xtzMkPtiV
3MRAAt0sxbEB8UGuxPg74+toRoDGGm8nCxzNjfDzcCZc6k0g7rPQIH9SkuOp
ralg544aSkvzqKoqoKVlB8fbmth/oIb6xm2U1RZSWVdCi/Dr6zdO8+j+Va5e
PEZzYyVN9RUcO9gox0BuXTvNvdsXeHBX6o11X3xfHvH8u7v8/utT8Z15yfsP
v/Dhw2/C4T9w4nib8I9//fdbQUFBQUFBQeHfie21NRw6cIh3797zy4ufOd3W
xo3L58Wa6j63JN9oKOfqhUPcu3FSrjFvEOu0/Y3lcv5VRrxY8we6Ul6YKlOQ
J1yiqpjKikLKy6Q683zS0+IJCfYVnpFAaUmeXNMRFxVObGQo/j4exESEUpyf
Q3lpEcUFuRTkZJCZmvhnnCMmXM65CvDzwsfzz/rzEOEaQVofAny9CA3wJ9DX
G19PN/w8PfD1cMNV5YCDjSVqlaNwDmnWoIvwDzfhNhp8vD3lvlfe3h64qp1l
35C8Q5q3IfmGtP/PGhBzM3M0Lmq8hBM52W3B1nQ9gRpbarJj2Ls1maaiWHZm
hVCd4CE8xId9RTGkaVXMGzOAPu3/zoCunRjcowf9uuvQp2cvxowazfRp02QH
6denL31792H6V9Mw3rQZa0sr1q5ew9zZc5j25VcsX7oMMxNTjAwMWbRgoXCT
sfL1w4YMF49Plx1Eqh+Z/tUMPv3HZ4wYNlJc9zXDh4+iXYcudOrcnS5dewh0
0OnRR0Y61tHpJb+Xnjrd6du3N0OHDaZnj8700fkCG1N9ynMj2ZblT368EwWx
jmxLULM7N4ADJWEUhFtRlarm2Y2dfPixjaeXqrjXVsjNozk8OLeVZ9d30FIe
yc5cLed2F1AaH4DJ8nn4WJtRm5NFrI8PFsK3rA03smX9alSWxsSG+qBxMMNw
9WLMjfTk+Eewj/j8rNZhs0UfN3tDnMxWYb5hMfYmenK8IzncAx8nE1ys1sse
EuHlQLBwj2h/NVqNjew1Wk8XstMS8RAeuslwHfb2VnJP5u3bK8nPTycrK576
+lJOnWrm0KF6aneWUCocu2pnKQcO7+LosT1yD7cjB3ZyWDj04aZ6jrY0cOzw
bjn+8d3jm7J7/Pj9Nzz9z/23vz/jo/APaR76h/ev5Bji9evX2LVrx7/8O66g
oKCgoKCg8G/F9lounbuE9N+9b25TV1vO3j3VXL54mH1N5WwtTubowR2cPNpA
ZnIQkUGu7KrJZ3d9CYlRviRE+VFfmU9laSZZ6YkkC3dI/s8acKnvbVRUGP7+
XuJcjHCQJHIy0ijMySY0UIuTvR2ewg9iwkOFj0QQFhQo+0hIgB9eGjXRESHk
ZaeTn5Uunpcqe0lyXAyJsdEy8VGR4jhW3gb6+sivpXFS4eYsvMNVLfuHi9pJ
Rtr39vIQLhRIUJBW9hFXFxd55qCDnb3sHpIHSHlXUg2IjbW12DfFcP0qTIzW
YGduRKiXWJOnR7IjP466rDC2xnlTGO5MTbIvjflRaO0NmNivC8N1OjJr4ljm
TJnMzMlTmDV9BjOEayz7ejFrVq1m1rTp9BcOMmzwEPRXrMRCuM9q/VVMGDee
/n378eWUqWxcv0Gegy7FRCT3+PQfn/KP//iEPr36yvGPlbp6TJ38pXCJXnRo
15HOHbvQUzzWp98g+vQdSO8+A+jWvRfddXrTtVtPOnWRevIOYOjAwfQWDqKj
01M81p3PP/sHXYQvbdRfQFacD5lRLmSG21MQ48zWWDU1SW7sy9NSEmVLVshm
rrRk8Ovd3dw7Uczd4/n8dKuOFze3c+d4AWcaUzjTkMapnRnkR7phv34xPlZG
5EeHEifcz8nECBcLM1ythO9tXMX6FQvFv7sIBwsDeea5ueFK4SG62G5ZjZvK
GFdbcd5UDydxLMU/YgKcSYnwlHOyvBw3y3ERjdVGOf8qOy6Q1GjxuTpZEeLn
SXx0mHBQG/G5bsHPz4PsrFQaG+uEd1SwdWs2zc3buXnrtHCQfVy61sbtx9c4
cHw3La27OXHqAOfOHObp/evcv3qW00f2clDykJadXD5/jB++vcPLHx/x5MF1
nj66wW8vn/D61+9490bqwfvzf/oH3LlzR/EPBQUFBQUFBYX/Rk11FUcPH5bX
S48f3+NYq1iPXTrCjevHOHCgiuLCBBrqiznbtodSse7297QhMliDr7uNWOub
Ul6SzpH99eSkRcu9cVWOtvI8c08PV3muoISvjzvhYUFyjlRCTBRxwjX8vDzx
EI7g7+1FVFiY7B6+nh4Ea/3wdndB7WgvxzgiQgKFj/iL6zzx8dCg9fGS3SU0
MIDo8DDSU5JJiosjMkyscYWHJMbEiOeEyDEPtZMjzgK1s+q/PMTL0132ECku
onF1xcPNXe5/JeU72VhZ/zn73MlZrgeRrjc3NWL9qmWYb1pDhJ8r+QnBFMRp
yQx1JcHbmhRfG8oSfARarFYvZGDHfzBEpxNLZ09n2fx5LJk/n80GhhgJl1i2
eDHzZs1i9nRp9sdMpk/9knmz57Byua5c9yHlaA0fOkzOxRo3Zqy8P2zIUAb0
6y88owfdunSX6di+k+wbA/sPol+f/nIOVo/uPRk2YjRDho+U4x2Sd3QWziHF
Qjp37UFHse0ufKRvzz70FNd27dqd9h068Pe//Y3P/+Ov6C78ksQwN7JjxFo9
0pnyZG+qkz2pjlezN9ePqkRHsgINObc3jl/uSLMHK3h8tpSXt2p5dKaYywdS
hZMUcWlfJo0FAVSkeIvfjyV2a+djt24p9htXY7xyMUYrFmFvvB5PB3M2rV3K
Wt15qISj+LlZE651IUrcWx5qU8K0KrLE71SKcUixjgg/B6oLEynPjZXjIFH+
KtKivPFXmxPsakVVXiIlGXEEeKjwdHGQZ7ZIPbBsrc3xEvdNmnDX8m0lVFQU
U1VVyNlzhzhz9oBwkjLOX23l+qMrHBfnLlxt4/G3N/jx+X2+vX+Nh9fPc/P8
cU4d2cPptgNcu9Qmz0CXcrAe3rsiPOThf9WAvHv7Ex8+/MrHj78L3nP8+HGl
/kNBQUFBQUFB4b8h1X5cu3RFzld/9vyJPIPtiVSP++gily8cYPeuEg40VdJ6
sI78zAgKsqOor8olOVZLRJAbh5q3c+/mWWrL8/AS/uHq4khYiFbupeslPMRJ
Jc0Xd5BrOxzsLHGwscLZwUFgj6uTCo2zs/AQV+EdWuEmMaQkJMh+4eWmIdDP
h8jQYPnYV3iDm/ABT41aeIi7eNxNOImPuEYrjj2FowQK/4giWGy93N1l93AS
DiPFPZxUDjKSi/wzD0vOyXKTHEUt52H9cwahNANEOvZw95CvUwufsjIzkufh
STMrwjztCXe3xt9xM362BoS5mJIR4kqsjz3Lp4+h1xf/g8E9ujJn6mRWfP01
+st0Wae/itUr9Vgwey7jR49hzPARzBEOsnDOHKZKzjFoMBPHjWfOrNlMmjBR
do4O7drTTprlMWo0UyZNZtCAgbJjdBUe8cVn7fj80y/oLVxC8o+B/QYyetRY
Bg0eTo9efeW4h+QgUt3HP+MfEoOkWeujxtGnZz/atetIx06dGTxYPHdYfxbO
GCuv6fPj/UgNcCAnREVOoA15ARbUJWuoTrQnP8yISwcS+P1+A7/c3snzK1U8
OJXHrWMZPD1fyuXmZCpTHMkPN2d3URC1WVocN8zDQn8OwS5WRHs7YSmcw26T
PukxWtxVlugtninnXqltN+Pjaik8xAprU6mPrj6eqs1orDegsd1IgJsFwR7W
ctxD8hGpD68UC0kIFn6rMsXXaQsau80Yrl4ifucLMN20Xtxr5mwxMcTa0kye
SVlbW862sjxqaku4LDzj4aPLXL3SyoXrx7n+5AptFw9T11DGuQtHefb9N/z6
/AE/P7nLz49u81R8L25fO8XVC0e4dHY/Vy8e4McfbvLmjx94/dsL3rx+xbv3
v/Hu3R/yd+np0ydUC7f/V3+/FRQUFBQUFBT+3WhsaOD176/lNdNvv/0oz0Y4
d/Ygjx9f4Jtbx2ncUcC20mT27Cxie2UmTTtKOHl0F3vEtiQvnp21RbTsreHQ
vlrhIEWkp8bLvXZLinLIy04jXLiIVL8RHhIoXMEbPy8vvMXa3t3FRd56SfEH
tZrQoCDSkpPlPKwgf3/hE1px3llc4ybHOqT4hxQrkWIeUrxEcg8/CS8fcY0n
oQFBhAeHiNfzwEXljIuzExpXNe5urrJ3qISLODrYycguopL8xFHOvZJqPiSk
OnRp9qB0Tu2sFo87YGNujIOVKfaWmzBevxwjvYWYr1uM2er5WKxZgLOxHh42
BlhtWMbkYb3p1/lzpowcxvxp05g/YyZfTpjEhFFjmCT8YlDffnTr0Il+PXrJ
5xfMnsOsL6cxVTjHzOnTWam7At1ly+X8q149etK5Yyc5BjJqxEgGDxSOMn4i
48aMZ4DwDSn+odNVR/jJWOEnU+UakF49+9JDIMU9JPeYPGUaI4VvdBU+Ip2f
OGGq+DcXMnjAUNq17yQ8pafwlpGMGzlY+NJI4VdiTR+kJsHbhiRvKxLcTEj3
MqYs3JqScDPhHwZcbI7lxbUqvj1bxuOzJTy9UCocJJcHJ/PYW+xJvPtKYl31
KIm1Fx5jhspgLrYbFhDhbkVWpC8+DiZYblyOk+VGTDcsZ/XS2RisXsR6vXkY
rlkk9ufLSA5iv2U1tpt0Zd/wdjLGyXwtNpvEc83X4COOpZhIhHAmtY0Rm9cu
Zt3KeejrzmGt3iLsrDaJz9gCC7ONqOxNSYgLZteuCkpKMykoSuHMucPcuX+R
fS317Gmp4/ztU1y/d57mQzup2V7MsUONXDp5iKNN9Zw6uIczh5s42FQlfLuC
02113Lp+gBfPrvHzi/v8/ON3vP7jd94K9/jj9e//GUt8LM/z/Fd/vxUUFBQU
FBQU/t2or6vjj1fS32zf8/sfL3j48Cr7m6s43rqDe9+cpLmpjOz0MLJTQyjM
iWJ3fTHnTuxlR3U+CVG+pCeFUpyXyNEDO9jbUE1qUqQgSjhLHlXlxaRI88bD
Q0iKlWIb8aQnp5IYm0BCTByJMQkEayVvCCUzNZ20pBRBMjnpGWSkpBAZGoqv
p6fwFj/ChJ9IeVVpSUnERUXj4eKGu1pDgK9WuIgffp4++Hv5Ch/5T7y98fJ2
l+Md7hpXOd/qn7EQyUEkH5E8Q+WgkuMekn9IsQ9HqRZEeIj5FnM2GWzEYN1K
TI3EuneLIWt1F7Bg2jgWfjWKRV+OQHfmWFYv/JL1S2aiO3siYwf2YPTAXqxY
MAf9r79mpvCIYQMG0q19R3p16Sbco6PMyCFD0VuyDH3hGl+Nm8CCmbPlf0uq
NzfcaCBvJ02YQNfOXejTq7fsIiOHj2D2zLlMnjhFdhEpD6vdF+0ZMXykXJM+
ZOAQucZcin189nkH+g8YwrLleowaPZ4v2nWSfaRv34EMEu7Ru2c/dLr3plOH
LnQRjtOnRxfmTx9LoIclcVoHQpyNiXIzJd7DhGiXtaT7G5IdtJF07SrONIbz
w6Wt3DyUzbWDGfx6e4dwjyIuNCXSXKolK9BIXGdEdboHBTFOBDuvw8lsKS4W
q+Q5HvZmazER/rFBbwGuDpsJ9XfCwXI9W4yWo3HcTLCvI0E+4j34qQhwtybA
1ZIgD2sifB0I83bAzdYQD/tNeKtMCBKPe6lNcXU0FlsLrMVrq+w3C/cwxNrC
AGtzA3w8VWRnxhES6I6fjxN+fs6Ehflw6HCj3Hf31t3znBC+vffwLs7fOMHV
W6epqSkU93IlTXXb2JabwonmBo4376RBeEnb4Tru3DzC99+eE1zi2fe3efnT
98I/fuPd+z94+1Z8lz5+5I8//pDzr5QZIAoKCgoKCgoK/1+k/KtXv7yS/3b7
3Q/f8PS7W5w710zb8R3cud3GlUstnDnZSE15OtlpwezZWcytK8eEb9RRXZZF
fVU+xbmJHNpXJ/xE6jlki5ebA6FBnsRGBOHv6Y6ni1j7izW+2t4RX3cv4Qq+
whX85K3kEUF+AUSHReHtJs2OcxPeEUaEcA/JO+KjpXqOUAL8/MUaUriK2I8I
CSc8KJyI4HDCAsV1voHyc92c3eTnS68rzRWU/EPKs5JqPqQ4iK+PF/5+PnJe
lYSXh8d/1X5I7iHt/3MWiJ21HWpH8X49XNB6ueKptmW97kKWzJ7M0tmTWDJj
HEtnjuPr6WPQnTOZ5XOmMHF4P8YN68/Krxegu3AhuosWs1J4xujBw+jZsSuj
Bw1lxqSpLJwxh+ULFjNZuEHvTl2ZPeUr1q1ZJ/xiDnNnz2PJ10vk2R5DBg4V
x3Pp1rU7n336GT1796abjg49e/ZimPCRUaPHMHLUKMaNHcfoUaPR6dGbdh06
8/kXHRk/YYrsH1Id+ieftpO3XYWfdOjQiV7Cabp360nHdh0YMWiQXCs/98tR
OFmtRethhvOWZag2L8LHXg8/x2WEu+sR7aFLnMdyzu6O4MW1Sn66Wc+P12t5
dbeRZ5fr+O5CDbeOFtKYL83/0NBSHkN1ppbkQCt8HdehttDH1WYjalsjTA1X
sFp3Dm4qM6KD3DFevxSDVQuwMtaX5xAmR/vjLh4L9VHJfa0CNFakR/tRmBou
/MNInjXo67wFHycz7ExXYW++Dm+1JR7inLvYWpiuwdrKQHx+5sJPXYX3huKs
Msd4sz42VkbExAZy9twRfvr5EbeFf5y9eIzDx5s4d7mVR8JJjhzeTduxvbTu
30mLcOof7l3jxtlWTh5p5O71Vu7fOc6Th6d49t0Vfnn5kDe//8y7N6/58OEN
79+/lWOJ0n/nz58XLqPkYCkoKCgoKCgo/E+2c/TwMbFu+sDLn3+g7cR+Tp7a
z7Nn13n5001aj9VQuS2JpoYitldl0HqwlvMnm9izo5gTRxo4ebSR7RW55GbG
sn9PDcV5KQRrNYQHexGi9RDu4YpG5YDG0Qk3qc7CToW7szteGk9cHNRYb7HC
xtwaV5WLOOeFi6OrfOxk54CzvUqcV+Pr6S0e8xBrSSccbOywtbTC0dZe9g1P
Fw/srRzE9WrhMZ7CFfzE1gONkwYvKbdLeEeg1p/AQH85DuLl5Y6fr7fsJFIN
uoe7u1iXOsuxDynvSqo/d5HzrhzZYroFRzs7Ar3dCPVzx9fNEcPVy1i9dC6G
+otYs3Q2uvOmsnjWBJbNn87S+TOYOHooA3p1Z+KYUUyfMpUFc+aju2wlX074
kn46/ZgxZQbr9Naht3QlM6bOZEj/IXRp14VeXXvRv/cgdLr25svJMzFYb8xX
U2bSo2tfBvQdQvvPO/GXv/6NTj26odOvN+27dGL8lMms3bCBSVOmyD4ydNgw
4Rj9+PSzDnLNueQfI0aOlfel+IdU/9GjRx+6dumOjk4Psd+LkcNGMH/mTKaN
G8XMScOw3LQcW5Pl2BjOR2O5HC/bFXhYLiLMRY9IjS6p2rVc3BfHD1cqePfk
AC+ub+fBqRJxXMdvd5u5f3Ibe0uD2F8WLvwjjswQBzLCHMmO0pAWrqE0J1r8
Pu3ZtGEp61YtFN6wATuzdaxfOR+jNYvFdh4OFhtwtTfB392WtFgtGitDbIxW
EuXvTHyw+Lws1uMg/MLTQYp/2OCj3oKz8BG17SbcHEyxNl2H0fplOFgbCRex
xs5qs5x/ZbNlgzi2IjkxjJaDO3n2/AG371zggNjf17KD3ftquHzlBHdunePO
zXNyn6uTh/dw7ug+bl88wa1LJ7gp/OTW1SPcunZIuPkRnj+7ym+vnvDu9S9y
vfn7D2/58PEtb978wdWrV6mqUvKvFBQUFBQUFBT+39TX13Hx/EX5b7XfPX1E
TW2xoJBr149w48YhSoqjCQtxomJbMkf2V3L3RqvYVhMd6k5ZYTKl+YkkxQaQ
kRRGRXEmGYnhBPmpCQv0ICJIrPPV9thbmuMp1vQp0bFiHR+E2l4te0JkSBT+
Xv5YmlqKtaKK0IAwAn2D5FhGZkqGHA/xcHFH6+VHiH+g8JlAAn38hce4ynGP
vIw8osRreGu8xbpSuIarl+w1kqu4Cf/QOLsQEhhAWFCw2P5Zk+4u9bvSaHAW
fuEknEPyDGeVSp5BKPXclWaASPM4pHkgm402sXbVKjYbrBGv6Szel4b1q5ay
cOYkli+YziKxnfvlGGZPGcO86ZNZNGc6U8aPoWunDnTp2IEe3brL9eKjR43j
q8nTGT5oJJPHT2Hh3K+Z/dUcxo4Yz8ghoxgxeCSD+w1Fp1sfOnfQYeTwscyZ
sYBRw8fRsX1XPv+kIx2/6Cq8oh2fitdt16ULHbt3Z77Uy3fdBnr26sMnn3wm
3EOacz6Sbt17yzlYUryjXfvOci1Ix07dZA/pP2AwfYSjdOzYmZ7CP6ZMnMr0
yZMZLJxp7tSRWG3WxXzjIizWzUZltlg4yDI8bZYQ5bGGUKdlFMVacP1QOt9f
ruLN4xYenavgzvEifrzZyB+Pj/LgdCXNwj2O1SVSnuKFxmw5wWojIj0tCPOy
IjNJS2SAVPdjg4erJdHBnuK+CMTH1QY/NzvS4oLFOQ+xb0tGQhiZCSG42Uh9
di1IjfQV/uGBi6VwDYHUCzkjJoCkcC+CPO3k2edu9mY4ieudbDYREeBOmCDQ
x4XIYB9szQ3EfelOdXkux1v3cv/BFY4e3cPOndvYv7+ePXuqOdHWzJlTLdy5
cZYLJ1s437qfb66e4fLJQ9y7dkb4x3HuXJdmn7dy88ZBvvv2Ir/+8ogP73+T
8xcl93j3/g1XrlymtLRE6X2loKCgoKCgoPDfqK2tYUd9PR/efODnF99z4MAO
TkrzEC4e5OChSraWxpIY782RQ9U8fXiOW5ePsrM6V55RnRDpSVZSsPCOFBpr
i9hWmEJyjL/wBjfhCs7CMexxc7ZGZWuJj1jzl+YWkBQTj7OtimC/QPIz8yjM
zsff0xcfNy+yhHOU5BULl0kjNT6RlLgEctIyxHXZ4lwK2anp4vni/QiPqa+q
oWlng3CgYkpyC8kWz40UTuLl6i68J5ggX3/hOSq0Pr5/1rhr3IWPqGXcXVxx
kfpdOark+o9/5l5JfXelGIg0e9BWnotug5mJCRamRuLnsEPjZMPC2VPo36M9
w/p3Z8zgnowd2ovxw/oJ75D6WU1i+tQJdOvUXjjDJ3KPqk/+/hl9ew9gkljn
DxKO0aVjd3rr9GNAv8F07dhDeEUX+vUaKMc6vpw8g549+9G+XWd0uvelh05f
2n3RmREjx6Gnt47FS1YwYORI2nfvxvgpUzE1t2LdRkM6den6Z2ykS3eGDhtF
v/6DZf9o36GL7B+Sh0hI9R9Dho1g2LCRdOrUlS6CQf0HMlh4S6/O7dFd8BXW
xisx27AQa8OFqE2XYWc0H43510R5bSRQtYyded7cbSvk2bU6Pr44zR/fHuHV
o4N8eH6Kt9+f4N6ZGvZti+JgTTy5UeJ3ba4vnq+HjcFiVOar5VoNjZOJcFo3
woLdCBDOkJ0cSWZiGMXZCZw8vJvashySorREBbsLBwkmNymUCF812fHBpET4
4uVgJs+BTArzJjHUm2Bxn4X5OJIeEyg8xRJXO1OCvJxIjhK+6uVMbKgfxTkp
xIX7UZiVQHVFLkcPNvDw/lVu3TjD+XNHOCWcQ5p5c6C5jnu3z3P9wnGOH2rk
4c2L3L9+jivCP765eprTx/bwzY02Htw5zt3bR3j88Cwvf7ov3OM1797+mX/1
6tUv7N7dqORdKSgoKCgoKCj8L5BqYxsbdvP+zXtevnjK2dMtPLh3iW8fXxHr
smZaj9Zz9EgNx47VcLJtB+fb9nC0qYbGmnyONNewv6GMpu1FNFbns7Myl9ry
DHbvKqS4MI64aD8S40L/H/b+Mryqq2vfh+/nlgoOISQhCUmIQHCvt7TUKK6B
uHt23N3dQwSCW0JCIGgIDsHdrQUqUKFIoTjl/M85e7fv++F5fl/bD4v2OuaS
udfe7L3WccyTMa4xKM0X68uyUsEWiygvKhFskER6olhLFpSoY6X5xWQmpwuu
KFQMIo/npGVSlJMr9isUb0gekcpKSSM3PVNslwjeyGBOcamaU5CVQ1pCInER
UeJaqSRGx+Lr7oW/YAgZ55C8ER4cothDcoeUZBF/H1/FHaHinMzBcnJwVP5v
+1mz8XCXPdBdsLebitOsabg6TOfdUYPQ7/QfzHt0wtq4O33M9OlrboStjQUj
hvTn/bdHYWzQg47t2mNqbEpPo17o6/XE3MxaMIcV7V7rQsf2MvbQS6z/DenW
1VAct+b9dz/mww8/VezQrn0X2gsG6dS5Ox07duNjwR1JyZlkZhcwzdEZ60GD
ePfjT3nvo48ZPHwUpr2taS89H0L6PX7vdS5jHtKDLn0g0ofer/9gdW1zC0v6
2Niir29Ad70eGPYwxFDwS2+jHkwb+wE+zhNxsRuD2/QP8HX4BPvxw7H7fADe
M98gwe8LTm2by8/n1vHoxi5+u3+CZz8f5OWvp+DXMzz64QAXDzbQvDidhcVh
zM0JIy/Gh6KkQGID7PF3Edee9RmOsz8nOsYb/wAH3GZPFrzggr+bHTHBXpRk
J5IaE0xOSiTZiZHUlGSzvKaQguQoSgU/lGUmkJcYwRzBFnML0wWH+BLh40hG
lK/gkzSSw72J8HMlPzWa5CjBlZ4O6LycSI0NYdXiauqXVAuGTWZ1XS2Xzwue
OLSd+pW17Ni+lpPHdnF43xZOHN7FhRP7OLp3Kwd2bOTw7hZOHdjJuWN7OXGw
lYun9/DN1YPiGTkiGOYwP35/kedPf+HZ08c8ffaIR48fiGdmN3V1K/7y51uT
Jk2aNGnSpOnvpqamJrF+usXL337j2tXz1K+oYWtLA+fO7OPsmTbBINu4eeMk
27atYMXyYprE+d2bG2lcXsP8ObmU5SWyoDKXoqxYyvOTWLVsDqtXzWVeTQ4F
OYlkJEdTXV7E3DkVJMcmqlwq6dmQsQkZ88hJyxL7Efh7inWkLoz4yFhxLogA
Lx+xHyLmSA9JDHkZWWqUfJGWkKQYIz0xSXFHdmoqoQFBYn4wSTGxKv6REBVN
oLfvn/wRIDhD5x+guEPuS/YIDdKpPh/+Yl/GQWTfc8kdsue4ZBCZfzVl0iTs
pk7Cw8UeP08Xxrz7Jj312mNrbvhf9cDG1AAL054MHdiPSePHqr6B7V5rh5Hs
zSHW/F279qCbnjEGhpZ07GQoZCC2e9PTxAYz8/6MGDWa90d/QZ/+QzAxt8Lc
qi/tOuvx79c60KGLPkNGvYW9iweJ4jsIFH+vzyZPYchb79DFsCd6PY2xsh2I
oYmZ4o9O4nWyBpbqd/5f34esu2tp9XtPQtkX3aK3Fd26dUe/uwEmRiYYdOmK
rZkxdhPH4G4/Fsdpo3G3+xBvx0+YPWEkk8fYYvepLQn+E/juZDN3L7fy/OfD
PL19mAc39ggOOQmPLvDs7gm+PrWRRWWRBLmMIdRlLPG+9mREehIX6IjjlNFM
+vwNosLdSUkJwsfXjhBfZ8IEf+i8HQlwn01UkBfxYX5E67zEORcy48NJi9KR
FOpHYUq0Ukl6nHiPXKryUsmKCyEnPpji1AjBJnEUCG4pz0qkQbDGgop8FQPJ
TYkjQzDN3OIsls4rZXFNMcsWVnCgrYW9uzaQnRlD/fK5gj1aaa5fxJZ1dYIz
drC3tZkdGxvUeGL/dqFtnBZ8fuLQFs6caFX+j+++PSY45BwPH4hn6MVznjx9
qHKw7ty+xYYN67TaV5o0adKkSZMmTf9/Wru2iR3bd6pSPb/99oLL50+ybHEl
y5fVsHP7Wh4/vMmDX65x52fpQ2+mob6ChmWVnDm6i81rl5KZGEpJbjxr6+eR
GhtIRX4K2zfVs2h+EUsXl1Mzp4DEmFBqq8upKi0hJEBHWGAwHk5uKjaRFJMo
+CFPHAshyCdAMESw4IZ4dL6CEwQTSN5Ijo2noqhEvL5cMYfcL8kroLKkVLBL
moqRFGRlER0aJl7jK3gljNT4eGLCwwkJDFTcITkjUPCFh4srnoIxJH9Eifky
HhImpBMsImMf0v8hfR8uTs7KB+Ll4YmzoxN+Xu5ibgBxUWFM+HQM5oZ6DO5j
wWAbM/r2MsDauAe9jA0ZNWwwIUEBTJ82Taz9u/Paqx0ED+iLdb8p3br3EjKn
t/VQwReD6dnLlh49begijhmL7W76FnQQzNDDzAITqz500OvBq5270dlAcM2b
79BXeskHDmHYe+/Tb8QoLMV2LxtbOuob0FHM7axnKFil++8+c8Eff/Q/NzG1
UPEPmY8lYyLSG9Ktuz6dOnVWOVhdOnamW8dOjOhnI/jjYyZ/9iaTPh2By/QP
FIPYT3yDKR/3Y7pQfpwLd77cyc2T63nx0xHBHGd4cf8ELx+c4eXDi9z6ajct
9UWCB1xIj5yNzukLQpynEOg8kZlfvM2EMcOxn/EJsdHehEe4Y+80ngAPe8py
U9m0ermqdbtyQRWNS+exuLqEzIRI5uSlCcYIIzM2lLKMBGIC3InXeZOTEE6Y
tzMpEYFkxwaTGe0vGMeNorRoKnKSqMhLISclQtwb8v5JJ13Mz06NoWF5LXt3
bGDz+lXs3NbM6eNtgrebqFsxj9071tO6cRVtgkmOHdzOmoZFtG1fz/kT+zi2
byv7t2/g6L4Wzp/axblT27h4cQc//XCaX+5e49mju+Ihei6eoz9qX73k1q2f
VH7jX/2ca9KkSZMmTZo0/X3UREvLFp48es6LJy/4+YebXL5wkoP7tnFofys3
v7vE8aPbOXywhSOHWzh3dhc7WsT6bMc69mxdI1ikmjV182mqq6UkP5nmVQvY
0LSUkoJUwR75LFtUQ2VpPgtqKqkpKyMiKJiokHDCg0JUHSwZD0mKSVDbIf46
FfeQsREZD5F1elPi4hR7yPwrna+/yqnKTk1X+6nxMpYSQ0xYKAHeXmoMDwoU
XOMmxiAiQ6TXIwg/bx8V95AMIrlDxj/+8H6EiGMRgkPCQkKVZA6WjIfIfKzo
SNkfPUr1N8xMTSI+OoKkuGhmTByHlWCN4f37MMzWmj69jLDqqY+JkQEjRwwh
JSWJUHHN3pZ9+Oe/XufV1zpj00dww8gP6Df4XUa+9ZmSdf836d6zD6+0N6Sb
oQ19BryF9aBh6Jub06tvfywHDMai30C6m5ljZGXDK4IX/vGP/+Efr7XjdcEb
vWz7YTV4GJ16GPGKYI72XfTpLPilo2AKyR96/42BWAqWsbbph56+ofKDdOys
R0fBHJ2ETIxNMehuQJd2HXl/5HCcp49nvGCEGRPewXnmB0z5bCjTPh2Ew4RR
OI0fxYKiCH6+soOrh5t4cfsEL345wZPbR/jt/ml++/U8Fw42kp/oRkakA/U1
qVRnRhLqMhXPGZ/i5zAO52ljxD3gSFpyEA6zPmHKpPfxdplOcnQwrevq2NO6
nprSPIK8nPFzcxBzfSlITyY/OZbk8CDBHFHkJcVQlJ5ArhhDvVzIjo8kMyaY
3OggkkO8mCNjbvHB+Ir39XabJphyOv6+s/D2mCXeN5KNgju2tazh5LE2rl45
zaXzxzhycCctmxpp27tZ3OvbuH71NMcO7WDbltUc3r+Ns8f2curQThUDuXL2
ANcuH+Lq5X1c+6qN2z+e5fnTHwV6POC3F08Vfzx/Ln0gz1VNhyNHjqjn7K9/
1jVp0qRJkyZNmv4eamho4Patu7wUy6XnTx4rD8jpE4cEf2xn0/p6SovTVE7W
xvXLOHpkC/t3bWDJvFLmVeZRWpAiWCCJ9KQwygpTqSrNICzAHTen6QT5inWo
WDfGhAeTEh8juEHOzSU+MoZAbz/cHFzwdvXE1d4ZT2d3Arz8VAwkLkLmWuUK
BglTOVfSZ56TlqHysdITk1UcRPrQq0rLWDS3mqqyEpJioyjIzhDbxSQITkhP
jCM3I1W8d8ifuVZxUdGqX7ocZdxDMonyhQgGkdwhPeiSO2T/c+lFl/0/khIS
iY2OxsfDHXcnB8FA3thNmYitRS/eGNSPt4b0Z4CFKdYmhujrdcXCwoyI8HBi
Y+MZPGQ4//rP6/zzP+0xMe/LG+98yhvvjWPIKOnZ+AjLfm+iZ9RHsUffge/x
3pgp2A4byat6epj0seW9z8YyZsJEwSK2/LtzF17r1p1/d+zCvzp2paOhCXqm
FrzatQd6xuZ07mFKRz0jcS1T9I3M6GFgQmfBI7/HO4xUHERfvyevv96J9u07
q57n7Tt0xta2PzY21hh278rkzz/CUzDClLEjcZ/xPm7T32Hc+9ZMG9MPl4mj
cPxiCOuX5HDl0Bq+PLoW7p/l1pdb+fXGXvjlOE9vHeT8vqVUZfkJFnBlbnYU
VamR6Own4j9rHMlBLkT5CAaI8iE3NQRXh7H4uE/Gz30mCeEBNNcvID89Dk/H
6dhPHYfrrKnMmjwOlxlTBbdMxF3su9tNwc95FsGezvi72BMV6E1VYTbZceEU
JIRTKl4v87NiBYcEeNgRGuiKu2AQDw/BOAlh4j5ewMZ19SysLad1cxOnju/j
4rmjHD+yR9zrq9iwvk7Vvvr2+jn2721h365NHNizmYO7NnPjqzP8cO0C1y4e
4dzJnZw/vZ2rX+7hp+9Pc//eNaGbyv8hPegyB0vW4pUxkP379/3lz7gmTZo0
adKkSdPfSTI/5NLFK+rfap8+fMS1KxfZt3sH65pWsaZxGTu3rVP/JjyvJp8K
wRfLF81hkeCPEsEePmKN5+MxS6zz3MjJkD06fAjXeRIZ4k9sRLDgkjhxzo/U
+FgqiovY3rKJypISYsIiSEtIUXEOWftKej5kPSzpP68oKmPenBoKsnJZWDNP
1b2SHo/F8+azcvFSJVkPq3HFSsEhJaxYvEAcW0BJfg6NK5dSv2wx1RUlikVi
IkIJEiwh+4DERYvPF/57DSzJHbKPiPSee7q5q54fkj3cXNxwcXLB3VUwlJSz
K1MnT+Xzj8cweewXuDna4yjWw4OsLRnRry/vjxjKsL6W2Jr3xFC/O0aGBrg4
uxCk0zFgwBCx3u9I+4569Ok/lOFvjsGi7yhMLIcyYMRohr8zFot+b9DdtB9G
FoPo3qs/7QUj/LNDF3qYW/P2mM8Z+f4Y3hj9iWCQAbTT64mpzQAx34Z23Yz5
Z7tugkd6YGhhq4510Deha09LDHvZYNBTMEk3Q7rqGdJNcEmnTt3p0lmfDu06
06VjNzp20uM/r7Wnu4GR+Hzt6GdrgZfLFLycx+Im2WPqm3hNe5spo22Y8E5v
Zn7SH5dJw9jTPIfTu5fx46VtgjnOcv3kWu58tVXVwXryfRvn2payqCiMwngv
kgMcSPR1ItbLnhiv2YQ6C36Y9imes8eqGlu+HlPITAmmODtWcUd1cSbFWckE
e7sQKtg1MtAHx6kTmTHuMyZ/8oFijkA3B+wnjRXXmKZYJCk8iGVzK4j29yDU
y0GMboR4OhCl88DX3Y4Zkz/BYfYEwZPis8QFM39uqbinxT20bJ7ij5aNjbTt
bhGs0UrzmuWsWF7Dpo11HD++R3CJYPC2VvbuWM+Zo3u4efUsX188oXIPj+zb
qPjjh5vHuHfnIj//dEnoumCPx7z47SkvVezjJbdv39L6f2jSpEmTJk2aNP0v
atncwstnL3n28DEXz57h7KnjnD5xhBtff8m92zc5f/YISxdVsGxJJXvEeuzI
gW2sW72EJQvKWS/WbRubV9BYt0B5eFevWkxzYz2rli8RnFLD6rplbGxay+qV
K9nc3EzdksWqZtWa+iYxllNeWKbqX8m6u1s3bqFlXYu4tpy3nOaG1YpBZAxk
++YttK7fROuGTer4ikWLiYsMY+4cGYspUzGQOSUFVAsmSY6LJjk2kpAAPxXn
CAvSqZyrUCGdZA9Pb/y8vASDeCs/iKe7Kx4ukjuc8RLbnm5uBPj54u3hht30
qUoeLk4E+nnham/HEMEetpa9GDXIlmG2lvSzMMGmd296mZjw2Sef4+jgRG8L
wQTtu2Bq2psRI99i4NB36G5iSycDSywHvMngtz7BpO9wOhhZ0t7Iild7mPG6
noniiC5G5vS07Ke2zW2HYGDWl449TOkz5C0MzG35d/vu/LuDPp0MLRRzdDIw
F3wiXtfTii6G5nTqakDHLgZ07WaEoZEZ5uY2mBpb0KO7Ea+92p5XXutAj57S
H2JAt24dGfP+KEL8HQnymCjW7xPxc/wI9ylvMul9K2aPHcSMj/sR7PwRhzbX
cmb3Uh5/f4CXd0/w/YVN3LqyhRc/H+bJDwc40lpLTU4whQk+6BzGE+wwiYrU
KHKi/PGzG4fPrPEEuk/H13mK0GR03nbkZ0SRHhuGj9N0ijISmF9eQGlOGkkR
IcToAogNDiTEy4W4YD+iAsRv5jL7z+1Yna+YX0hWXCQxQZ7o3O1JiwlmXnmu
4GAPZs/4gsQYHeUl6aQkCuZNjmLxgjniXq6itqZExTwOtG2luWk5K5fPo23f
FhX/2NbaJJ6DQ4LFT7JzyxoO793C2aN7uXzqIFfPH+aSrH/11UF+uXuBx4+u
c+/uVzz45XuVf/X0+SNevHii+OP7778T/FH3lz/fmjRp0qRJkyZNfzc1NKxi
3+42Xjx+yq/37vPs0UOVR/LowT1u/fAN504dYk3jYnZsXcv50wc5enCXYI6V
bGtp4vL5Y+zdtYkVS+dyUqzRtm5ew5pVK1jf1Mj86gradm7l/KmTbFq7hqrS
UuVDX1A9T3DGRuXjkH6Qopx8Vi4WnLJmnWCLRjY0NdOwso551VWUFBRSVVFO
cUEBORkZ5GRlkSb9GDExRIQEESsYJEYowNuD0CA/0pPjBHf4in13gv19CZO1
dv0FcwjeCPLxIdhP5nn5ijn+hAbIelh+giu88RGs4ePhSoCPJ4G+Xkpy29vd
BTfBJdERoaQkxOLl5qR6DPa16sVAGzP6mBsxwEqMVtaYm/Zi6MAhODu68uHo
j+muZ6j6eUgPeMeuRoInzDHqPRAT68EYWQ6kY8/eQpZ0NLais6kNhr37C94Y
jH4va14V/PA/7brSTfZEN7NRxySTdBWv0RNzzfoOxdR6EJ0Fg0j+6KDfSzHI
P1/vyn9e60y7jt3p0LkHXbr2UO/fx7o/1la2GBoYq/4fk6dMYfiQQViZGeJh
P5HEcA8Sgh2JCZhGpP9kAuw/ZOroPvjavYe9YJCCOGfBF/O5sH+F4I1DPPxu
D7e/ahEs0sajG3v5+ctt7FxTpmIfZSk6UgJdCLYX/JEmfiePWYS5CdZIDKMi
J0H1DnSa+ikes8fjNmsC3o7TBGd4U5Aq61fFi88ShNfsGbjOmEphWjJ18yuZ
V5LHnLwMitITyUmMJjshSnxOT9KiQqktE/eGYAs/t1mEB7qTLbaTBHdkCvap
mZPH5nV1bN+yVt2jkjsyUmMEk2Qr9tizc5OKicyfV8bRoztVPd7WlkZOHNnN
oX2tgndXce54G2eO7FH+j68El3x9+TDfXTvCDzeOcuPbY3xz/TgP7/+k4h8P
H93nydNfBX38xpMnD2luXvuXP9+aNGnSpEmTJk1/R61YvoKrl76EFy948uAB
zx7/yg83r7Nz23radm/ixLGdfHXlGCeP76JlY504voZd29eqGkKVZdkU56ep
NV5tdQmVpXmsWr6IpQuqad3YzJ7tW9jU3CRYIpf8TNmzo4TayipK8/NJjI5W
tavkGB8ZKdaN0aQnJqraVTrpJxccEBQUILYDcHFxws/PB2/BGl6e7mIdmURq
YizhuoD/1qgKpCgvW3nFvd1dFX+ECPbQ+foQ4OVJgKenYhDJHdGhoeo9E6Ij
xXv5Kc7wcnPG01X2G3TAafZM7GdOxdl+FrNmTsdDHJfzggO8+fDdNxncz0rF
P/pa9KRfb2Mse/VS/GHRy0zM9SAoUKdiILKXoFzz6xuYYWo1BPO+wzGyGEBX
Y2te7y6YQbKDkYXiEBObQfTuP0wwhgX/83oX2uubCFYZgOWA4UqSQ/RMrBgw
8n0GjvoAU5vBKh7Sw6zvnzGQVzsZ0lmM+uKaegamKv9LekBsbPrRu7c1o0eP
ZradHRPGj8PC1ICxo0eRGe1DZpQHySH2xAVOJ8J3Mj4z3iNg9kdEeY1H5/QR
6xancWLHQm6eX89zwR+3rmzi9tWNgj/2cPPCBg5vmU9rXTElSf5UZ0ZRmxNP
uPsMwj1mE+lpT7SvE9X5ybQ0LGJecToNC8tZPreIuSVZLKkuIishnOSIIJLD
A4n08yTUy01wigvzy4ppXbOKenEvSfZIiw5V3vOaohzKc9KU/3xeWZ7qa+7n
6YCrw1S8XGcSFxVIWVEmWWnRQjFUludRU1lI/Yr5LFtcTWP9IpV7JX3obbta
WDCvnA0b6tiwfgX1dXMFa6+huXEJLevruSSY++bVc5w+tIvj+7fyjXgOvr16
mG+vHxD8cVQ8J2d58uhnXgj+ePZfyT93bv+sasz91c+2Jk2aNGnSpEnT31FN
TY2sX7uOB3dv8fzJI8Efv3Dn52/57pvzXL96SqyzznL29F727mlmn9C6NQtZ
uXQOO1qbWCrWkksXVjC/pph5VUU0rVrM6rpFYv22goVzKyktyBFMUkxiTJRa
98eEhZEcG0tRTg6x4eEkREWRkZREZHCwqqVbVVJCaFAQJSVFFBXlk52dwfza
ueTmZJGelkJSYgIR4aEU5mUpppF1qWQsJEzm60SGERmqw9fTjUBfb1XHV/KH
zteXQG/vP/kjQqdT7x0VGqyYw9Vxthod7KYza/oUte8vOEcX4IursyMzpk7C
3m6aep8p4z9ngOw3OLAP/SxNsDLWx9ayN5amZhjpd2fc558THRHFm2+8TZdO
3bGy6MPQYW9jO/RdDM1sMTTvT/defegomKF9d1M6GvWmq4m14g8Z5/hX+278
U/CHiVV/rAeNxFiMhhZ9xVxj5fcY+f5nglNGCBaxVmNPywG83s2Yjj3M1LX7
DnwL2yFvYW4t+4L0xnbgYKxs+tLT2Bg7wVPBgqNGDhHzzPQFc7hTX5nOvNwQ
ChM8yIpxISl8NtFeE8mOcCLc7XNVd/dwaw2XD9Xx5Ic2wR/7+f7iWu5c28Cj
73fxzZlmmhdk0rK8lLULi1henkVtdjzR3o6EuNtTmZNEXIAbEV4OFKfFskas
/w9tXceCkmxqBX+0bW6iICWG+GBf0iKD8Z41DZ2rI1mCDReI+2bRnBIV+0iO
0BEd6E16TBglmckqJpKfHE96fDgRYb7ERAQSF60jLSmSitJsKsT1UxMjxP0g
zkUGkpedJJhZsNKBHSru8dXlUxwVTNG0aomqf7VnzyZ27VzPwYNblf982+bV
7NrazGnl/zjDqYM7uXRiPze+Os71LwV7fHOIRw8Fs7+8xW/P76n4h6x/JT0g
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
3z3ogb74uDowe9o4Zk0ei87bmfK8VML8XBjVvzf9zbsz3NacoX17C/awEBLH
rCywsejFIFtbZkyZip3gCSubfrQXvNG5mwGduvaga3cjuhuaYmpujZmFDV26
GfJK+66YWw/grQ8+YfAb79Dd1Jwuxqa00zeki0kvhrz5HgOGvSNYw5z/tO9G
+249eaWzIf94tYuKhbw1ZhzDP/yUbmZ9GPT2GN75ZBJdBKfode3CjHEfUpwS
Ql15Aotyg6hMcqM23Ze6fB0bKmLYuziTixuq2FGdQE7QRBYWBHLt6DqxpP6S
579c4Oev9/D4toyF7OPF/R38+FUzrY1ZFCa5kBHpSGVWFFU58YJBgknQeeA+
cxyfvzOCD4b2Y9qn76s4h4/9VDUmhfoR6etKgPNMwRHRKt4h96vz0ylJj1fb
8TovxSWSMwpT4pmTk0ZlbjqLygtZNb9KbScE+5ESFax4QnrQczMTWFhbzoJ5
ZSrPSjKGzL+SdaRl7asNzXWsX7tS9f6QkvV3z5w8yOYNDTTUzWPf3vWCMY5x
5tQe1jYtFPsbFI/I8UDbRi6cbVO5V7d/vCK443ueP77Fyxf3efnbA14+u8dv
Lx6o+g27du3QYh+aNGnSpEmTJk3/hxobV3Hk0EGxdnqm8tafPvxVrNdaxDpu
DudOHxTrr0OsWDqHgtx4ykpS2LalXpxfzZIFpSxdWCbWdMtorJvP/JoiNq5d
IdZpraoO1ryqYg4f2MWBPdsFCySTlZoorllJ/fKlVJQUERMeSrC/H2UF+dQt
XUxyfJw4Fqb6/IXpAgnX6chISRGvSyUlPl7FStISE6koFuvKwgKigkOJDNap
WrqSJeIEo4QGBijWiAn7va6vjH3IHCyZ2yX3pb9d1vmVvT8k76QnxIljoaqH
iGQNWU8rUXBMZEiQYhF3JweCfD0J9nVj5qTPcJs9haSIAPJSo4kK9GD8h28w
zMZI8cfIAVbKi96/tyn9LM0Ee/RlQJ++vDl8BK5OLsywm616Abbv0JXuBr9z
h7G5Dd2NLdET6qBnzCsde9CphzmdDc3oqG9KF8EUncX+Kx0M6NnLlmFvf0zf
IW8rr8h/OugJBulO+y496STmGvSyZszYqXwxaTa9LAbRw8CSzh0NMdQzYtaE
cVRmxrKkKJ7qJG+Kw2cxL9mD9ZXxtAje2FwVy/HGEo7W5TM3fDpFYVPYWpet
+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
uEjmjaXGR4rPGECgpyMe9pMJ9XUmKcKftBgxz8+Zce+NYIhlTwZZGjFE8Mdw
W0tG9LNhaF8bwSPW9LO0xNrMjNHvvYO3YCsfbx8+Etxg1NOYV15tx//88z/8
65VXMRD7tv0HYmXVB4MeJvToZox+554YdjahZ2dTOnfoLl5jypChw/nw/Q95
7623eGfUCN4ePgzj7l0w0evMO4P74zDuCwrjIlgt1vN1BcnUJvlTFePK3CQ3
luX401CoY8OcSLYtTGLvygzWloeQp/uMJVnOHF+Xx09nGnh5bz/3f9jOzasb
uC3GB/cO8PjXI1w4Ucf8Mh2pUTNJibCnJF38JrEBJIR4M7c4i5qSLML8XZg9
5VOmfz5a9feI13krr4eMe0i2kB6QqZ++j9v08YR5OaljkkukP0TGR2QNrNyE
CKHIPz0fsu6VZA/pB5Hb+WJMCglQOVluTtOZPPFjfL0cSU+JJiUpUnnPz58+
rPKsli+dqzwhMu4h+55L9lDe8/PHVE8QySPbt64RvHGAk4I7Wjev4kDbJg7s
3cj2lgaO7Gvh8pn9/PDNBR7c+Zb7d7/j/p3vePpI1mz4lZcvHvFUMMiGdY3U
a75zTZo0adKkSZOm/1My/tG8vpm79+/x7Len7Ny9mdZtawV/XOLa1WMsml9A
cXYsLWtWsLFhJVUl2TQ3LqR1Q53gg0zmVuSwq7WJhuU1VJZkcGjvZlYtr8bH
bSYhYg26aG4J86tLWFhTJtgghWBfD7KSEwSr5Ip1ajGLa6rISUkiShdIpC6A
8AA/tb9QHF9QXa16okuekAwhYx2SI/7Io5JMMm/OHJrq6lhSW6tiHZI3JLPI
eZIxZCxEvlaeq62sFGyT8mcvdOkTCfb1IdjfR8VeZBwmJT5GMccf2+lJCcoT
4uM6G0+xxg3xcyMswJ2YYG90ng54zJ5EhK8TgS7T+eSNAQyyMGCotSkj+1kJ
/ujDMMEfQ6ylL8SG4YMG8NaIoYJB3sLBbrpgqQCCvN359IN3MTPUo+vrr9Dl
9f/Qpd0rdG3/GgZdOtOzW3d6dOqGQYeu9Oykz8A+/fh49AdMmziBTz54T/Ug
MdfvjJXQG33MsfvsXaL9HagtTqF5QRH1ReI7SvSlJs6V+cnurCzQsb4qhk01
0WKMYPP8WFYU+BDv/g4lMRO5vLuap9c38fTGVu59s4kfrjRx81ozV8X4ndi/
cGYVS+dHUZrjSXVhCPlJPoJBXIkOEN+B+yziQ32JC/Vj2rgPGTXIio9GDcR9
xgTxmdwI93bG3+l3BgkWjOE5a7LKyYoR36eMfwQ42+E8ZayaLxlE8secnBTK
MsXvl5um5sj4Sbi3q+IPySWSRcqzkynMSiJU8Iu3jE252xPo4yy4MYaNa1eq
GEfDygWKR2Q8pG13C6eO71MsItnjyqUTHD+6m8P7t3Ht8gm+++oMx/ZtZe/W
ZvZsWcshwSqn9+/g7KFdXDt3VPDYWcEhF7l/+4byfLx8IXueP+eR4I+GVcv+
8mdakyZNmjRp0qTp7y5ZJ3TP/r08e/mUmz9c49yFw9z4/jzXrx1n04YlrF+7
kCP7W9nTup6WtXUq36qprlblYO3cslr5QOqXVol1fhgrFlVQlJuAy6wJhAW6
saZ+IesblwnOKGNZbSW1FUVUFueTnZxIenys2C+jJDuTAHdXXGfZ4evqTHxY
CHlpaVQUFamYheQM2R9d5lZJlpAcIWto/aGG5csFB1WoczK/SuZsye3o0FD1
OuVDD/3dhy5rX3m5uChPiToWFEhIgO+f3nMZ85CxGVmvS/rQJZt4utjjPGsK
oWINnSP7UUTr8BPrXJcZ43AXf89Qb3syogPEmtmOD4b1ob+ZPoMtTQR7WKqa
vIMsLcRow9sjh/HumyN4c8ggxn70PtFBviwoyWXZnEJKUqLws5vAR8Nt6WvU
lR6v/QO9V/+JQftX6fzvf9LhX//CTL8HIwf05+0Rg3ljUD9szXpiadCFkX1M
mfXp2xTFBtFYlcuK6jShZJYVR1Ob4k1VjBPzE91oLAphc20iWxamsL4mkrVz
Qlme501hxHgW5blwZnsZDwVjcG8Pd683c/7QPC6dWMgPX6/hxvUmLpxeyrpV
mczJC6IsI4iceB/idI7EBbuQGuVHlOAIt9kTmTlhDNPHj2b2lI/xtJ+En5PM
lbIjJtBDsUaCzovS1FgKBV+khwUIhohT3nLXaeK79HRRvRGDBO+FeDgRG+it
amKtqCkV7xeu8rhknET6SeS29IjIWlpF6YkUZiQSK7YTo3TkpsYRFepDqHhP
WRNL1tyVfc6PH9nD2VMHlb9p354tbG1Zo+piSR0/vIvvBFt8d+UM547t5aqY
I3VRsMoZwR6SP66eO8LVC8e4dvGEYJBLPPn1Fkj++O0xL54/4uCBvdTXr/jL
n2lNmjRp0qRJk6a/s1Y1CKbYt5eX4r87v/zAkZO7OXluD63b6igpSmDpomIO
7N6k2KM4J0mxhuSOrRvrlTf9wql9KudqTkm6GtfWL2Dp3FIaZC+QnZvY1LSC
4sxkFlWXs2l1HQVpyXg5zCZQMEd2UiJZifGE+Ym1oo838aHBZCfEExcWqjwc
Mo/qD/+4jIVIzlg6fz4La2qoLitX/QrzMjKU5DwZG6kuK1PcIj3rkjPcHR1x
c3BQ7CF7gEgOkefipP9cF6QYQ+ZgyVF5UWKjlBfET/Yg/G9eVlSokFjvhgd5
EeLrip9YT7vPmoiHWF/rPGdRkBRKeXoMTpM+YZCFIf169WBIH3PBIFYMtRHq
04c3hg7mvbdGMuadN3GeMo60cF/m5sSztraQQ+uXsa9podjOF8eiiPedjeMX
7/PxCFtG9e3FCJtevDXQmtGCTz5/bwgzx72Dv+ME0sJcqckKoVEwx/YVxWxe
lMPy0nBqswR3pLhQm+7G0mwvVhUFsXluLDsWJ4kxhtVFOmpl3dyAz1lc4MnN
s6v47ekxXjw+xPXL9Zw6UsPFE4s4faiKr07XcuPyCjbWxZMbY8/CvARx/XT8
Zk9lyidv4+88jYRQb8L9nPB0mCi4YwwTPxfHPWaSkxSBv/iupn3+Ps5Tx+I5
cwIeM8aTJRiheVE1W+oWM780V8VGpGQfQpmrJft+yN4gPvZTFH80La5h7dJ5
StKrLvsSyhq90r+u8rrcHQR7+JMRH0FFQSbV4poZyZGCPeIpyktVvpDdgjG+
/+4KRwVHSN+57EcoJT0hm9avYu+ujXz91SnOn9jHod2bOXe0jRP7t3PywA6+
vXiSG0JXTu3n68vHuX3zKx7eu8mzR7cFf/yqenXKvh+3bv3I6kbN+6FJkyZN
mjRp0vT/kuzTfPmrK8oD8vMvN9h/bBvb29aydGUp2TlhrGmay8Uzbeza0iTW
/mUcFCxy8fR+NjcvZ8v6lezd3szWDXXs2trEkX1buHCijfPH9rJ9fQNb161i
Y+NyKvIzqSzMYV3dMirzc9F5uBPp70dKZKQY/YkM8BfckUC54A2pRMEHMoeq
RvBGleCJmvJyxRXS4yH9G8F+/qrmrszNklwiJb0dMvYhWUTGNnzc3JRkHSxZ
v7coO/tPP7uskfV7H5D/n+cjXCd7hHgS6O0p+MNf9QSR/UEkl0SH+BEp2EP6
z3VejgS42+HrNIVAtxmEiHV2bKCz+Pw6EsI8mTHuA4bZmmFrbiQYpDfD+/dh
ZD9bRg8ZxsR33sZp/IfE+U2nLNmTxfk61s9N5VDTPM60LufMjkWc37uUC20r
OLdrOcdbF9G2poKWpbmsqUll1Zw4Vgl+aFmRyf715exuyGfz4hTWz4unuTqa
VWUhLM7xZG66M4tyPVlTGaZyrDbOjWZLbSxb5sWwtjyUucnOZASNp7Eqgjtf
buLlg0M8v9PGNxdXCWYs4dTBudy8uJpvz9fx9bnlXDo6nyXlAUR6fkZ6sDPx
ghV87CbgOu0zZo0fjZ2Md0z+GJcZY/F2noLDjM9wmP4Z7rMnMmP8R0z+9F1V
f/ejEf1xnvQpNYIJVi+sZH5xFikRAaofocrLcp+t+g5KhXo6/NkPXdbnXSCY
onFhFeuWz1eqyE5WrCJzshwnfU6ItytzBHssm1ch7pVc5s0poGHFfBrrF7NW
MPCuHRvZuK5e+dJlPawrF08obW9tVn6Q40d2cfzwTo7ua+W44I5Du1o41rZV
MMdBvrt0kq9OHuD6mYNcv3iEH7+5wG+Pfubls194/uwBL54+4LffnnP9+jUa
VtX95c+0Jk2aNGnSpEnT31lNa1dz5sIZxR8Pntzm1KUDHD2zk+OntrN1ex1H
j7Zw+vhOtm1uoKV5JTs2N7KjpVF5PmS+1camJar21b6d6/ny/GGunD0k1m2t
VBdmsnBOIZtWr6C2rIA5+VmsWlRLTVE+mbFxpMp6VoIjQjw98Xd2Jik8jLmC
IxYIziiSvQOTk5WfXPZDl7GQhMgIwQThii2SY2MozMlWuViSPWSO1h+e8j9y
rTKSktX5hXNrqCovIyc9jXjJHoEBqr5vmC6I+Ogo1XNEbgeKY4E+3sRFRf7e
i0S8V6g47ufpKnjDgWAvZ8EbMi9oNpE+DkQHzCbYbTK+sz7D236s4JdZ5KSJ
a0Z4iDX3B4waaEk/i54M7mPBO0MG8PGQoUx56w28J39Eot8k5mV5s05wQ+ui
DHYtL+TomkpOtlRydGOZGOdyee8yvj7UyPUDDVzctYwzWxdxoqVGcEcJbU2F
7KrPYVNtPKvLw2ksDaGxREddvh9L87xZURrIutpoti9NYffKDLYtSmRjVSRN
xYFUxM4kVfcFq+fFcu/6dnh+jt9+OcLV4ytp21zIhaOL+f7iGq4cEizUVsP5
fTXs25DH4qIAUgKm4jHhPaZ/MAo/u4kkhnrhNXsCUz97h8lCMwSHuNtPwNd1
Gl6CQ+ynfoqd4BLJIc7TxwkGGcH0z94nOzaEopRovMQ1XKeOVf6QhGBvlZ8V
4eMsuMNTMEeQyrNSNbT83FS8Q+7LniCyN4j0h8icrFRVq9edOJ0vuckxlOem
KfbYI3hj944N1NctpE3cj7LXoOSOdWtWqDws6f2QOVj79rZy7vQhrn95mmMH
twv22CYYeh/H921T8Q/JH9fOHhEM1sZ3F45w48oRvr18nKe/fA+CPx4/usuv
D+/x9PljLl25yCot/0qTJk2aNGnSpOn/qcbVDWzYvIGnL57y6Pk9wR/7OXlh
7//H3ls913Wu+5r/RldfdXX3zT6wYe21VlbQcWKWxcw8pakpnmJmZrKYLGZm
tsBCW5bZjiFxHHTIsR1D/PT3fdlO9V2fOr1PZa9d4+JXY8xBmjBG1fvo9wKf
3NtmdX2A5ZV+Jic6GB+RfkcXUyMdLM8NMTXaqerN5XpzfYla3rq2xdWLa2wu
TXCmSPBHVRGdjWfITBAxfVQYxdlp5KUlUSbYoSgznZToSCoL8siIjyEp0khZ
Xja15cXUl5eQHhOtfJIwwQVxxjBqy0poqauhuCCHnMwUcjPSFJdIL0PyhvQ1
3tSo1wjemBkbZ2Z8jLozVWSmpiiuMIYEEys4Ji0pkfTkJGKjItD7+ij+yBZ8
IiX3y23uzk4E6fWkivcWE6TD380Ob0cLDO62xAd7YvRzQOd4giB3M6IC7EiM
chVyJ9TfhrhQDwJEDH7oL/+F//p//m/85R/+D47+yz9i++5f8TV9j4wgS7oF
L0hfYq4xmfWOPDZ7CtkazOX8YA4Xxoq5PneGG3PV7I+VsdWXz3pXNivtqcw0
xTJVH8lEXQQTNUbGqsKUxitCGCuT9eVGJpvimG1NYrIhjrHaKEZroujMD6As
0prKBEeWxPV/+noDnl/hyTfr3N7v4cpaM3cv9PD93Rke353j7ma74Jwc5jpS
mG1Pp786gdIEHQZbwRSH38bX+pRgRwelpHCd+Lw22Jgcwt78MDp3WS/jQqje
lUCdM56OcnaKI7EhklcssDc5rLwOOZ9QJ15H6d0Fd7gqDpHskWLUKx6ReVjS
45CsIdlD1npIT+Q3r8RJ1aRX5aYw2FJLf1MthWkJxIXoqSrKZndzhfMbc0wI
Xt7aWVZ1H/PTQ6rWQ/bEunqwpXwPmYMl87I+EduuCO64c3X3N135be7NZbH/
tuCTz65d4IHg6+8+PeC7B+J7++5TwW4/8eL5Y54+fcyLly/59ruvGR76459p
TZo0adKkSZOm/8hSPbBGhvn19a88e/49KxujDIzUc25jkAuXprl0dZHx6Q5W
1qa4eEnEqjd2+fSTfdYFe6wujTE80EpDTSFDfc3MTvYqDpEeSW1FHlXFWXQ2
yz5W2SIOdScpOoya0kJaaipprq6ksiiPs3XVNJ2pEFySTEpMJLmpgk9ysynJ
zCTJaCQ+PIyirAzBJaUU5WSq+oxoYyjRYaG/zTIXDCJ79fZ1dNDW2KhqRN7U
pednZ5KTkU5TXS2NtTWKL1IS4hVjhAYalOcRbQwnKy2VpLhYxScGPx3e7m6K
QaIjjBTmZpIWG463gwVBIuZNDPVD72qBp80REQNbEh/kQmygPRGCKXxdP8bN
9n3BUzpKsiIw6h04dfifBX/875z48z/gdeJ9IlyOU5fqy1h1JDP1Maw0JbDV
nsF+fwFXxgq4NlnM7bkKPlup5dPlam5MlnB5KJ/tzjTOtcRyrlmcVx3IaJk/
M2eCWWqIFNeIYa0lTuyLZV5oqjmOYcEhHQV6mjJ9qE1xozrRlfGaOO5tdfPi
8R78eo3n323x7d1ZPj0Y4s5OH7fOd/LZhQG+ujTCtYUmFjuzWe7Jo7simq7y
eBpzBRM6mmL27r/gcOwDvGxPCfZyIy8pXNXBmB19myPv/SOuticIFfwR6OuA
m4MptmYfESZYpL4sm7ryHAye9riYHVPsEWOQLOeCm+UxXMyPYBS8khMfSnyI
j2Kb3EQjzWX5qg5E+h2y/lzWikj+CPFyJlmwSm99JTe311kZH6QsO5XW2nL6
e1o4c6aQ3r5Wzq1O/+Z1LE+p+R+SRW5e21OeiPQ+ZC+shdlhDi6cY3t1Runa
xXUOtla4cWGdu1d2eXjjEg+v7fDzF9f45bt7PPvhgao9f/3rU3755QmvXr8W
z9ArpgTL/9HPtCZNmjRp0qRJ039kDQ0NsLe3+9sMkF8ecf3WFlOz3QyPNbG9
N8m1W2uMTZxlZLyDjfPTbG/MMDnWRUVJBn1d9YwI/kiMDVLqbq9hRHDImNi2
MCGu3d3EyuwoC1NDpMZFiLg8iu6WRjqa6qktK6ZE8ERaXDSFmWkkRoYTFWyg
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
MMXH6OwPqbwvnc0RwT4m5ET5E+5pLfaZ4Gt/DBfT98WxxwkQ/BGlcyAuwE1w
jT8pgg/87M2V/yHrPqSfkRcbpnKxZF9e6XXU5aVxtixPMYj0P6RHIr0Rud5S
kqMYpCwtnvSIQPIF18jZhEZfF5JC/cRn9iIlXC+YyU75GbLeQ+ZbyT5YsuY8
0uCpOKQwPZaCtBjKs1OoKc4mNymG/LQEupvrGBH3xuriLBvLCyzOTLC7vsSn
ty7z+Z3rfHL1IuuL06zOT3Dj0g43D/b47JPL3L68zfnlSbbPCd7YX+PK1rzQ
nPJAdpeGubm3wI+fX+Hb+5f4Surz6zz+/iGvXwr+eP4jv/76hC+++lzVfGje
hyZNmjRp0qRJ07+PZO/dazeu8JqX/Pr6GffuXOb+7Ys8uLvL1w/3uXVznbt3
LjA10UVfbwPnVsbZWJtidqafro4apsZ72dlcYnykW+VbFeSmKO9D1qJnZ8QT
ZdQL5gghOiJU8Eiqqj+XPXcld1SWFaqcrIRYo+CGAsE0HQyKOLO1sU5wQhxx
UUaVg1UmlJmapHhBsoX0PCRvyL66kjNkPpZkCJmDJT0RuV32tJKSvCE5RPof
8nzJHjLfSrKIZA65Xx4nc7UMOh1+Xp74errg6WaPl7sDgXov/HxcsbY4qWRn
Y4qHiNH9RCztZHECi+Pv42FzEn9nU4I8LIgKEHF9oBOJYe6kRftRlB5GYrgn
Ps4nCfSyIDshkMgAR3ycThLkaU6Aw3F8bT7E+dRfBWu8S7SPGflRHsT6mKK3
fp9g16PE6q2UAl0+xvHkv+Bs8q94Wr4jln8WPPKWOOYYYZ4m+Fgfwuhtibft
R9ge/TOOp97B5sRb2J38Gx7WH+Ni9j5Op9/D0eR9nE0/xNdOcslpwSB61evK
4tBb4homv3sdUYKx5LImJ0VxiVRxUpTqyVsQbyRa56aYpTwtTjFInuy5HOBJ
elSQyrVqrcinQjBouI8zAS7WgsmCSBA8EuzjqHruyhws65OHVP6V5I+M+BDV
hzcnIZoUYwh5KYlsLc5xY3+P1oYazgoO6eloFdx6lrH+Dq5f3FT8MTvWR29b
o1ouz4wqNrlyYU1xx/nlCb64c/DbzPODdT7ZX1EzQPZXx1iZ6OD2xSV+/OIa
rx5/xvOfv+DH7x7w7MkjeC3ncf4s2FswdU/XH/6catKkSZMmTZo0/WeR/L/u
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
0G/QEU+UCX+Dc6vY+2DPg1mEuYPZgbmCuYNzrrjmg7nkB4v8qP3g2hDO0eJZ
IMwfnJPFngjXhPAMQuaPwtwsMffQ28NF9OPKy0lEeVm68D4C/SkmDyZmoTg9
Rx6LxKgA+Ls7QOZG92x/ixjEEWFeXhTXRyDSzwtJYcFCzr9dgp+jPcK8OX73
RWZ8NKICveHleB23Lv0Z/h72iCfuSIwMEExTmpeKtoZiGLpq0dFYiBTihaQw
b8QQC/jc/AWe135CuOtNxPu7IsbXBTkxwSJPij0MniHITFGTHYeGgmRU5SSh
PIsYLMgDYZ52KEgOJ/4gxvNzQrjnLWIUYotwP0QSb2TSZxbh4wB/t2sI83OE
t8sVRAS4oCgtBg3FWchLjkIMsVdKtAypMQFwd/gFbvZ/QwjPNyQOcbrxVwTT
cdWlmSjMShCvKS0+HEXZqchMjkVBRioGdJ043d/AxtIMJod7YB7qxlBPB3o0
zViYHsLR/goWiEF69W0Y7FPBPNKN5YUxrFrNONhdpO1WzFh6MTqsISaZIiax
iu3b63P0/dzCMbHxGenx+S6e3t3DvZN1nO0vEYvM4dHtdXx+R8xx8QgfX9/7
3f/48ob44zOOD3cl70OSJEmSJEmSJOk/WTqdFrMzM3j29AlevXyOD2+f49vn
d/h68QafPryi5x/w9OFdLC1MY3GemGNvHcOjvTAYOgR31NWViL5XkRSXe3jY
QSZzRVxMCCqKc4kbkkSuVW5mMipL80T9ObNIl7JJ9Lzifrfse3DMHxMZgpbG
GvQZNGJmiFqlEPUaPM+jurxM5GHx8o8Z5lxPzt4I510xb/A+zBzMIMwjXB/C
67k3LzMLH8Pswb4JP/J5E2JikJmWSucpErMQ2ZNhf6aupgQVpTmIohjdn2Lr
GIqp48IDERnoKxTh74sAD1diCXt4OzkgjTgnLy0FAZ5uFKNHIdDLHdd+/glO
136Dl5M9ImQyRNJ9hwf4woO4zOnGZYT4ucPL+QZuXvkL/Oh9y0yJRENtLr3u
clSVJiM52ptifroWXd/P4TJk9lcQRcwS7eOCUFd7JBLblREj1GSnEEv4Ii3M
C8kh7kgKckNWbDAK6XUUEjuUEDMxY3jd/BkOv/wb/OwvI8Kb2MHTHr70PMjt
BkK96TXEBiArkXOoHJAU7Y/izHjo22rRUpGPJHr9GYmhxBuu8HC6giTaNyUx
GJHB7oI93B0vIzrEk1jKH/KEMFSX5KClphQ1ZfnoaKoj3ujD9uqCmM3B/KHr
aERXazXGjBrcPdnA+fE6+nuU0KjqYZ0dFizCfbCscyNYX7FgfsaIxQUTaRir
i6PYJAbZtLH3sUR8soQ12mePWOTu0Tqe3NnBg9MNHO/M0zXNuH24iDdP9/Gd
+ANfXuDbx2f4/v0DXr14gpHBAWnmoCRJkiRJkiRJ0h8g/h+wWq3GlGUSny94
HtsXfP/C+fHv8PjBHZwd7+Pe3VMsWmexZlsQdR6dqkZkZycijf//nhIlZn/E
xQUjj/updrWK2nN5SiyCZF7EGX5orCuHurMFRQWZKMhLR3ZGCkKCfJEQG4Gy
4jy0NdcJ36NbqxI9sBpqq1BXWSF66LLvwTXoPBOd++ZyHyxmDI2qQ+RbMXdw
LQh7JFz/wb15eZuxt0fwCNd+MHcwa3DNB7MIL/OxDTXMJ9xHKxIxxEK/z2mX
U3wdhWB/T3hTzB/qz/1lQ4g9AhBGx8rcXeFPio8IpXX+SCHmiAiQEV/IkJ2S
BHd7O+IMe4T4eCEmNBiZyYkIoudezg5wvH4Jfu6OdGwQvF1u0PLPCCVmS4wO
QGFuPL32DLqfWMjjZchPj0JMgDvsf/4TPK/+jIxwiu+Jg3xu/QZ/hxuI83dH
AnFIjJ8rwjxuwvPGT/AnPsiOC0UR18ETf6THBCPKz4VEvHTrEm7+9Cfc+tuf
4E7Xdb36E1xInBfGPNCnaUV2ahTSiENK8lLQ2VKJtpoipEYHoaJAjlRaz3NQ
yoszERvlTxznSe9pFAJ8HOHtdh056XEoL8lGXGQgYsJkxH+1GDJo0VxTRszR
gumxAcxPDgn/Y9Kkx+IM+1zt9Fk20+dcLJiDc67mp4eEFyLqQBbGMTXRg2Xi
jv3dBWxvzsA8qsPEmB7L1lFsrVuIRSaJbeZxvr9Kj3PYpWXmjrvHS6RFPDpf
xceXp/S1fk4c8gKPHhzTd0OP7m7dH/7bkyRJkiRJkiRJ+leWqrMDE5MTeP/h
Hb59/4qPxCL375/j4aPb9HgC87gRS4tmLM6NY3ykh+JFDcX7WcQZ0WisL4Wx
j/tpDdLzcqQSeyRRDJ+VmSx6SmmJR0aH+2l9NGR+boiLCSOOSBHcMTzYK3yP
9pZ6Ef9nZyRD3dGGhdlpkU/F+VM/ZqBz7hXzRa9eR7Frt/A2mEvYG2EvhDmE
6z/YD2F/hPtfsfh4rkNn/4TztphTWhoaxPGxkaHEGj70GIak+GhEhgVA5uMC
H08H4h0XBPi6Cf6ICwtBuL8f/D3cBHekct/ekCBEBweKdVnEGRmJ8XC+cQ1R
QQEoyJALpSfEIdDLA07Xr+DSn/8kPJCYUBkig7wg87CD042fERXshZL8ZGRn
RiEs2BkRwS5IjQtCMN3Dr//2v+DWT/87YmWeSAj0Jc74DTKHm4gj9gh0vinY
glkkytcFCXTO5HAZ0uPofkO84eN4FTK3Wwj3dYfr9ctwvvorAjwcUUUcmJMc
LWpZKogH+zTtqK3IR2VxNloay9FUW4SECD+SDHGk6DB6Hh0qZqRkyBORl5NG
vJSGdDpHFPFlKN1LVVkeOtpq6X2OQqY8Fu3NVcQcJhi6FKgpzcfogB7HOytC
+xvECetzmJkYENzRb1AI34PZY3RIS3zQAct4H9ZXprC2MoGj/QVsEFds2CZE
HcjQgBLW2QFaP4+7xBf3T9dw/2SNzmvB6d4c3j47wIeXJ3j9ZA9vnx/gy/u7
+PbhCS7eP8W4yQC9lHclSZIkSZIkSZL0T6EOVQcGTYO4d/8Ovn7/hDfvXuDT
59c4PNyAQlGNxrpiKFuqsb2+gM2VOfRoFWhtKKfYMxdaVTMxQLXwO6IiAkW9
eWtztWCRnKwUTI4PYqBXLWpASgqJKUoLKZYcIpYxQtPZLmaB8EyQxrpKWjcI
g1YjmIHZgrmC559zncePOYPsjXB+1Y/6kB9zzQtzc8R29j24zpz5hcU5V+x7
8D4/5oowm/yemxUkZo7ERUeIvDBvDydRi55MDBUdHoSYoCDhcbBiQ4MFfwR4
uguuYMnjY9FQUSaYhBmFuaOiIE88hvr5iH1l7i5wuXVV+B8pscRfqcQl3o60
7lfkUrze2lhKcT2tkznAy+Uqgmgb98Wy/+XPsPv5z5A53kKkjycCXZ0RRtes
ys9CRnwEEsJkyIwPR0ZcKC2HIYz4juswUmODkRQdiFBiD5mHMzyd7BEe4Ick
4iye0dFG77OXM+d+xaGhqoS4Ryby4upryug98MX1S/8djsRGqUnh9B7xnHh3
REaEoK2tGasry3S/tQigdRF0XG4mz2XJpc+uDAadkj7Xfvo+tMDUo4NlZAD9
ehWmRvuxtTJL/LGKw61FzE0YYSL2GOjpwMzkgMi9soz3CgaZmxoUdSBzlkHY
lszY35nH7PQAZiw9xCDjWFkcwvaGGbfPlnHvjg33z9Zw+3BJzMl8cGbDk7vr
eP/iCJ/fneHbxW18+3gXXz8+xft3T+l60qxBSZIkSZIkSZKkfyZxT6DR8TF8
//4F375/xNdv73H//jG6de0Uu0dQ3FmBnQ0rxoYMaGuqFDzSWFtC8X0IxeoU
i2axr1EDbVcbVO0NKMhNg8zHFZVl+VBTTNpn6CQWGRK15l0drdCplSLnimd/
aLsUgkUaayuRLZcTP0QKH4NZgf0O88iwYA7mhh+eB3MKzwJhL4PZhL0NnmvO
tec/el2x+Bhe92OeOu/7o049Oz1D+CahxBVhQf4ICvBBUkKU6BecEB2OmODf
+YN9DfY8mDl8XJwEWwR5eyI5OhK5aSkI9vES/MHL7IWwZ+Ln5iJysoK83Wm7
O3xc7RAXTuchTvNwvIrM5Ag0VhfQa6hEVWU2YqL94HDrFwR4OyHC3xPuN6/B
6+Z1BBA/hBDHhPr6IJLuJU+eSiwUQFzjgBBfV4TJPOiaEQgL9IC701ViA2eE
B3ohyNcTSbFRiKB7d7FzoOt7IFzmA1+6/8t/+wvio0KRnZkGP18PhNL5Iogx
POmcQf5ucHH6DYnENqHBvrCzu4a4+Gh0qtWYmZ1Fa1MjosKCEBsVgpTEGESG
+hO/pGHWMkyMMIfebgUaKksxRSx5tGODeagHY0Y9sccSNpYm6bmWuKRN5F+Z
BroEc6wumkVtOTMH+yBT431Ynqfl5QlsrE0Sd4xid2sK+7vTONifwfnZIsmK
J/e28Oh8gzjEhkfEI1sro8QjC3j1eBtfL+4AeIwvH59gZ3MBOo3qD/+NSZIk
SZIkSZIkSfo/xXnxY2Nj+HTxAZ8+vcPFxRt8//YBZ6c7FFN2iH680xOD6Giv
RVNdKQZ6OkVOVkFOCsX7YRTfp2PAoMambQE92g4011egvDgXmakJxBSJGOzT
YX1lAQO9Oug1Hejv0Yo8LEVrg2CRhtoKJCfEiJ5V7H8wfzBzcM4V9+BlpuC5
5byd+/FyjhbXdrAPwnUizBPsabA/wl6Ih4uz4A9mD97GzML17LyN5xLmZ+cI
/oiPjib+CICPhytiI0KRnMh+SShCAnwFZ3CdB/PED+bgOhD2Qgoz08U2XvZ2
dvzH9vjwULGdmSXA0wMeDrdI1+F66ypcbl2B041LcLW7IvgjKyUS5UVyZGbF
w1fmhOu//RXBMnf4e7jA/vKv8Hawg+f16/BzdkJkcCAi6ZwRXI9CrOPr7kSc
4YeY8ECkJYQjJSkMwQFu8PG0F3Mf/bzcxOvxdvPElb9dwtVfr+AGnTMiOIDe
wxBiynhkpqcgKEgGP5knXN0dEU4cWVaSgQAZvcbYUGSkJ+HqtcuIpfc+N68A
JWUVMBoHKJbvRHZGGl2T1mfLkZWRCNOQHmMjPaivK0FJbiZGBww42rJhpF+H
oZ4uHG0vY3dtlhjEgvWlCWKOceF5mEcMorfuipVYY3VK+CGcf8U8wn1615bG
cLRnxb3TNeyKuo8xHO/P4mB3Cqe7C3h6ZwcfXpzh1ZN9HGxM4fxgAa+f7OLr
x9v48OYclvEB6LWdf/jvS5IkSZIkSZIkSdL/Vb29BoyPE398+ogvXz7j2ZOH
OD7aw+nJDjbXrRgzGdCtacPM5BAWZkYxOtSNfoOKOKBZ5GFFh/mjqjQfk6NG
aFWtqCzJI25ogkGjhL6rHQa1AuqOVpF3ZZ2zCL+D+/DWVpWiuqJY5GGlJseJ
uDgvKwvtzY2i3lzX1SnmEDIjMF8wczBjcK4VswfzxA+/g/0Snkf4o9cui/mD
9+Ft/Mj8IrwPeSadK4OULs7JeVrJcTHEODJEhgaK2pAwX1/habD3wTzBfME1
H0lREagszBd1576uzoJDclKTkRARJrZxXhbvz56Ir6sTHeeCmGAZ3IlD7K/+
DIdrP4v8q+gQb3qfMpGSGgN3Dzs43LwMb+IAd2IWt1s34GlnB68btxDq5UP3
FAoPJyfE0v2XF+WjICudmK2cWC2WWMkH8jSe6Zgq+hyHh8iIp1zoXK64fvka
HG7Yw8PZDS7EMxkpicjPlCMmirgsPgb+9DqjosMQnxiNaGKOzMwEwSEpqXFQ
KJoQERmKyMhwWp+FrOxc9A30YMI8jKbGGrS21KG9vRFFRVnQaFqh1baLHgWt
9VXQ0XdgZ80qPDOeAbJErLplmyOesKBX144pcz9xxjR9j/RirvnW2jzOT7ax
YSO22FvFzvocZsd6YDFpsbtqwVOekcmcMjOM23tLYtbH4eY8scYJvn18gs/v
7uHl4yM8urOJD6/OgW/P8OTBLlTK1j/8tyVJkiRJkiRJkiTp/y7mj5HRcbx/
/5H0DivLVgwa+7BknRH15cq2WowP9+De+Z5gkE5FPfFFneCPHp0CRXlyiolT
UV1WgMaqEnRSXGqdGsOadRo9xCDmoV5srCzA2KcX7MG+B/fera8pF/MHy4hX
Sovy6PgylBYWinnnzBLc94q9EK4t5/oNrgXhPrzMHpxLxV4JzwXhnCren/fl
dcwsXPfxe815vdjOLBJNjMCskpaYgqy0TGKXJOIPOXIzM0Utur+PJ6JCiTeI
QVKJUxIo3o+h5YyEeOKLUMEVcWGhyEhMQCKdj3vx5qWnobwgF8VZGUiLjRYe
CHOJu91NOF3/DYFerkiLixD15x6O1+DpfB0JkQHIIWaoKc+BPD0ePt7O8HSx
h7uznejfy3Ubrreuw9/FBTI3d7g7OePXv/6F+CkU+fTastNSUJKXDV837o/r
gKQE4p60OIQEc/9gD9jTsfZ2N+BgTyzj6gJfHy/Y3boGb7qXgEAfuHFdiqsj
ZAHeyCD2yy/IgT+tDySlpMbTPSWj26BFU3Md4uOjkJ+Xg+zsDNQQ8/QP6KDX
daCxsQqlxJ411SVoaqqC0ajH6uosZqeG0atXiu/J4e6q8Mr4O7I0b8ZgnxpD
A2qxbX6a91Ogv7tD9Lw6P93G8tIENjfmccCz0WeHYZ3ox+qMiZhjGefEHHf2
V/H+yRnxyA7uHq/j09tH+P7pBb6+f4KLN49w8fYhvl68IP54g4d39qHVSN6H
JEmSJEmSJEnSP6v6BwZx8fkL3r59i72dLSxa5zA/ZxEzQMaGujEx2idysLjH
ka6rRcxNF+smB6HvakVNaQHqKopE39XdtUXs2Kzo7mxDVXEuJk192N2ywTIx
gk5li+i/OzTQQ7HquMjH6lQ2Cw5pb2lGR1ubYA3mCO69y72vDDotxbEGOq5I
sERrQ4PIowoNCBC15byOfY8MisvZP+G6Ds7LaqqrFezC27iuJJcYIVueRsoi
/shCZGiE8BZiiDOC/f0QHhyIYJkv4ohFMpMSEBsWjISoMGIrOWpK8mldHCIC
/IgdkhFNXBLm74sM2q+unGLwmkrhfYTS8f4ernCj2P/G5V/gTHF/CsXwidFh
kHk6IdTfEznyeORnJqGhpghpqbFwd7GDs/012N+4QrqEm9d+hbPdVbg63sCl
n/+CX376Ky797a/wcXcnucHfy5vYww3Xf/4FXg7EEb7e8PBywyW6nqOTHbGF
E+wdb8HZxQHOzvaCNX699DN+u3YFoWFB8JP5wNPLHVFR4UhPTyW2yEJ8Yiyy
czJQVV2GgsIctCtaiD9qkZgUS5xRSOtLUVqaD6WyEdXVxcgj5qyuKUZ7e71g
D5OpB3NzZmytLWCDOGSOOISZlXumrS1PCy/EoG0nDp3C8b5N1H3w3HOeP8i1
ICtWM62bwBr3v6Jt26S91Smsz49ii54zf9w7XMXbx6d48+gILx6e4MPLR/jy
4QW+fXiFL2+fE4e8EHMGv7x7geHBPhgMUr9dSZIkSZIkSZKkf1YNEH98/fod
Hz9+wMsXz3FyfICtzRWcHu2I2HFqfAAjg3pij1bx/+1H949FjMl5WBplE/qI
I1aJVyymfvRpVehRK9DeUCXmYtdS7N5D64z93Sgl9uA+WObRIcxME39oO4gT
qqFobcSIkftidQjfg/vuZhJP1FVVoKwwnziiFHmZ6Wipr8VQXy+UbS2CJXS0
f5Y8Bb6e7kiMjUY+MQZ7Hly7zgzCfbQ4F0vwSWrK7/UfWTnELYmIiYgQYo7h
PKz87EwEyWRiXmFogA/CArwRFUrbUuNRmp+JjORYpMRFoqwgmzjFW8xRL87L
Rmd7C2orSpEYE4loYpZsup/E2Cj4erjA8eY1hAXK4O3mBCdiERf763AjrkhL
ikRtVSGC6Rp21y/D7sZl/PzXPwnZ3/oNft6ucHa6gb/8mdYRf1y99Csda0/n
dIefuwfC6D6DiUM8b9kTpzgRf7jjxo1rcHdzRWCgP/xlfvD09ICDgz3c3Fxw
69Z1YhFHYo5IkVMVECBDSkoS4omZ0ngmY3UFikrykCZPQm5eJgqLcsVjAnFJ
EX1meoMGNbVlyMuXi5wr5o7BwW6o1W3o79diemYMw8O9GCFWZd7gHD3O2fvB
HvxdYd9jf3uJ+GRa1H9s2mawRRrqVcFKy2vWCSzPjcE2P4bDtRnhexxvzgsG
2V6awOH6LB6dbuL53R28eXoXn948J/54g++fPxB3fKXHTzjZ30N/rwHdeqnn
lSRJkiRJkiRJ0j+z9N3dePz4KS4uLkQO1vOnT/Do4V2cHu9hc20ew8Qem2tz
WF+ZgUHbBtuiBSvzk7DOmLEyO4GtpRksT49hlZb71O3oaKzCvHkIIz1q1Jfm
oiQnFenJMVA01mCEOKRf1ynytDram8Tsjx6dGqOD/WigODgmPATy5ESY+g3o
UrRRrO9DzJAOZUsDyovy0FhTifamBhRR/G806KBRtSM3I03kTjXX1YjaEe53
xTXn7H9w7hVzB/si3AurKC9H1LNncN1GTLSYJ9La2CDqSuKioxFLMXqwzIt4
Ipx4xBuRIf6CLdIoFs/PkiMrLVE8L8nPRXJcNJpqq0RdRnpyglguyGafJRmB
vl5wICaQERsE+nrChxiE+cPL1R6VJbm0Xxqc7G/A2eEmQgJ9cePqJfzy07/D
4dZVhAYRP9D+P/3lv5H+jOtXLtOyC/y9ub+VD+LDwpEQTuzk4ws/L09E0GsM
DQ2GB/GJi4sT/Px8iUMC4OrqAm86xpeO8fX1RnR0FGLoNXt6eiKW616SmUHi
ICdmio6KQEhIEOTpKSIPi/OvmlvqBX/0DxBraBXQ65SCN7T0fHzcSNxK77+m
HZOTJor5O8Q8EPbFupQNgk0Pdlawt7UkehiYBrTY31nGhm0a48M64o9pnO6v
Ynq8D7PmPsyN/a7tZQv2V6dwum3Fk/NtHG3MYWd5EncPVsXyu0cnwuP4+ukd
8O0TvtDj8f4uhgb6oVV3/eG/JUmSJEmSJEmSJEn/z9LzbOjefpyd3cGHD5/w
+eIzHjx4gN2tTczPjEOnacXc9BBxhxl6dRN2bbN4+eA2Hp0cU1y4Q9wxirE+
DcWKi7h/tAmLyYCN+QksTg5ikthlytQNFTFJX1cbtIpGtNSUoqasAO2NXFti
hLZTiZb6auSmpyIrNQnGXmKUbi1yKBZmHqmrLEO3WoXYiDCkxEcL3ijMyURt
eQn69GpUlRYhk45jLmGWYA+EeYLzt7hehD0VnifSo9OK2SDMJD+2cS0J53xx
LTvncnGf34zkeHHtID9vhAfJBFsU5WYK8f1UlxXTfcQKNiotyBXMwXlb4UH+
CPDxJGYJRKCPD7GHBz0PQkRwIHw9XeFsxzzigqaaMqQnxeDmtStwuHlN1Ly7
Odvj6uWfcZM4JOTvyzeuXsblX3/BrWtXEUY8ER8Zhey0NMSGhAr2SCQOCQ8J
QUJiAqKioog9XODl5U0sQvcSHg4fugcXF2diD1/ijhjExTFryBEUFER8EohI
Ol90dCxSUlL+sa2ouBBZxEbj5mHML0yLug+1RoFe+nynp0bQ26tGZ2cL5unz
ZQZh9pii9YtLxBUjvejr7hB5V+x3HO3ZcPdsV9SCWGjfsWEDlqwjsM4PY2dz
FveJJ3iG+VifCnMjBmxbJ3B7b0XkXK3NjQj/g3Ovnt/dw+uHR3j14BDf3j8i
7HgJfH0PAhBsrC6hU6X8w39DkiRJkiRJkiRJkv7HpNdrMWAcxLv3H8F/R0cn
mJ6YojhxBeurs5iZMoo+qdPmPqxZx/Ho/AAHtlX0qNqhrC/BkF4Jy1A3Xt4/
ovjRgo6GcugV9bDNjmKPjrcM9WCoW4WW6lI0U/zd1daALkWL8D9qiS/kSfGo
IZ7oVLSio6URFRQHc2zPMT/7H8wXHMunJcaJ57xvW2Od8B8SoiPEPjnEGcwV
zB+cU8X+B/ff5f5XzBncv5eXeR+eD8I5WTxPhGtFuH69S6kQ2+qqON9LTtzg
L65XXVaE+qoy4p5UhAb4Cv6J5z5SdF3Ot0qJjxH8weuYPSJDAuDrQewRHEKc
kYyokGC4O9oTf9wgtvCley9CWJAfccUV2F2/AjdHB8En3u4ucHOyF96Js/0N
BPj5wN3VReRfhfjL6PWlo7aiAlGBQfCyd4CfszP8PD0RFhaGgIAA2NnZEXP4
Ijk5BbGxsXB1dSW5EWsEIT4+nvYLR0RElOAR3j8uLoGWI5GZmYm8vHzU1tZC
Q+9HJ/GgqrMd5gkTOrtaoVA2QdnRCJWqmb4nHTCbBzE7O/6Pug+LZRirtnni
CrOoE1qlz59zr/hxxTop+jVPmY3ooe/I3LQRS4sjWFoYwdbqBNYWRjE1qMXS
eB/ONxfw4GBVeB4H67M4WJsR/PHm0TGeEqs8PtsSc82/Xjyjb+hHfPr4Et3a
LtFD+o/+/UiSJEmSJEmSJEn6H5dWq8XTp88Ff7x9+w6nx6d4+uQeLijOOzvZ
xNnxGjZWLNB3NoreqnPmUSjqq9BcWYiWqkIo6kqJN8YwYdRB01qDk60lnO2s
CDYx07oBrRKNlUXoo0fOwWprrEVhTjoqSougbGmCeXgQLfU1Ip5nrtCqFCgr
zBN1FZxfxUzAuU456ali++Is89AoSvJzhB9SkJ0lmILFHMGeB88qVLa2iH5Y
zBzMIswlXBvCXgd7I+x7DPX3Uay8QEzUjsbqSnG+rLRkkWelaOZcrhKkJsQi
PFAm5mswazCHcB4Ysw9zCtd68JwN9kF83NyQGp+E6tIy4o9Q2F+/JupB+Dj2
TwJ8PXHjt0twvHUdnq7OQkEyH4QEyBBH+3i4ONE+PgiiZfsb1+Ht5oqIoCAk
ElcEeXkjwMNTMIinixtCwyIg8w/AzZt2cHf3QkFBEQoLi+Hp6S0UHh4pOMOf
9omJiUdSUgoiI6ORlpaO9PQMFBUVo66uCW1t7bAuWGGzraCisoRYhD63yUGo
1M1Qa1tE3cfwcB+2t1eg1Sn/kYel1rSR2jHMdR/qVkxyHtX6gujXzPlYnIe1
ujSNGcsQxkd1mJ8xYtE6jKHedsyOGrA+O4KNaRPuby/iNrEHM8eDkw3cP1oT
zPHi3h7uH9pETtbbxyf4/oVrzS/oPpbpHqScK0mSJEmSJEmSpP+/iv+PbLFM
Cfb4/p1CPNLHj29xdraPPZ7NsL2ArbUZMSNuf2sRp3sbOFhfwvrCBHp5HkhB
uvA8pod7sL00hQfHW8ITUTVWYGa0H1PDvWgoLxR9evu0HTBoVMJT4Lypfrq2
QdOFypJCkc/Edd1c68GxPec/sedRX1Uu8rKULY0ihh8e6MWWbRmToyaoWpug
am8V3FFWVCCYg+cXshfCj5x3xXXo3J+XZ4KwuB6EY/xgf5nYT9vJTNSAwuxM
1PHM9NISFNM+jbwvcUtKXCxiw8KIh0IFB3H9eVFOlvBi+P78vT2EvxEbESK8
j4zkVJTkFSIpJg6x4RGICQ8X+WOcLxbk5wUXB3t4u7uJGg77GzfgZHdLzGTn
WviQgAC4OTkhLDQYvl4eYq4i53RFBgeL+o+clFSkREbB19ML/gHc1yoA7vQ8
IioaBYUlyMnJQxhxibe3L3x8/BDgH0j8EYigoBDBJ21tCtTXNaK1VUFc0YEe
wwB9/r0wmYYxODgoemD19WthXbJgYEgDQ48SBkMnhujztFot6OxsRUtrLRSK
RtrfgDXbArY3FjHLjEGf8zJ9J86OtkTNEPsfe8QKw4Nq9PW1YcrSjWET150P
4MUDYouDVRwuTeD22hyOli24s0McsmMVzPHuySk+vbiL989u4/Ujev7sDr58
fCb4w7ZqhV6v+cN/N5IkSZIkSZIkSZL+30ur1WBs1Iz9/SN8/vQFL188w+jY
ILYofnzx4jZevbhD65/h7vkW7pzu4NXjc6zNm6GsL0NJVhLG+tSYG+uHoaMR
nU2VqCvJRmW+HCvTY5igOLW1rpxUAZ2yGc11VWhtqIGpv1fUnjNncGze2lAr
HtlT4EfuL8WeCMf5Y0MDgk24Jpzj/wGDDkN9BvE4PmxCY20tqVr07OUZhpxz
Vf733r3sfXD+FdeIsAfC3gfPBOH69PjoKESFhSCfOKU4Jwd15RUoyMpCanwC
8jOziDNyRe1FIsX3cXSMQdMpPJhk4gmuCUmJixH3xJ4I+zNcqxEbHk2PsSjO
zUdtGb0XlZXiGM4r41wrP64nl8kg8/YmFnGEs709cYe/mIOSGBMDGbFRYmI8
Ium+XB0dEBMairz0dMjj4pGdmIwM4pq4qBhERsYhJCQS8XHJSE2h1xKfDLk8
CznZBQgKDIOToxtCgiIQHBSO6Oh4tDYroGjjnmQmLFqXoVKpoVHriCOGoGYm
zM0S+VcWywhWbLNYXJlEP32uo6ZemIkjLWYj5qZH0aGog0HXju11zr2ifRfG
8fTBIc6PbNgkjjjZW4Zl3ACDvpmOMWB6shcjI130/erExLgGO2sT+PDiHO8e
HeN4ZRoHCxbc3ljA0+M1PDvdwLPzTdIWPjy9A3zgHrtPcfHyPi7ePhb8sbWx
in767vzRvxlJkiRJkiRJkiRJ/99kMOih7iKOmF3Ak8ePcfvOKV6/eYJv395Q
3PcaXz4/xdb6DFaWJrA0OwKjtl14HK3VReI5swfnY3UrG2Ae0KK3qxlGnQJ6
ZRNMvRoM9+lQXpiNiqI8jBh70a1VoawoX+RXcb4Vx/ach8VeCHsgFcUFYn43
8wd7HbwuKTZKLLMXwl6EorkBGpVS9L7i3Cr2P7gXlrZTJWo/2OuoKClGW3Oj
6I31YyY678tz1XkOehIxhJgnkpxM7JGN3PQMRIeGIz2JZ/4VoDA7h+6beKi8
/Hf+qKkSOVnseYQGyJCaGCtq4pk/OOcqISqOuCQBZQXFkBMvZKWkEH/UICst
BQE+Xoghjgn084OTnb3gj7CgYKTTPqV0jaTYWCQQgxQQYyXGxBKvuP/9XEWC
a1hpCcQgyVwzXwh5Sg6S4+S0nI36qkYSz0nJh8zLHx5uPogIi0FYCLFWVh66
VF1oqK3HwtwsJs1jaGqqR19/N6ZnJ2Ec7EFOrhydXW1YWprG9u4yDk82sLw4
BfNwP3FdF0wDPNfDgoWZYSzOjWB5fux3tjB2YWaiD1u2KSxOmzA91kNMqMGM
pRe25RGsr45hbqaHjqPlRRN21yext2bB+fYCTlZmcLY6j+cn23h1dw9vHxzg
7cMj0XOXa4q+fXiG759e4uu7p/h28VLkCO5urcNo7PvDfy+SJEmSJEmSJEmS
/udIQ/G7aXgY53fO8PXbB1x8fomLL0/x4cMDPHtyisODZdiWzFhfMGPY0Cl4
Y6SnU9SAzI0NYNM6Ieo/Zkd7oawvx/z4IKZGjFArmtBaX4GhPj2MPTq0ttRB
QRzRXFctWEOtbKP1euGD5BKTNNdXo72xXtSb83oNbe9sa4a+qwMjg31Qd7Sj
urwYeVnpqK4oE7M/uKcV51ilJSciNTlJ1JdXlhQLPmmsqRG8kZaYgNKCAlG3
zvUh5YWFxBpJyJano76yGm0NjcL3yKHlzJQ0ep4DnaoTZpMJzcQReRlyZKel
IplYIUTmL+rMy4lnMuh6GcQw7HuU5ueLfZKIJeIjI4V/EhMWhvDAQMRHRYle
XDJvr7/nXgUKLuLeXTwDhfsD83yT2Mgout84ui+ucSkg5kmDPCmdOIYZqQhZ
qcwr6cQkScQ5vE8R3Vu+2CdEFgJfLz9ERcYiiXiliFho0mwhBiF+ImbrULaj
nd5L7rfbSwwyONSL6poy9PSqsbw6i5W1WUzNDmNkpJfYwiT8D64x57nlc1OD
xBETmBgxYHiwC1pVPX0+Spzsr2DBYoRB3QjrtBGnB4ukBSzO9mJuuhubtjH6
3piwMj+ImVEtVqeMeHayiddnu3hysI7b20t4cGgT887fPDrFi7uH+PjiPvHH
a+DzGzHvgzVpHv7DfyOSJEmSJEmSJEmS/ueKa0K6u/WYm5/Ci1d38fnrc3z5
+hTfv73Ep0/P8PHtI1Hr0dVchYGuNtzZW8Obx+e4s7+OKZOBmMOIp7f3sWQx
obOpGoqGSnS11os5INPjJowTP/QbdKLHLnPFjHkUWuKJpuoKFGZnUJxfheH+
HhiINWpLiyneTkN1SRHaG+pQXVqEtvpaOscAsUINbS+For4BmnYFdB1K5KbJ
ER0ULPKVdAolXbsBquYW1JdXIDk6mpiIlpuaUZiegXZ63l7XgJKsLJTm5Qv2
0HaooGxuomumI5H2Z/7o0+nofvpRV8H3ly22MVeEBQQggXiC1yUTKzB3tDc2
oqWujvgljdgkRNSk+7q7w9/LS9RysEeSz9cjZgn0+32WB88p4br48OAgkYvF
TBIdHkFslYOcjGziGjkdk4+S/FLiplwUZJUgLSGbzhVP95iKlHg5YsLjBJsU
5jCXJMLb0wdJiSmCPTLkWRS3T2LIaERZWQkGB/owQO9vbV0ltPpOTFpGRd15
R0cThkf7MDUzjH6jmr4LKuIHM2YmTTD1azE+3A0zcce0uR99egWMfUosz42K
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
TEYMdVMcTXEm51211lahjXiiX9MFVUsjOkkTQ/0YG+jFgmUCR1sb+D/au+/n
xrYsTc9/rzSaiZmJnpG6q7umqm5df2/e9J7egiBIECRIECDhCRIEQANDEvTe
26Q3yU/rnOzqGClCUswoorOr4s2IJ+APDkD8sL7ce+1dsNo64PWop6NdpUJO
4+mE3j9/pu/+23/T+2cv3LV137944e7p0dvRqZaPtXbMd6p58UrPvv/RfU5b
bf0/r331xi6tLm9sUa+nU5322pdPnujts+eWe1o01Be0jBNSW129nnz3vf70
93+vP/3DP+jpDz/oV8sfztytl7/8atnme32wTPL6t9/cdbLCli0a6mv14vlT
vX3zSq9ev9B33/5Z3/zxD2pqalCnZavG2hq9e/XS7ftw1r168tOP8nms3vb6
9OzX3/TTd85aWP+g//a7/0N1H95ZrvCqyc6j9v1H1X+wjNYVUKh3QAFft4Yt
c314/UYvLH9MjI9pqTqj3Ghao6mYZY4myxpvLHNYpgh1K9TfqUSsV8FAqzo9
NcqND6k8M+Lmje7uesUSPSpVRpRM9aq7p17JdJ+iQ912vs81YPljppixY0cs
ew6rPJVSyRTs+uxEyv7+ZW0vTqqSjWgi2aeV6aT2lwraW57QoWWc49UJbc2N
anspr9tPmzrdW1G1mNWWZZBHd87VnXa2l+X1NKvLfhdf+zcPAACAr8jfpamp
iS/5w5yf7Ghloai9zQV3naK1aknF8ZQ2Fys6WFvQYjGvaj6j+akRjQz1aLiv
Q9WpUc3mRzTca5nD0yB/U63GYxFNjSX1/ulP+vZ3/7uGAl3KRAYU9LZp3DJH
MhSUp7lWnd5mJeMRJWNhfXz3Wk+f/KxAT5fy2VENDQ6486CcGtzhZIKOphbX
y9+eqam2zvJMnZ798LPrtdX3z374Se+evrQM8USv7PmBdq9C3T168+Q3/frN
n9Vsdb7TExIJ9Gp0OOpeNliOefbjj3r64w/uuEjd67fuuEjjh48a8Peo5tUr
1b1/px47rzpnba6Xz1VT80HPLYf83X/+j/rd7/5eDQ2WHXq6Fezxu/Otnj/5
1bLGt+6+7f2BgDvO8d2fvrH7f1Fbc73lDo9lB79CfX3ytnlcnpY2xYeiVv9P
KxqOKDuScTOIM99qoLfHMonHjtNoeSMgX0eTat4/V0dbnfy+FiWivarO5jSZ
j2twoEOpZK9ljYBaWl7r/Xv7TgONGhsLKTzYYTnJPtdAu9KWJcL97fZenVpb
ntT+dlVzpRHLHWEtzWS1PJPT9MiQ5ieSWphMKhP2KR8LaH1mVPuWOzbmxuyy
oPvTJV3tV3V5uKjH6z1dn2xpzzLr6eGGu7bzwsyk/N1ed821r/57BwAAwFfn
7IcejkS0urGhq+sr3Vxd6vHzne6uLrS5sqT1hTldnh7q8cZuL1Q1MtyvYm5Y
U7mwhq1+XSyP6nhrznJISqMRvwY7GzVgWj4+07vfvlNfe4PK2ZTyiSE3gyT6
e9Xb1qrujmb1BTsVi/arq7NFb189swzyyurtWjXU1qiny6eE1eFtjY1Wx7/U
O+P0jTvrVTlzn5z73714rm//6ff67bsf3D50Z79Cb2OzPtjznv/4k5o+1Kiz
qVkd9Y3umr3OviBPv//BXUvL6Rdx5mk5l+0Njf+yJlZfV5fbr+7uWfjOssgv
X/rT62o/uuvdOp4/+81de+q//t1/1u//6Xfu3uONdbXuvKvXdk5Ov7nTh+63
mrvXvuP6j+/d3g9PS4P6/F7LIHUKBro1mkr+c696o5rq6jQUCqmQzbl5pbPd
6WePfZnT5bXM9ewXvXj6i1oa7XO8f6FnT76176hV6ysV7Vh22NqYUaWUUX9f
m4K9TcqOWt7rbda7tz+q21er/HhE8Zjf8l2jQv1tmixElRsbVDTSqblyRgf2
+oXpEU2ORlSdTGkmn1Cq32e5o1tz+ZjKlks2qzmd783rYLmg6sSQVmdH9HC+
ps+XG7q/WNfdxabuL/fd+VbSrVYst3o9LV/9Nw4AAIB/Wzo7vfJavRyyHLKx
sam//Lu1LHJ97uxXfa7H20tdnRxqd31e+1uzWp4f10isR5VC3HLJhHaWpl0T
yX41vbFa+ac/uP3pUyPDKiSHFO7uULS3S966j3rzy8/u+MfgQLeSsZArGLAs
1NFi9blPXR2WI9paFAkG3X07nEzg7LXh9H2HewOK9PcpYLV908cadw3eH//w
B3fvwbFY3M0bTs5wetKdfdMb371zxzycPdGdPUKc+VXOfK6/3Oesq+X0kTt7
ddR//GDH7XTzwxvLEc74hTOnqrWhQZ1ej9qddYGdSzu3X37+0V0Dt7GhTk9/
+1W1H967/SU1lkG8lq8iA/123xs9/+0nPf31BzXUvVOvv0PPn/ygP/3+7y07
2PcR7tdbe5/nT564c7bevXph713j9oa0NzdbLphWbCikj5Y3Pr57rrqPr/T+
zTPLIj/Y63627BDQ2mpZM5VRLczltDifUyYdVCoe0ERuyF7rU3vrGw0EW1Uu
ptz9XbKjIaUTAc1WMprMO3uLNGh8pF/T2YjGoj2azgxaXhxWMT2oyWRI0+mw
1ipZdy/Bq4Ml3Zyu6mxnxv7mWR1uTksPO2ZP+nxgl/uWWw+0vbWk/GjCclMb
+3sAAADg/5EzFuL3dysWHdbUZEEbq8u6vfykx7tr3V6c6f7qk24uD3V1vqnt
taJy6QGFAy2WCVq0bdnj8mBFyZBXNS++V1vNCwW9DQp46uRvqVW/t1kj4aCG
e7rU1dyg1vp3aqx/o6Dfo2wmplRsUAPOHt6dlgusZnXyRXPtR/m97ZrIjiod
G7b7vZZJeu12xm4PqddyU3tdjbtnobOmr9/j7Avyq3ufs6Zvw9vXarFM4ayb
9f7Zc3dPQieXOFkll0y5verOPuk//vkbPbE80eXtcPfw6Ou2c/R45Gtvd/vJ
O+24Pfa9DAwE1eFpU23NB3c8JGS3o8MRffzwTnWWWfyWZdqbm9z80tpYpzcv
n7p5oaXxg2LDfZazBvT86Y/65g//4PZvvHr+xK7/k/74j7/Trz9+p49v36i5
vs4yz0fLMM0aDgXV1lSnd6+fqbWp1s6jQd72Bo2mIxoe9Mnr+ej2kfu8tYoO
dWlyIuqanozbe/kVH+5SOORxFcYj7t6S5WJSpemEKuWUEjHLg563GrfMUp1O
KhPxaWSwU3PZIS3kYqpmY1qbGtXxSlnnO1V3DazDjZK2lvJaqqR0djhnKXVf
D/fbOrBMUrFjxO1zOtnKZ3/Hr/17BgAAwF8Hv9Xfjrb2Fi0vVaXHRz3cXFr+
ONfZ0ZaKE87e3I3KjoS0Us0rlwpqcnRQs1b3FqyWzTt7FxZSlkV86vPUWg5p
1HgspHw8onI2reXShLxNNXr26zcKdLVqbGRIA4EOyxcdaqmvkc/TqlBfj0K9
znq0ne718ZGEioUxZdNxV8Ce2+GsrxUZ1NRoxt3T0Fm7t91e39/docRgvxrf
vVFHQ71i/aF/WbfXGQNxxj2c/BHt63f7RP74u3/U89+eyNPWomE7XsyyTG/A
r3rLAbWWLSKWSQq5cfX19rg96M1NDW4PutOL7oyFDNvzh8JhO5921b7/4O75
4fRqhAd67Vh9dulTf1+7ujsbLXP8rGdPvrPjvrJcUuuuneusz9ttOcvp83Dm
XX18+1KvLZvUf3yrYctsznpXzQ0fzFsFe9o1khxQPBrQQNDjHtfJIZ3eD3Ye
HYpE2jUU8bj5Y6oQtZzSoR5frTKpXs1VMopZxnCySKWcUCLRpWBfg/KZfs1b
dkjbc+M9TSpbrlyfGtHu3JSOFkvaXyxa9pjU/oqTMRe0vZzXfCmmT0fzlj+O
dbg/o75Aqzo62M8cAAAA//M8njarcyNWYz5In28sh9zq7vpES/MTioQ6VcgO
6+HuUEe780oN+xTqqdeo1bQrsxndHG9oo1rQ6kxey+VxzU+NKjUYUCEZ0cbs
lIb7fWqpe2VZIqLEUK9eP/tBde9eyNfWoFDAp56ONiUsC+RGUxoa6FN00HKN
XS9NjCs5PKh3L5/qlx/+7O6Z7mSPzuYGdbU2azjY667162mo1atff1ZzzXsF
PF/mXjl7Fjp9Itl4QvGBkD6+eKGf/vSNu46u09fhjGk42aKludFd06qu9oN8
Xo9i0SHlxkcVtZzhjHfEY8Nu/8f/9u/+F716+UyDoX77nob19uVr/f4ffqf6
D+8tI8S0WC0qNxbTh7e/6Mfv/15vXv5oflHdxxfqcsaDkkMa7Ldz97S44yXO
mIeTvfyd7Wqofa+a96/tsSbFhy1L1b7RhzeWr1o+qsNT42aPZKxXyXivgr0t
Cg+2a3oyqkS8y/JOq0qFmFbmxpWJB+T3fFC4r0Wz0ymlhro1kghodSmn2UpC
0XC7sim/itmQZcOQCpZbypZHNkppXW3O6cjZRzAb0fxE3O39+Hy94/Z5XJ2t
6f56134T9ntYKMjb0fzVf68AAAD46+b8X3Y4MuDmj4eHK93dnuv+9pMeH851
tL+imdKo9ncWdHO1q92topbm0koOeRTpbdDabF7bS5OmqJXKuMlqYmTI3cdw
JBxQNhlSsZDQzNSI+nzNev/iR9W/f6F4uE+j8bDa6j+or9vZ9yKpsVTMHRtx
ckg80q8mq82b6z6o4cMbtdp1Z33ftrqPGujuVMByi9/q+d8sm7x//sTdS732
1Ru9+uWJnn7/o7tXSDE77u4X0vDmrV789JM8ra1qamxQe1urWlua3fWtams+
ur0eQcszzZZHGpxxFbseHhxwx0a+/fOf9I+/s0zx5qU7JvL+3Vv99vMv+vMf
/qC2pkbNz5bNlMbHonrx7Ft988f/otbmtxro87rjIM7aVc58Kmdcw+29dz5D
Y71q3r1291L3eZotc7xz80c6PqhMMqxgj8deV6PBQIsrNuhVMR9VOtqtyWxY
q9Vxuxy0z9atkrOOVWlE5dywAt6Plg0btTQ7qrXFvGaKKa0s2XPz/er3f7Rs
16rCSJ+2F3NaKaW0ac87XCzoxFkXa35c1fGwKs7xZ8d0tFO1LHpqv4lz3Vn2
fLw/VdY+YyfzrQAAAPD/l9+naGzI7UW/v7/UxfmRDvY3dP5pX58+7WpxftJd
c8npdd7fKevmYkWLcymrjevcfbNj/W2K93doLNqrUjaqxeK4CqmwEpZB5iYz
2l4rKWOPjQz3qpAe0nCwS/PTecsHaXfP9Hi4XwMBn0K9XaZboUCXwkG/ZY/3
qnn7wur1Gnt9yI7Xq9o3L1T7+rk6m+vV+OGV3j77WZG+Lg33BfT26VP9YLmg
7rXTD1Ijv+WNgS47zocPbq96i9X97e3Nbi95c0ujGhtr1WSZo9vv9MN06cWL
Z3r5/Lk62tsVGuhXJBxWqL9fPq9X7yzDvHn1yt2TvLHuneWGJvX1eBUfHrCs
4VMmFVFT/Vv98uMf1dXZoNiQX15PrXq6m9XlddbRfen2qTvjHoPBHssc79Xf
06nIQK/yo2mtVMsqTYzaY53qaK1R48fnigSaLMd5lAp7tVxOW67r10x+2PJG
WhX7W0zZ7ZHBDvf+2cmYhvtblEv3qVpManUhp+31oharGY0kfIoEGzWVC2mt
OqbzvTldHS3q7mRFFztzOlkt6nBpQld789q03FLKRbW9Wrb8cebmj4e7E8sx
JXm9rV//twoAAIC/es74R4/V/NKjm0Gc8Y+Tk21tbi5qe3tZ25tVHe4vq1JM
qzQZVSbps5o5oGXLIKVsWP2dNZY9AlqfyyvW5+SQPk2kB61GTmqhlFV5Iil/
e62Ggl7NTmU0nhhU1mRiljv8bfJ7G/Xit++t5n7p7vEd6u3Q+MiQpvMpfXjz
q5rr36iQGVJ80LJEzSt1t9cr1OPR81++VXvDB5ULGSXCffrzP/1X/fLtHzXU
53f70ps/vlfD27fuvoWdTW1qaahVh2WBD++d9aw+mBp3z4oun8cdD3n22xO1
2WVoYECZdFrB3l7LG+/cMY/62rovved23FR8QOOjUcsfbXr1/Ce9f/tUoaBP
b178ou///I8K+FsUHbZz6G3TRD6u6cKIwgPdJqAhp88jHTNxTVj+yiSilgtG
NZlPW07oV8i+v4HedvX7mxUNtioz3KXSeERL5RFVLHv8hZM5pkcHVTSlbETF
8bBioXZNjw9qoTKieePOvSon7Xsc1MrCmE7353S0U9GFZY+z3VmdH87rdHtG
29WC6/5sQ7enGzrZW9bF2abubw91fbmvfDapTm/bV/+dAgAA4G9HZ2eHOwdr
ZX1Rny6O9fB4rdPTXRWsdh5JhbW1MevWpM4edtGIR9lUjw62pnW6U7WMkdHc
ZFKzljNiwQ6lwl2aHotY7RxQpM+jof4u+Sx/eNveW43dp3SsT62NLxXsadB4
pt/uf6eGmqdW29db1njpcp43mbMa3+rw3q4Gtx7v8dZb9qhTLh3WqGUAT+MH
yzR+yzQ5Dfd368n3v7dL5/a4hoMB1bx+qQ8vnqmlplZdLW3ytjYqER1QT5fV
0p2tbt94LpOSp7XRXRf3p2//rG5fp9t/HgmHLJ/U6z/8+3+n77/7s0KhoAZN
n7P3u733QK8zv6pJjXWv1VT/Wl3eBssev3MNh/3Kj0c1W8lqfi6n2FBAPd0t
7rpYw+FeRU3BavqRRFiDfd0qWybLj8Xc/DGVT2quPKpM6stauc5cqHzKvovM
gNvz7+SOqdGQZbiAZgsxbVXzbk+589hwf5tGYl2qltP2HSRUGA9ZrhnU4kxK
60vjWrUMsjo/phPLIZtLefu7JbW3PqUT+xvurBR1ebSmh6t93V0e6PHBmX93
ppJ9l60tDV/99wkAAIC/Tc5aWNOlyS9zsR4uNTc3obnZCe1uLejqYkefjle1
spB3a9mq1a8rMzntrc1oc3Fa6eEepYd6lEsNaDzZr6CvQclIj3p9LQr1tFsO
6bDs0asxezzU1+z2Si+Unf/373V73CMDXn1487Nlk9fydzbI11GjZDSg6XGn
9yGgpo/PVf/uqVJDfYqFeuzYvW4PSUdTrZ79+K3q3j6zunpW2ytVJcMDbq+I
r8VyS4dHNa9eqqujya3789mERlPDGh4MKj40oISzpq+33R0f6bIc5szP8rS3
6sXzZ/pP//E/uPt/ONnD6Qnp8Xvlaflo2aPBckjQXaNq2D6jM8/q1csf9eLp
d+rvbVPCPmcmHdJYJqxUIqghy2QjyZC9p98ykLN3x5exjo7WWmVHwmbQzmlA
M9NprS5PKBbxaizmd+dbOWMgxWzYMt2gZgpRd/zDub1RHdfuYsEdG3HyychQ
l6KhNhUs0xVGB5QbG7AsE9fGck7zFftbzTt9IVk3i2ytT2pjJa/z0yVdX2zr
09G67q4P9fnuRDeWP26vT7WxviRfV8dX/00CAADgb5czF6vD69FINq1SqaD1
tTnd3h7r4tOW6+Zqy91/7vhgVhPjVt9Oj1hdHFU+PaiBrib1m8Rgl+WPkKay
UcslRQ0HfUpFApYVgm6OmJlKaSQeUHf7ewW765S262tLRau5uy0j1CpltXvt
+yfu2MfiXN6tzacsg8QHuzVsGcaZi9XVVu9KRoL66Zvf67/8+/9VbfVvlQj3
unOxxuIRy0MDbq+6s16Wt7ne7a/IZ2MKBb3qsUzkjD0EfB6FgwF3HCQVG3LH
N8Lhfnde1pvXz/Ts6S+WR2oV6PGpucmZg/VW7W3vLVv0a27GavnVsjY3ZjSa
GVQk7FM41KnIYKd76fXUuLmjOpvT1ETSzSEDwXbFLKcFLK8E7LvqdcZ1fI2W
Z2o1azliemJY6YTfHv9o+aNb1cm4qlMJLVcyWiyl3etO9piz+xemk1qYiLvj
H04umZ2KW1YLu4q5iFaX8jrYKWt/u6TTgzktVzOqWg6Zn0lpd6eoq8tV3d9u
6f7+WGeftnVzc6zHx3Pt7a2qz74bj6eVdXYBAADwr8LX5VVrW5OSybCkGz3c
n+ryfFu319tWs+5oe7uohflRbS8UtTY3oaVyThOjQ4r0tlve8GprqWQ1c87N
IWPxkMo5q5vH45ZD/G4v+oDV3R9efCt/xzvLFwMaS4csh/S5WSNsGcPJH6G+
dpUmU2ppeKW6D79pPDWoxUpeu5aJEuGAmz9KhVFFrFZudvbvCHbJ72lSS+1b
tyd9LBFRsKtdzTWvFfJ3qDI1qiHLRs31r81bDVou6u5oUWPNO3edrU77vF5P
i3yWSYJ9fvUHe9zLDk+zkolhZcfSlkFq3L04Ru08nflVSwuTmijE1RdocfNG
ZNDnXu/taXH7Pwq5mMYsm/i7GjQc8blGUs5eH854R0jVmTF3H/P4sM+dL5WK
+9w5U2OZgOYmYtpcyGvWLnPJXneMwxn7cOZeLRRTWq9mtVrOuJnEySC7a1Pa
3yhpd31a64v2PW1Z9tgqaaGScPPH+nJOB3tlHR9Vdf5pWZeWP65uNnRzd2yX
R7r/fK77hwsNWn5rbmbOFQAAAP51Of/37dTi8wtl3dye6PPDqe5u93R0sKCZ
StIuq9L1kXR7Zk6luzOd7ixZLZy1urlodXJI/b5mTY3GrV4eszySt/sG1NNe
o86Wt2qtfaYZq62dvQ2HQz43g0zl4+44iDMG4ox/OPOvAl2Nevvie3f8o5AZ
djNIZSJjGaNT3ZY3psZSyqXj6m5vdPtAnMxRyMRVyqfdHvfBQLuS4R6F+zzy
tX1U3bvfVP/hufq729Va91bPf/7O7nuuHssevX6fUslhRcJByx7dKk7nlU5F
Fejp1GgmoejwgDxt792MMZGPKTbsd7NFfe1TffPHv1Ptx6fq7KhV2D5POtlv
mWVIXZ11evv6B8smHXbsHo2OBrW2MqnlhYKmJ6LuPKnqTFrphE/hAfs8k84+
iAOW5770fORSfe5au878q3JuSHm7b20uq435nFYtv6za9cXyiLZXJ3W8O6eT
/XntWg7Z2Sxpb3NaG4tjOtwp6cxyx+3Vuh4f93V7v6nzqzXd3G+bU11cH2tr
d9XNHm1t7PEBAACAr8PJIF6vR31BvxYsU5xf7OrsbFN7u/PS/YnlDmO16+er
I7vYthiyo8vDTVWs9h+NBVWdHNNGtehmj835aa1UcpopJJVL9KuQGrD7Csqm
+y1z+DU86NN0IaGlakHFiaT6A63uOrYJyyD9PS1u73lH0zstlK3urk67+eHp
j9+4PejxwaAa3r10xz+c/OGsieX0qKfs9WV7v0ysT31dTRrsbVf9uyduL0l3
W508jc6+Is/dfpKgr12RgYAmJ7J6Z/d9/90f1W6ZJhYdVFtrg7q7PKqUJzU8
5NPggEepRK+mCnFN5KIaGvSqtemV+vtaLGd0KZeNub0fw/b+Pm+dvbbWrndq
INSs0GCTZisplYtJe53HtKtUjGpxPqOpiUHFo+0ajrRoPBVw17Zy9vaoGGcu
1qSz1q5ltoO1ojbnclqaTmqzOq7teef7zWt3ZUrrdr+TSbbt+vF+VVef1nVx
sqbr8w0dHyzq/mZfnx/PdHt7KOlClxeH6u31qbWlUb5O+j0AAADwb0OHt03Z
8RFVqyUzrfOzPT1en+rz5ZHuzg91sL6gw41FyxoTyiUjmpnI6HB90fJHSXMT
IypnE8onQ9pZLOlka95q6Iq7l8VoPKDRdEjd3np3DMTJH0HLG864R0fLO3W2
fdBkdlj9frvP26BSPqXFSkE9HU1qeP9SUcsM/c4aws6e4u2WMQI+Dfd3qavt
o/wddRoa6JCv7b0G/E1Khrstb/yqxre/qbulVkFvq3qdMZTRpPKpmOWerNLp
YTU0vNePP/5JHz++VH+/s0d8o9XoXg0N9ymV6nP7P3r8dr6ZAcsrMc3OjGpn
e1bj2ZC6fPUq5OJKJ4LKjQ25c60KliOcPvuEZZehgXb7HvqUi/uVjng1NRL6
0r9h+cLZx6OcH9JIzKc5yzVnGzPaq+a1Ubbjz45r2l5XzQ7peKWos9WiTpcn
dblZ0cF8TpuVMa1XRrVcTGux5Hz3Ffu7bOvmYk+nB6uWQ3Ysj6zo8mzHWWXZ
fNbNp0OFQ32Ws1q++u8LAAAA+L9zxkM8njZ3r/CxsRHp/kKyDHJ9vKOT7TUd
by2rkh9RJZfW/NS4q5CIqJiJqjwWt+shrc0ULINMuaqFmLvO7EhiQJnkgOZn
xrW8MKmZYsZu96up7oXboz1uNXw05NP0eMzyR1K59JA8Te/V19WqsLMWbluj
JsdS2lyeVSYWcnvRu9pqFAl2KNDZYHnE4/bIJ6M9aqh5plrLIM5aXOF+r7yt
HxQZ6FQ2HbbsMageZ/2qVL9GMmEl7JwGQp0KDng1OZXWeD6qbC5i97Wpre2N
+oItbh4pV0a0sjqtcKRD7W3vVJxKuX0szjq6zrknIt2KDvo0kYm4PTFV+xzL
hYS2LVNszGa1ZM8/tEzhrGXl9HPkM/2WOdLatceXJ6JamUzowFl3zDLKUmHY
3bf8fL1kGWRKn4+WtFu17FFOaa2Stlw3rTU75tGGkz92dH9zqJvzXX2+OdbD
/Znbz3N+uq9ULKKuTo86Otq/+u8KAAAA+P/U5dPR7qbVtRd6vD7XzdmRTnbW
XVtLVRXSVkenhjU21Kel6Yz2lkr6tLWg/eWycvE+VcajmkqHNDLsd/cBmZ1O
K2P3O2tknewtaWetYtd7rXb3q9tTq672GpWsZi/l4+q0zNBY81SZRNCuv7eM
Ua+p8YRW5qc0GPCo4f1TdbfXWu6wXGHZZmkmr4XKuLKWKbq8tervbVVlekSx
oW43J8SH/EpaHgmFOtTX365QuNMySFCZsYh6g+2KDHerWM6oVMloejqpRNzO
eTyscMij0ZEBjWctY8R7FB7sUGzYmX815B5vJBlUKNBq519juajXsllSpVxC
+wtTKlk2mbHjV/MxzThjGhtlrcxk3N5ydw2r0aBWphOWTWL2nIiWJmPamhvV
7vyYjlcmdXe0qNPNaZ1tTWu9ktJqOamTzZJlwUVtLxW0v17U1em6u6auPn+y
3HHtrqt8c3EqX0er/F/79wMAAAD8D/D5OtXf36+jw0Orbz9bnXunu6tzu36r
o51NVQo5tzd8uWz18uasNuYnVZ1MqZi1TBLvVWl8WNOjEaWt9s9bLhi3etzZ
IyTc92X/73HLJs7e6bEBn7wt7zRomWHejjUxNqSWuufq8dapYsdz1uadykXd
PvMeb4MifXaMXo/6u1vU2fJBhUzEav6k4pZjnJzh5A0ndzhr+26slP5l75Hy
VFo5O6fJYlqVyqiyWSd7tCnqzA8bCyue6FO/5Q1nzlWllNZMeUSF3JB76fSC
jI30Wxbpd7NIPNqjfDbqvmewq9HNVOV8QkO97colQjpdn9GUZZPSSEjjdi4Z
yzsr5S/Zw1GZiGphKmq5LabpTJ825jKWT4o6WJ3QaiWtnYVxXR/O62y3pLVq
UuvVjI42i7q/WNPd+ZouLZtcnSxL98c63Fm1zxvUcLhPQ4P96uxoo88DAAAA
f5Xa2501ZvO6vb7R4/2DpEc3f9xfnun8cF8rcyVtL03pZLuqldlxFazenhqL
aHNx0u1RyFoOmbKav1oaVc7q+oVyVnPTGXe8oGDZ5Ghn0e396Otq0HQuprWF
SXeso7X+pVLDPcqNDLp5xNnTsN/fqoC3Xomw3933cMjZ56OjXtlkSOFAhzt+
MjzQqZizRm53k8JBj2WPqPs+TiaZsPMYsQwU7GtVLOpXyTJGb2+zAoEmpZO9
ylvWGAy1KzrkU3Eq4Y59TE/E3D3h49FuJWN+pRMBTeSjytuxnP0E/ZaRgpal
Zpy5W8kBNX985vagrBYzKqcH3PGP0bBPU3bdyR/zU0l3bw9n/471+THtrha0
uTCmi4M53X1acW/PF2PaqI7q/KBqeW9NuxsTOtwu6c6yx/31lh4ut+1vcGJ/
i0+6vTxQoMtrecNjf69OF3t6AAAA4K9Zl89Zm3bU6vNxq8WX9Hh3Y7WvZZHH
B53sbWrDMsPm4oT21iv6dLCsnZWiTnbmtVbNq5Qf1tLMuHbXZ3R5sqGz/RWN
xHrdbOGMdTh7Fa4vTpkJbSwXNTM9orjlByd3OOMjTpZwxkqcsZDezkZ37CM6
4NOAZREnf6SGAhpz1vztaNBgoE2jiT5lLRfEw13uvK2+7kaVCnG3P8PJJlnL
R/7OGnW0vlV+dFDDznys7gZNWfYoWi5w1uoaHw3Z8/rV19Oo3NigpgtRxYe7
FI10KmE5ZHkhr8X5gj1v0B1bceaIjZpxe19n75OJzJAW8gkVhrqV6G1VeqBD
a5Y9nPxRsezi7DU4X0xpbT6rw52K5Yspne7N6upsRdtrk/Y9FHR+tGhZY1sP
D3u6+LSms6Nlu72rh5sD+/5P3B6PnbU5+yzt8nrp7wAAAMDflr+s09ve3qqF
2YoeHz+76yvd35zr4nhdu6vOXhQzerjc0835lsvJIhfHqzo/XNXmctlq61nt
Gmc+lTOmsTSb1fLcmPY2ypY/Jt3c0NtZ746B3J7vuHOzIkGP21/hZJZYyOeO
fTjzsEaifZoci7qc/JGMBFR09kDMxzSZHdJ8acweG1IuPahZyzSh3jZ7fZeW
LQutLeS0ODOi6VzEMkybMnG/dlan7fVDSoY7LQMltVwdt/t7LVv0uhklmw5q
0c53YWZUm6tTmrPr87Pj2lqruO/j5KRqcVSr1YLK+aT2l6bdNa2ykS4VYgGd
b1d1sllReTyiuam4FsspzVdGLH9UdbA1p/3NWZ0eLmnXWetqe+7LGrr3hzo7
W9f5JyeHnLpr6Tq5w1nbanFmSt72ZnUyzwoAAAB/47wdHiWiw9pYXbEIcu/W
xPdXR7o83vqyT6GupMfzL3uHmEe779PBplbnpjSdjSmfsRq8mLGae0aH2zNa
WchabohaHoi7a2A587H2N+e0YrW80zfizG1yMokzbys+2OX2fsxOZazeH1Nl
Iq2ZybTKBavnS1l3PGUsHlRpPG63MyqMhN3bU5ZTKvacTNTvroG7tTxh7xNS
KmJ5w26f7MxpdiKqaH+rHSum60+b2lqZ1lQ2ouRQl3t+O2uWoVaLWpob14xl
i831GcsiZRULCXfu2NZi0XLYjBbsPA5XyrrZndfR8rR25gs6t5zh2LfXH1re
Otwsa8OOf3q0rrvrA91c7Or8ZMu+04qW5yd1drShh9tjXV+f6tG+z6vrY21v
r2hnc1W57IjaWprU5fN+9d8CAAAA8K/BWdPV096m+dlZiyC3ur8+t/p8WcXJ
nHJjaS1UilbDH8uKaNmD+nx1qqOtJRVzztpPcW0uTWt9IW95Iab5maRljXE3
czhjFc7cKWe8Iznkt7o/rqXZnOWNEa1ZXe6McThjGztW5zt5w1n3an+j6l4f
Tw26YxDzpuis42vPnRiN2PW4VmYKduxRhfxNSoU7NDcZtYwS1mxh2LVQdPoy
YhqLdik20OGuwbW2ULDjpTWW6NWKncOa5Qgnm8wVR7Rq5+/kD6e/fXl+wrJK
SetVu1wuac/ObXM2r3V7nrO/x/3xmk42Kvq0W9Xj1a4ejNPHcf1pRxdne7q/
ObPv6VJX54faXJvXlrn6tGfZ7tJdz+pwf1eh/oDlvna3r7zT6/nqf38AAADg
X5szJ6ur06vY0JD6A1Yfe9rV4+9Wh122NTVpd33LrZ91d6+r4wPtrS1YDV/U
wea8jncXtDqfs1resshKzs0fs84avhtz7nymLs9H+do+uGMgq1bfO/OonH1B
1uan7ThzbubYWiq787mOd5a0Wp1UpZDWciWnIzv+yfaiZY68Zu01M/mEFp25
UfbYVGbQnjek2clhTWaCWiqnVJ1y9igJaX46btklYbkkovFYwL0sOXuT56Na
m8vZeYWVifVo1B6bzkXdczvaWdDl8aprb6Oo7ZVJ7W2WtLNY0KLln83KuM63
Fyx7LOj206ZljT1dXm3p9n5Xnz9f6PPtpR7uLvX4cO26vjqzHOKsp3tt2eRI
hfEx+SxveNnDAwAAAHC5OcT3f11zqb2tVfmxvNMiYvnjs27OjnV9uq+zgw2d
H65pY3na8kZCa4tZnexXtLdeUrmQ1GLF6aHIKTXkV6S3XeuWPTYWppWK+DXg
b1G1NKYjyxYHm1Udbs1r2TKAM5drZa6grdWy1hcmdLg5a/ljXjMTCa1Usjpc
m9Gevd/hakWnzhyozaK9x6hlkKhmLIcsVlJankm79x3vzuj2bFlb81ktTMW1
MpvR6X7VHhtXethvOWhAo/FeO79uLZRHdbQ1p+PtWXvOvI7stetL41pdGNPe
6pSO7Xw2LH9szOV1ebTijntcnm/q5m5Ptw8HljWOdHd97mYQfb7R5/sr3d9e
6OH+RgcHOxoI9qittfmr/30BAACAvwadXq8mChO6vrD6+uFej/fXur081s3F
vo72lzQ/O6LK1JBlkFHLJyu6OFjSumWP/bWSDtYqmptMu+MXlVxCw70eRfo8
WlmY1IGz1q/lkt2NGS3O5pTLDGp8JKyFmZzbv31oeWBpZkyFdL+WK2PaWS5q
ciSkdMirtbmsLo+XdLI3q9mpqMoTQzrbn9PN6YplmqL2N6a0s1TQwfKkrg8X
dH28bOe2oR07J2dvxCV7jz3LPlvLZR1szGl7pWQ5KuXmpv3Nsntcp7fEWXv4
cKWii71lnWwt6HRvSbcXO5YxjnVvJu2z9fg7lIhFtLu1poP9LU3kRhWPDio+
PKjurg56ywEAAID/QU4NPTg4qIuLT+5UrMfP17q7PtbD7ZHOjle0ODeizdW8
rs+W9flqW9enq1bzr+j2aM1ywLSWS+N2WdSe1fKbK0WtW70/UxrVWDqkmWJG
y9UJyzAjmhiPuvsNOplkfWnK3W+kWhyxPFPQvD2eifSo39ugaLBdm8sFXRwv
Wiaw3HG2pt11O+7CuGUHZx2qkmWWUW3M5/Vpb95dF2uhNKatlbJ21me0b1nC
2XPj8fZEn6+PdHm25d6/UMna+07o0s7/9HDRbo9p1zLK50977lywraWSrs62
3F79mUpO7e1N7vfzZeyoQz3dneroaHO/L/bvAAAAAP7ndXR4FAz2aSgyqFCo
T4sLZVlhrvubAx3vWw44XtLF2Yq7r/fNp1WdHznjE1VtL09b3T6ls71lPV4d
6OH6QJ9ONnS4t6TydFrpRJ+mCnHLJEV3POVob9Hyx5wOdhb16XhdV6dbujnd
sewyo9mJlKbHopqbSGtjYUIHllPOD5YtgyyqXEh82TPR7t9embbcUNTBmmUN
e86a5RdnPauVuQltrc5ZttjU3c2xPt+e6fPNqfRwrpvzfa1ZRlq3152frNt7
r1lOmbcstaeHi2M7pwXtbS66/eQnh1vq9LZ99b8JAAAA8LfO7+9y/28/EOjS
5eWxpGur59e1v72g2+td6fFIt+cblj3mdbq/YHX8ij2+Ynlk3e7f161lEGet
2sf7E+3vLqowHlVpKm01/YoeHywPPJzac470cPslFzzeWzb4tK/T3VWd7Tjj
KXNaLOXcOVSbi9M63lrUznJZEyNOj3lauysV18Xhmh5vDnVk57W1WNK5ZY7z
422dHW3r7urM3utSDzefLH980uOds27VgQ53l901c+/sHG+v7Fwv9+3xM8np
Lb+7cPeNvzg/Vl+gm/ENAAAA4F+RM8coPDigkVRUPm+bvJ5mTU+MuGMHh/uL
Oj5a1f3tkfTZ6vZHq/WdsYa7c8sep7q0POHM37q7PtHh3prlkBX3trsv3+OV
+zynl9vpNXm4ccYmjnVzeqjPV590e3as441VrVentT43pUvLFWd2jMmRqKqT
Y7q3Yzv3nVguub+0HHFxoIujLd1fn7jH1MO1vc+tuf9y3bnv8dZ9n9urEz3c
nbnnK126ewQ6/x7sPFYs94wko+r0trNnBwAAAPCV/PfjAO1tzfJ3e9TaWq9A
j1eHB9u6vbvR0eG2Dva33TreQoVuby71+f7mn3tJLAd8vnPHFna2NxUaCKq3
p0vzsyV77FaPjw+6u7JscObsgWivv7escH6qg7UFbcyXdX28a48daHV22r39
cH6ko81lrVWLuj7dtQhxrkd3jOPCfe/HhzudHO1pf2/ry/k4O8DfXenc8s3D
X8Y4Lg5VnBxVuVzQwsKcegPdamlpdPfsYNwDAAAA+LfH42lTIOBXMpWwyx71
9AQ0NTmlpaUVjY2OqZCb0MX5lVv/X3y6VHZ03HJLq7snolPne9pbNFUYd/OA
M1bxeH1uF874hWWVu2uLFc6YyL4+X39yx0XO97d0ebAj2fMeLk51f+mMd9jx
H67c5zzcXOjestDSYtUdw2hpblQiHlV1tqxIuF/ejjb19fo1NBRSZ2ebmpsb
7DkN6rDP4fN5yR0AAADAX5GuLuNz+kf88no7rK73qDfg9LMP2+N+t7/9v6/x
nesdnlbLIDmLIA9f9kB0sshnyyI3lissS8gZD7m9cvPIo2WT+8tPuj491sP1
pTu24YxzOGMvq8sLyo6lNDgYdHOR1/KNM3/Mud7S2mSXre7tv+QMH/OrAAAA
gL9J/2+1vptBOtoViUS0trauqalpyxAhjWezFjn+ee7U/b3Oj080W64o2NMj
f6dX2fSIUsm42i1XtLW3uJeeDssdnZ6v/nkBAAAA/NvmjFN4PO1qb29Ta2uz
6uvrFAwENJnLKzwwoA67v6mhXs1NjV80NthzW7/6eQMAAAD46+eMizj5oqW5
iZwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAF/R/wn6+Ke8
    "], {{0, 750.}, {600., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "XMP" -> <|
       "XMPBasicSchema" -> <|
         "CreatorTool" -> "Adobe Photoshop 24.0 (Windows)"|>, 
        "XMPMediaManagementSchema" -> <|
         "DocumentID" -> "xmp.did:B86B43331B419A409A2346AEB11E6179", 
          "InstanceID" -> "xmp.iid:9161CF14D5A8DD41AED4DA1B8E9D8CE0", 
          "OriginalDocumentID" -> "C129104E4663192AF79E5E6444BCB431", 
          "DerivedFrom" -> <|
           "Reference" -> <|
             "InstanceID" -> "xmp.iid:4c395cc6-7fbe-44d5-a47f-59921a333f8b", 
              "DocumentID" -> 
              "adobe:docid:photoshop:822a2455-05fc-9543-8141-95f8a4f93dbf"|>|>\
|>, "PhotoshopSchema" -> <|"ICCProfile" -> "sRGB IEC61966-2.1"|>|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{38., Automatic},
  ImageSizeRaw->{600., 750.},
  PlotRange->{{0, 600.}, {0, 750.}}]], "Output",
 CellChangeTimes->{3.938186856750225*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"cf5e19ef-4d60-214d-832f-752a6a04515a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Process", " ", "the", " ", "test", " ", "image"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"testImageFeatures", "=", 
     RowBox[{"getEncodedImage", "[", "testImage2", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"testImageFeaturesFlatten", "=", 
     RowBox[{"Flatten", "[", "testImageFeatures", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"imageScores", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"CosineDistance", "[", 
          RowBox[{"testImageFeaturesFlatten", ",", "#"}], "]"}], "&"}], "/@", 
        "sampleImageFeaturesFlattened"}]}], ";"}], "]"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Compute", " ", "distances", " ", "in", " ", "parallel"}], "*)"}],
    "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LaunchKernels", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"imageScores", "=", 
       RowBox[{"ParallelMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CosineDistance", "[", 
           RowBox[{"testImageFeaturesFlatten", ",", "#"}], "]"}], "&"}], ",", 
         "sampleImageFeaturesFlattened"}], "]"}]}], ";"}], "]"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"compiledCosineDistance", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"vec1", ",", "_Real", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"vec2", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"1", "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"vec1", ".", "vec2"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Norm", "[", "vec1", "]"}], " ", 
            RowBox[{"Norm", "[", "vec2", "]"}]}], ")"}]}]}]}], "]"}]}], ";"}],
     ")"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Use", " ", "compiled", " ", "function"}], "*)"}], "\n", 
   RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"imageScores", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"compiledCosineDistance", "[", 
          RowBox[{"testImageFeaturesFlatten", ",", "#"}], "]"}], "&"}], ",", 
        "sampleImageFeaturesFlattened"}], "]"}]}], ";"}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rankedImages", "=", 
     RowBox[{"SortBy", "[", 
      RowBox[{
       RowBox[{"Thread", "[", 
        RowBox[{"{", 
         RowBox[{"imageNames", ",", "imageScores"}], "}"}], "]"}], ",", 
       "Last"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Return", " ", "the", " ", "best", " ", "matching", " ", "image", " ", 
     RowBox[{"(", 
      RowBox[{"with", " ", "the", " ", "lowest", " ", "score"}], ")"}]}], 
    "*)"}], 
   RowBox[{
    RowBox[{"bestImage", "=", 
     RowBox[{"Dataset", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"rankedImages", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "bestImage"}]}]], "Input",
 CellChangeTimes->{{3.938186874130457*^9, 3.9381868753113976`*^9}, {
  3.9381869567957478`*^9, 3.938186986909649*^9}, {3.938187089361847*^9, 
  3.9381870966450844`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"1b3ef2c9-1a6c-fc47-afe7-5aa2a024bde5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.4619411`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.938186878800251*^9, 3.9381869908732967`*^9, 
  3.938187099552931*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"5ca22127-15d9-0640-b019-f7135cf7be10"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {"B9445-4", "B9447-4", "B9448-3", "B9450-3"}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[78.4]], 4, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 4], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[78.4]], 4, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 4], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 4, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["B9445-4", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["B9447-4", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["B9448-3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["B9450-3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{87.4, {50.83003309800196, 56.561966901998034`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{87.4, {50.83003309800196, 56.561966901998034`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.938186878800251*^9, 3.9381869908732967`*^9, 
  3.9381870995796146`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"bc81a3b2-04fc-d34b-ac67-c7660a772aaa"]
}, Open  ]]
},
WindowSize->{752.25, 636},
WindowMargins->{{Automatic, 64.5}, {26.25, Automatic}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b54a729a-1240-ef4f-8f2e-24252a9a0115"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 218, 3, 28, "Input",ExpressionUUID->"ad571793-9239-194e-a2d2-808be6f648b0"],
Cell[CellGroupData[{
Cell[797, 27, 255, 4, 28, "Input",ExpressionUUID->"467f9ebe-fedf-2548-b52a-bdaf4f2a058a"],
Cell[1055, 33, 204, 2, 32, "Output",ExpressionUUID->"7d145179-e669-b842-bd89-18fe7f947d96"]
}, Open  ]],
Cell[1274, 38, 1315, 34, 218, "Input",ExpressionUUID->"50458930-f01f-df45-b248-410012356774"],
Cell[CellGroupData[{
Cell[2614, 76, 1124, 31, 123, "Input",ExpressionUUID->"0ccb6489-ab78-3746-a264-04dc6f21f6c7"],
Cell[3741, 109, 1100812, 20535, 84, "Output",ExpressionUUID->"a09a8150-9d74-3346-acda-50a18d549b6a"]
}, Open  ]],
Cell[1104568, 20647, 1322, 35, 161, "Input",ExpressionUUID->"2bcff302-4b3e-d642-94f0-f8e74d801fce"],
Cell[1105893, 20684, 374, 8, 47, "Input",ExpressionUUID->"b814e409-98df-844b-a75a-7e9f293fe2f1"],
Cell[CellGroupData[{
Cell[1106292, 20696, 331, 7, 28, "Input",ExpressionUUID->"596fa581-f876-3649-bd81-53290b7b1ae3"],
Cell[1106626, 20705, 497503, 8164, 64, "Output",ExpressionUUID->"cf5e19ef-4d60-214d-832f-752a6a04515a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604166, 28874, 3886, 99, 541, "Input",ExpressionUUID->"1b3ef2c9-1a6c-fc47-afe7-5aa2a024bde5"],
Cell[1608055, 28975, 255, 5, 32, "Output",ExpressionUUID->"5ca22127-15d9-0640-b019-f7135cf7be10"],
Cell[1608313, 28982, 21515, 378, 168, "Output",ExpressionUUID->"bc81a3b2-04fc-d34b-ac67-c7660a772aaa"]
}, Open  ]]
}
]
*)

